/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeEarningHistoryItem
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeEarningHistoryItem {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TOTAL_EARNING_AMOUNT = "TotalEarningAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_EARNING_AMOUNT)
  private Double totalEarningAmount;

  public static final String SERIALIZED_NAME_TOTAL_EARNING_HOURS = "TotalEarningHours";
  @SerializedName(SERIALIZED_NAME_TOTAL_EARNING_HOURS)
  private Double totalEarningHours;

  public static final String SERIALIZED_NAME_DEDUCTION_AMOUNT = "DeductionAmount";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_AMOUNT)
  private Double deductionAmount;

  public static final String SERIALIZED_NAME_EARNINGS_TAXABLE_AMOUNT = "EarningsTaxableAmount";
  @SerializedName(SERIALIZED_NAME_EARNINGS_TAXABLE_AMOUNT)
  private Double earningsTaxableAmount;

  public static final String SERIALIZED_NAME_EARNINGS_TAXABLE_WAGES = "EarningsTaxableWages";
  @SerializedName(SERIALIZED_NAME_EARNINGS_TAXABLE_WAGES)
  private Double earningsTaxableWages;

  public static final String SERIALIZED_NAME_EARNINGS_EXEMPT_WAGES = "EarningsExemptWages";
  @SerializedName(SERIALIZED_NAME_EARNINGS_EXEMPT_WAGES)
  private Double earningsExemptWages;

  public static final String SERIALIZED_NAME_EARNINGS_EXCESS_WAGES = "EarningsExcessWages";
  @SerializedName(SERIALIZED_NAME_EARNINGS_EXCESS_WAGES)
  private Double earningsExcessWages;

  public static final String SERIALIZED_NAME_TOTAL_WAGES = "TotalWages";
  @SerializedName(SERIALIZED_NAME_TOTAL_WAGES)
  private Double totalWages;

  public static final String SERIALIZED_NAME_EARNING_TOTAL_NON_MEMO_AMOUNT = "EarningTotalNonMemoAmount";
  @SerializedName(SERIALIZED_NAME_EARNING_TOTAL_NON_MEMO_AMOUNT)
  private Double earningTotalNonMemoAmount;

  public static final String SERIALIZED_NAME_EARNING_TOTAL_NON_MEMO_HOURS = "EarningTotalNonMemoHours";
  @SerializedName(SERIALIZED_NAME_EARNING_TOTAL_NON_MEMO_HOURS)
  private Double earningTotalNonMemoHours;

  public static final String SERIALIZED_NAME_EARNING_CODE = "EarningCode";
  @SerializedName(SERIALIZED_NAME_EARNING_CODE)
  private String earningCode;

  public static final String SERIALIZED_NAME_EARNING_DESCRIPTION = "EarningDescription";
  @SerializedName(SERIALIZED_NAME_EARNING_DESCRIPTION)
  private String earningDescription;

  public EmployeeEarningHistoryItem() {
  }

  public EmployeeEarningHistoryItem id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of this tax item.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "36f45f30-9a35-0000-0000-000001000000", value = "Unique identifier of this tax item.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public EmployeeEarningHistoryItem name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of this earning item.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Overtime Hours", value = "Name of this earning item.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public EmployeeEarningHistoryItem totalEarningAmount(Double totalEarningAmount) {
    
    
    
    
    this.totalEarningAmount = totalEarningAmount;
    return this;
  }

  public EmployeeEarningHistoryItem totalEarningAmount(Integer totalEarningAmount) {
    
    
    
    
    this.totalEarningAmount = totalEarningAmount.doubleValue();
    return this;
  }

   /**
   * Total earning amount.
   * @return totalEarningAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "456", value = "Total earning amount.")

  public Double getTotalEarningAmount() {
    return totalEarningAmount;
  }


  public void setTotalEarningAmount(Double totalEarningAmount) {
    
    
    
    this.totalEarningAmount = totalEarningAmount;
  }


  public EmployeeEarningHistoryItem totalEarningHours(Double totalEarningHours) {
    
    
    
    
    this.totalEarningHours = totalEarningHours;
    return this;
  }

  public EmployeeEarningHistoryItem totalEarningHours(Integer totalEarningHours) {
    
    
    
    
    this.totalEarningHours = totalEarningHours.doubleValue();
    return this;
  }

   /**
   * Total earning hours.
   * @return totalEarningHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "82", value = "Total earning hours.")

  public Double getTotalEarningHours() {
    return totalEarningHours;
  }


  public void setTotalEarningHours(Double totalEarningHours) {
    
    
    
    this.totalEarningHours = totalEarningHours;
  }


  public EmployeeEarningHistoryItem deductionAmount(Double deductionAmount) {
    
    
    
    
    this.deductionAmount = deductionAmount;
    return this;
  }

  public EmployeeEarningHistoryItem deductionAmount(Integer deductionAmount) {
    
    
    
    
    this.deductionAmount = deductionAmount.doubleValue();
    return this;
  }

   /**
   * Amount deducted from this earning item.
   * @return deductionAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Amount deducted from this earning item.")

  public Double getDeductionAmount() {
    return deductionAmount;
  }


  public void setDeductionAmount(Double deductionAmount) {
    
    
    
    this.deductionAmount = deductionAmount;
  }


  public EmployeeEarningHistoryItem earningsTaxableAmount(Double earningsTaxableAmount) {
    
    
    
    
    this.earningsTaxableAmount = earningsTaxableAmount;
    return this;
  }

  public EmployeeEarningHistoryItem earningsTaxableAmount(Integer earningsTaxableAmount) {
    
    
    
    
    this.earningsTaxableAmount = earningsTaxableAmount.doubleValue();
    return this;
  }

   /**
   * Taxable amount of this earning item.
   * @return earningsTaxableAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Taxable amount of this earning item.")

  public Double getEarningsTaxableAmount() {
    return earningsTaxableAmount;
  }


  public void setEarningsTaxableAmount(Double earningsTaxableAmount) {
    
    
    
    this.earningsTaxableAmount = earningsTaxableAmount;
  }


  public EmployeeEarningHistoryItem earningsTaxableWages(Double earningsTaxableWages) {
    
    
    
    
    this.earningsTaxableWages = earningsTaxableWages;
    return this;
  }

  public EmployeeEarningHistoryItem earningsTaxableWages(Integer earningsTaxableWages) {
    
    
    
    
    this.earningsTaxableWages = earningsTaxableWages.doubleValue();
    return this;
  }

   /**
   * Taxable wages of this earning item.
   * @return earningsTaxableWages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Taxable wages of this earning item.")

  public Double getEarningsTaxableWages() {
    return earningsTaxableWages;
  }


  public void setEarningsTaxableWages(Double earningsTaxableWages) {
    
    
    
    this.earningsTaxableWages = earningsTaxableWages;
  }


  public EmployeeEarningHistoryItem earningsExemptWages(Double earningsExemptWages) {
    
    
    
    
    this.earningsExemptWages = earningsExemptWages;
    return this;
  }

  public EmployeeEarningHistoryItem earningsExemptWages(Integer earningsExemptWages) {
    
    
    
    
    this.earningsExemptWages = earningsExemptWages.doubleValue();
    return this;
  }

   /**
   * Exempt wages of this earning item.
   * @return earningsExemptWages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Exempt wages of this earning item.")

  public Double getEarningsExemptWages() {
    return earningsExemptWages;
  }


  public void setEarningsExemptWages(Double earningsExemptWages) {
    
    
    
    this.earningsExemptWages = earningsExemptWages;
  }


  public EmployeeEarningHistoryItem earningsExcessWages(Double earningsExcessWages) {
    
    
    
    
    this.earningsExcessWages = earningsExcessWages;
    return this;
  }

  public EmployeeEarningHistoryItem earningsExcessWages(Integer earningsExcessWages) {
    
    
    
    
    this.earningsExcessWages = earningsExcessWages.doubleValue();
    return this;
  }

   /**
   * Excess wages of this earning item.
   * @return earningsExcessWages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Excess wages of this earning item.")

  public Double getEarningsExcessWages() {
    return earningsExcessWages;
  }


  public void setEarningsExcessWages(Double earningsExcessWages) {
    
    
    
    this.earningsExcessWages = earningsExcessWages;
  }


  public EmployeeEarningHistoryItem totalWages(Double totalWages) {
    
    
    
    
    this.totalWages = totalWages;
    return this;
  }

  public EmployeeEarningHistoryItem totalWages(Integer totalWages) {
    
    
    
    
    this.totalWages = totalWages.doubleValue();
    return this;
  }

   /**
   * Total wages of this earning item.
   * @return totalWages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Total wages of this earning item.")

  public Double getTotalWages() {
    return totalWages;
  }


  public void setTotalWages(Double totalWages) {
    
    
    
    this.totalWages = totalWages;
  }


  public EmployeeEarningHistoryItem earningTotalNonMemoAmount(Double earningTotalNonMemoAmount) {
    
    
    
    
    this.earningTotalNonMemoAmount = earningTotalNonMemoAmount;
    return this;
  }

  public EmployeeEarningHistoryItem earningTotalNonMemoAmount(Integer earningTotalNonMemoAmount) {
    
    
    
    
    this.earningTotalNonMemoAmount = earningTotalNonMemoAmount.doubleValue();
    return this;
  }

   /**
   * Total non memo amount of this earning item.
   * @return earningTotalNonMemoAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50", value = "Total non memo amount of this earning item.")

  public Double getEarningTotalNonMemoAmount() {
    return earningTotalNonMemoAmount;
  }


  public void setEarningTotalNonMemoAmount(Double earningTotalNonMemoAmount) {
    
    
    
    this.earningTotalNonMemoAmount = earningTotalNonMemoAmount;
  }


  public EmployeeEarningHistoryItem earningTotalNonMemoHours(Double earningTotalNonMemoHours) {
    
    
    
    
    this.earningTotalNonMemoHours = earningTotalNonMemoHours;
    return this;
  }

  public EmployeeEarningHistoryItem earningTotalNonMemoHours(Integer earningTotalNonMemoHours) {
    
    
    
    
    this.earningTotalNonMemoHours = earningTotalNonMemoHours.doubleValue();
    return this;
  }

   /**
   * Total non memo hours of this earning item.
   * @return earningTotalNonMemoHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40", value = "Total non memo hours of this earning item.")

  public Double getEarningTotalNonMemoHours() {
    return earningTotalNonMemoHours;
  }


  public void setEarningTotalNonMemoHours(Double earningTotalNonMemoHours) {
    
    
    
    this.earningTotalNonMemoHours = earningTotalNonMemoHours;
  }


  public EmployeeEarningHistoryItem earningCode(String earningCode) {
    
    
    
    
    this.earningCode = earningCode;
    return this;
  }

   /**
   * Earning code of this item, assigned via LegalEntityEarning.
   * @return earningCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Reg", value = "Earning code of this item, assigned via LegalEntityEarning.")

  public String getEarningCode() {
    return earningCode;
  }


  public void setEarningCode(String earningCode) {
    
    
    
    this.earningCode = earningCode;
  }


  public EmployeeEarningHistoryItem earningDescription(String earningDescription) {
    
    
    
    
    this.earningDescription = earningDescription;
    return this;
  }

   /**
   * Earning description of this item, assigned by Legal Entity via LegalEntityEarning.
   * @return earningDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Regular", value = "Earning description of this item, assigned by Legal Entity via LegalEntityEarning.")

  public String getEarningDescription() {
    return earningDescription;
  }


  public void setEarningDescription(String earningDescription) {
    
    
    
    this.earningDescription = earningDescription;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeEarningHistoryItem instance itself
   */
  public EmployeeEarningHistoryItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeEarningHistoryItem employeeEarningHistoryItem = (EmployeeEarningHistoryItem) o;
    return Objects.equals(this.id, employeeEarningHistoryItem.id) &&
        Objects.equals(this.name, employeeEarningHistoryItem.name) &&
        Objects.equals(this.totalEarningAmount, employeeEarningHistoryItem.totalEarningAmount) &&
        Objects.equals(this.totalEarningHours, employeeEarningHistoryItem.totalEarningHours) &&
        Objects.equals(this.deductionAmount, employeeEarningHistoryItem.deductionAmount) &&
        Objects.equals(this.earningsTaxableAmount, employeeEarningHistoryItem.earningsTaxableAmount) &&
        Objects.equals(this.earningsTaxableWages, employeeEarningHistoryItem.earningsTaxableWages) &&
        Objects.equals(this.earningsExemptWages, employeeEarningHistoryItem.earningsExemptWages) &&
        Objects.equals(this.earningsExcessWages, employeeEarningHistoryItem.earningsExcessWages) &&
        Objects.equals(this.totalWages, employeeEarningHistoryItem.totalWages) &&
        Objects.equals(this.earningTotalNonMemoAmount, employeeEarningHistoryItem.earningTotalNonMemoAmount) &&
        Objects.equals(this.earningTotalNonMemoHours, employeeEarningHistoryItem.earningTotalNonMemoHours) &&
        Objects.equals(this.earningCode, employeeEarningHistoryItem.earningCode) &&
        Objects.equals(this.earningDescription, employeeEarningHistoryItem.earningDescription)&&
        Objects.equals(this.additionalProperties, employeeEarningHistoryItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, totalEarningAmount, totalEarningHours, deductionAmount, earningsTaxableAmount, earningsTaxableWages, earningsExemptWages, earningsExcessWages, totalWages, earningTotalNonMemoAmount, earningTotalNonMemoHours, earningCode, earningDescription, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeEarningHistoryItem {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    totalEarningAmount: ").append(toIndentedString(totalEarningAmount)).append("\n");
    sb.append("    totalEarningHours: ").append(toIndentedString(totalEarningHours)).append("\n");
    sb.append("    deductionAmount: ").append(toIndentedString(deductionAmount)).append("\n");
    sb.append("    earningsTaxableAmount: ").append(toIndentedString(earningsTaxableAmount)).append("\n");
    sb.append("    earningsTaxableWages: ").append(toIndentedString(earningsTaxableWages)).append("\n");
    sb.append("    earningsExemptWages: ").append(toIndentedString(earningsExemptWages)).append("\n");
    sb.append("    earningsExcessWages: ").append(toIndentedString(earningsExcessWages)).append("\n");
    sb.append("    totalWages: ").append(toIndentedString(totalWages)).append("\n");
    sb.append("    earningTotalNonMemoAmount: ").append(toIndentedString(earningTotalNonMemoAmount)).append("\n");
    sb.append("    earningTotalNonMemoHours: ").append(toIndentedString(earningTotalNonMemoHours)).append("\n");
    sb.append("    earningCode: ").append(toIndentedString(earningCode)).append("\n");
    sb.append("    earningDescription: ").append(toIndentedString(earningDescription)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("TotalEarningAmount");
    openapiFields.add("TotalEarningHours");
    openapiFields.add("DeductionAmount");
    openapiFields.add("EarningsTaxableAmount");
    openapiFields.add("EarningsTaxableWages");
    openapiFields.add("EarningsExemptWages");
    openapiFields.add("EarningsExcessWages");
    openapiFields.add("TotalWages");
    openapiFields.add("EarningTotalNonMemoAmount");
    openapiFields.add("EarningTotalNonMemoHours");
    openapiFields.add("EarningCode");
    openapiFields.add("EarningDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeEarningHistoryItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeEarningHistoryItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeEarningHistoryItem is not found in the empty JSON string", EmployeeEarningHistoryItem.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("Name").isJsonNull() && (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("EarningCode").isJsonNull() && (jsonObj.get("EarningCode") != null && !jsonObj.get("EarningCode").isJsonNull()) && !jsonObj.get("EarningCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EarningCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EarningCode").toString()));
      }
      if (!jsonObj.get("EarningDescription").isJsonNull() && (jsonObj.get("EarningDescription") != null && !jsonObj.get("EarningDescription").isJsonNull()) && !jsonObj.get("EarningDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EarningDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EarningDescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeEarningHistoryItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeEarningHistoryItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeEarningHistoryItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeEarningHistoryItem.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeEarningHistoryItem>() {
           @Override
           public void write(JsonWriter out, EmployeeEarningHistoryItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeEarningHistoryItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeEarningHistoryItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeEarningHistoryItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeEarningHistoryItem
  * @throws IOException if the JSON string is invalid with respect to EmployeeEarningHistoryItem
  */
  public static EmployeeEarningHistoryItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeEarningHistoryItem.class);
  }

 /**
  * Convert an instance of EmployeeEarningHistoryItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

