/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DisabilityStatus;
import com.konfigthis.client.model.EthnicityType;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.VeteranStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SimpleHire
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SimpleHire {
  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "LegalEntityId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Integer legalEntityId;

  public static final String SERIALIZED_NAME_EXPORTED_BY_EMAIL_ADDRESS = "ExportedByEmailAddress";
  @SerializedName(SERIALIZED_NAME_EXPORTED_BY_EMAIL_ADDRESS)
  private String exportedByEmailAddress;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PREFERRED_NAME = "PreferredName";
  @SerializedName(SERIALIZED_NAME_PREFERRED_NAME)
  private String preferredName;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "CountryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_ZIP = "Zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_CITY = "City";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "Address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_MOBILE_PHONE = "MobilePhone";
  @SerializedName(SERIALIZED_NAME_MOBILE_PHONE)
  private String mobilePhone;

  public static final String SERIALIZED_NAME_HOME_PHONE = "HomePhone";
  @SerializedName(SERIALIZED_NAME_HOME_PHONE)
  private String homePhone;

  public static final String SERIALIZED_NAME_HOME_EMAIL_ADDRESS = "HomeEmailAddress";
  @SerializedName(SERIALIZED_NAME_HOME_EMAIL_ADDRESS)
  private String homeEmailAddress;

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Gender gender;

  public static final String SERIALIZED_NAME_ETHNICITY = "Ethnicity";
  @SerializedName(SERIALIZED_NAME_ETHNICITY)
  private EthnicityType ethnicity;

  public static final String SERIALIZED_NAME_VETERAN_STATUS = "VeteranStatus";
  @SerializedName(SERIALIZED_NAME_VETERAN_STATUS)
  private VeteranStatus veteranStatus;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_JOB_TITLE = "JobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_DEPARTMENT_CODE = "DepartmentCode";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_CODE)
  private String departmentCode;

  public static final String SERIALIZED_NAME_DISABILITY = "Disability";
  @SerializedName(SERIALIZED_NAME_DISABILITY)
  private DisabilityStatus disability;

  public static final String SERIALIZED_NAME_BASE_SALARY = "BaseSalary";
  @SerializedName(SERIALIZED_NAME_BASE_SALARY)
  private Double baseSalary;

  public static final String SERIALIZED_NAME_SALARY_FREQUENCY = "SalaryFrequency";
  @SerializedName(SERIALIZED_NAME_SALARY_FREQUENCY)
  private String salaryFrequency;

  public static final String SERIALIZED_NAME_WORK_LOCATION_ID = "WorkLocationId";
  @SerializedName(SERIALIZED_NAME_WORK_LOCATION_ID)
  private String workLocationId;

  public SimpleHire() {
  }

  public SimpleHire legalEntityId(Integer legalEntityId) {
    
    
    
    
    this.legalEntityId = legalEntityId;
    return this;
  }

   /**
   * Legal Entity Id
   * @return legalEntityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "122900", required = true, value = "Legal Entity Id")

  public Integer getLegalEntityId() {
    return legalEntityId;
  }


  public void setLegalEntityId(Integer legalEntityId) {
    
    
    
    this.legalEntityId = legalEntityId;
  }


  public SimpleHire exportedByEmailAddress(String exportedByEmailAddress) {
    
    
    
    
    this.exportedByEmailAddress = exportedByEmailAddress;
    return this;
  }

   /**
   * Email of the user exporting records
   * @return exportedByEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "email@domain.com", value = "Email of the user exporting records")

  public String getExportedByEmailAddress() {
    return exportedByEmailAddress;
  }


  public void setExportedByEmailAddress(String exportedByEmailAddress) {
    
    
    
    this.exportedByEmailAddress = exportedByEmailAddress;
  }


  public SimpleHire firstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
    }
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the person. 
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Edwin", required = true, value = "First name of the person. ")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
    }
    this.firstName = firstName;
  }


  public SimpleHire lastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
    }
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the person.
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Hubble", required = true, value = "Last name of the person.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
    }
    this.lastName = lastName;
  }


  public SimpleHire preferredName(String preferredName) {
    
    
    
    
    this.preferredName = preferredName;
    return this;
  }

   /**
   * Preferred Name of the Person             
   * @return preferredName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Carroll", value = "Preferred Name of the Person             ")

  public String getPreferredName() {
    return preferredName;
  }


  public void setPreferredName(String preferredName) {
    
    
    
    this.preferredName = preferredName;
  }


  public SimpleHire countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country in the address.             
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USA", value = "Country in the address.             ")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public SimpleHire zip(String zip) {
    
    
    
    
    this.zip = zip;
    return this;
  }

   /**
   * Zip code in the address.             
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "45212", value = "Zip code in the address.             ")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    
    this.zip = zip;
  }


  public SimpleHire state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * State in the address.             
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OH", value = "State in the address.             ")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public SimpleHire city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City in the address.             
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Cincinnati", value = "City in the address.             ")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public SimpleHire address1(String address1) {
    
    
    
    
    this.address1 = address1;
    return this;
  }

   /**
   * First line of street address information.             
   * @return address1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4811 Montgomery Road", value = "First line of street address information.             ")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    
    this.address1 = address1;
  }


  public SimpleHire address2(String address2) {
    
    
    
    
    this.address2 = address2;
    return this;
  }

   /**
   * Additional line of street address information.             
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Building A", value = "Additional line of street address information.             ")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    
    this.address2 = address2;
  }


  public SimpleHire mobilePhone(String mobilePhone) {
    
    
    
    
    this.mobilePhone = mobilePhone;
    return this;
  }

   /**
   * Mobile phone number. 
   * @return mobilePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "(123) 456–7890", value = "Mobile phone number. ")

  public String getMobilePhone() {
    return mobilePhone;
  }


  public void setMobilePhone(String mobilePhone) {
    
    
    
    this.mobilePhone = mobilePhone;
  }


  public SimpleHire homePhone(String homePhone) {
    
    
    
    
    this.homePhone = homePhone;
    return this;
  }

   /**
   * Home phone number. 
   * @return homePhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "(123) 456–7890", value = "Home phone number. ")

  public String getHomePhone() {
    return homePhone;
  }


  public void setHomePhone(String homePhone) {
    
    
    
    this.homePhone = homePhone;
  }


  public SimpleHire homeEmailAddress(String homeEmailAddress) {
    
    
    if (homeEmailAddress != null && homeEmailAddress.length() < 1) {
      throw new IllegalArgumentException("Invalid value for homeEmailAddress. Length must be greater than or equal to 1.");
    }
    
    this.homeEmailAddress = homeEmailAddress;
    return this;
  }

   /**
   * Email Information of the person.             
   * @return homeEmailAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "homeEmail@domain.com", required = true, value = "Email Information of the person.             ")

  public String getHomeEmailAddress() {
    return homeEmailAddress;
  }


  public void setHomeEmailAddress(String homeEmailAddress) {
    
    
    if (homeEmailAddress != null && homeEmailAddress.length() < 1) {
      throw new IllegalArgumentException("Invalid value for homeEmailAddress. Length must be greater than or equal to 1.");
    }
    this.homeEmailAddress = homeEmailAddress;
  }


  public SimpleHire gender(Gender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Gender getGender() {
    return gender;
  }


  public void setGender(Gender gender) {
    
    
    
    this.gender = gender;
  }


  public SimpleHire ethnicity(EthnicityType ethnicity) {
    
    
    
    
    this.ethnicity = ethnicity;
    return this;
  }

   /**
   * Get ethnicity
   * @return ethnicity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EthnicityType getEthnicity() {
    return ethnicity;
  }


  public void setEthnicity(EthnicityType ethnicity) {
    
    
    
    this.ethnicity = ethnicity;
  }


  public SimpleHire veteranStatus(VeteranStatus veteranStatus) {
    
    
    
    
    this.veteranStatus = veteranStatus;
    return this;
  }

   /**
   * Get veteranStatus
   * @return veteranStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VeteranStatus getVeteranStatus() {
    return veteranStatus;
  }


  public void setVeteranStatus(VeteranStatus veteranStatus) {
    
    
    
    this.veteranStatus = veteranStatus;
  }


  public SimpleHire startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Date the employement start. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-11-01T00:00Z", value = "Date the employement start. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              ")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public SimpleHire jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Name of the Job Title to associate with new hire.             
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Software Engineer", value = "Name of the Job Title to associate with new hire.             ")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public SimpleHire departmentCode(String departmentCode) {
    
    
    
    
    this.departmentCode = departmentCode;
    return this;
  }

   /**
   * Code of the department in Paycor&#39;s system.  Can be retrieved by calling &#39;Get Legal Entity Departments by Legal Entity ID&#39;
   * @return departmentCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "80", value = "Code of the department in Paycor's system.  Can be retrieved by calling 'Get Legal Entity Departments by Legal Entity ID'")

  public String getDepartmentCode() {
    return departmentCode;
  }


  public void setDepartmentCode(String departmentCode) {
    
    
    
    this.departmentCode = departmentCode;
  }


  public SimpleHire disability(DisabilityStatus disability) {
    
    
    
    
    this.disability = disability;
    return this;
  }

   /**
   * Get disability
   * @return disability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DisabilityStatus getDisability() {
    return disability;
  }


  public void setDisability(DisabilityStatus disability) {
    
    
    
    this.disability = disability;
  }


  public SimpleHire baseSalary(Double baseSalary) {
    
    
    
    
    this.baseSalary = baseSalary;
    return this;
  }

  public SimpleHire baseSalary(Integer baseSalary) {
    
    
    
    
    this.baseSalary = baseSalary.doubleValue();
    return this;
  }

   /**
   * Base Salary of new hire employee
   * @return baseSalary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10000", value = "Base Salary of new hire employee")

  public Double getBaseSalary() {
    return baseSalary;
  }


  public void setBaseSalary(Double baseSalary) {
    
    
    
    this.baseSalary = baseSalary;
  }


  public SimpleHire salaryFrequency(String salaryFrequency) {
    
    
    
    
    this.salaryFrequency = salaryFrequency;
    return this;
  }

   /**
   * Salary Frequency of new hire employee
   * @return salaryFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Bi-Weekly", value = "Salary Frequency of new hire employee")

  public String getSalaryFrequency() {
    return salaryFrequency;
  }


  public void setSalaryFrequency(String salaryFrequency) {
    
    
    
    this.salaryFrequency = salaryFrequency;
  }


  public SimpleHire workLocationId(String workLocationId) {
    
    
    
    
    this.workLocationId = workLocationId;
    return this;
  }

   /**
   * Worklocation Id of new hire employee
   * @return workLocationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dc069074-24b2-0000-0000-000014e00100", value = "Worklocation Id of new hire employee")

  public String getWorkLocationId() {
    return workLocationId;
  }


  public void setWorkLocationId(String workLocationId) {
    
    
    
    this.workLocationId = workLocationId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SimpleHire instance itself
   */
  public SimpleHire putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleHire simpleHire = (SimpleHire) o;
    return Objects.equals(this.legalEntityId, simpleHire.legalEntityId) &&
        Objects.equals(this.exportedByEmailAddress, simpleHire.exportedByEmailAddress) &&
        Objects.equals(this.firstName, simpleHire.firstName) &&
        Objects.equals(this.lastName, simpleHire.lastName) &&
        Objects.equals(this.preferredName, simpleHire.preferredName) &&
        Objects.equals(this.countryCode, simpleHire.countryCode) &&
        Objects.equals(this.zip, simpleHire.zip) &&
        Objects.equals(this.state, simpleHire.state) &&
        Objects.equals(this.city, simpleHire.city) &&
        Objects.equals(this.address1, simpleHire.address1) &&
        Objects.equals(this.address2, simpleHire.address2) &&
        Objects.equals(this.mobilePhone, simpleHire.mobilePhone) &&
        Objects.equals(this.homePhone, simpleHire.homePhone) &&
        Objects.equals(this.homeEmailAddress, simpleHire.homeEmailAddress) &&
        Objects.equals(this.gender, simpleHire.gender) &&
        Objects.equals(this.ethnicity, simpleHire.ethnicity) &&
        Objects.equals(this.veteranStatus, simpleHire.veteranStatus) &&
        Objects.equals(this.startDate, simpleHire.startDate) &&
        Objects.equals(this.jobTitle, simpleHire.jobTitle) &&
        Objects.equals(this.departmentCode, simpleHire.departmentCode) &&
        Objects.equals(this.disability, simpleHire.disability) &&
        Objects.equals(this.baseSalary, simpleHire.baseSalary) &&
        Objects.equals(this.salaryFrequency, simpleHire.salaryFrequency) &&
        Objects.equals(this.workLocationId, simpleHire.workLocationId)&&
        Objects.equals(this.additionalProperties, simpleHire.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(legalEntityId, exportedByEmailAddress, firstName, lastName, preferredName, countryCode, zip, state, city, address1, address2, mobilePhone, homePhone, homeEmailAddress, gender, ethnicity, veteranStatus, startDate, jobTitle, departmentCode, disability, baseSalary, salaryFrequency, workLocationId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleHire {\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    exportedByEmailAddress: ").append(toIndentedString(exportedByEmailAddress)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    preferredName: ").append(toIndentedString(preferredName)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    mobilePhone: ").append(toIndentedString(mobilePhone)).append("\n");
    sb.append("    homePhone: ").append(toIndentedString(homePhone)).append("\n");
    sb.append("    homeEmailAddress: ").append(toIndentedString(homeEmailAddress)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    ethnicity: ").append(toIndentedString(ethnicity)).append("\n");
    sb.append("    veteranStatus: ").append(toIndentedString(veteranStatus)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    departmentCode: ").append(toIndentedString(departmentCode)).append("\n");
    sb.append("    disability: ").append(toIndentedString(disability)).append("\n");
    sb.append("    baseSalary: ").append(toIndentedString(baseSalary)).append("\n");
    sb.append("    salaryFrequency: ").append(toIndentedString(salaryFrequency)).append("\n");
    sb.append("    workLocationId: ").append(toIndentedString(workLocationId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LegalEntityId");
    openapiFields.add("ExportedByEmailAddress");
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("PreferredName");
    openapiFields.add("CountryCode");
    openapiFields.add("Zip");
    openapiFields.add("State");
    openapiFields.add("City");
    openapiFields.add("Address1");
    openapiFields.add("Address2");
    openapiFields.add("MobilePhone");
    openapiFields.add("HomePhone");
    openapiFields.add("HomeEmailAddress");
    openapiFields.add("Gender");
    openapiFields.add("Ethnicity");
    openapiFields.add("VeteranStatus");
    openapiFields.add("StartDate");
    openapiFields.add("JobTitle");
    openapiFields.add("DepartmentCode");
    openapiFields.add("Disability");
    openapiFields.add("BaseSalary");
    openapiFields.add("SalaryFrequency");
    openapiFields.add("WorkLocationId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LegalEntityId");
    openapiRequiredFields.add("FirstName");
    openapiRequiredFields.add("LastName");
    openapiRequiredFields.add("HomeEmailAddress");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimpleHire
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SimpleHire.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimpleHire is not found in the empty JSON string", SimpleHire.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SimpleHire.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("ExportedByEmailAddress").isJsonNull() && (jsonObj.get("ExportedByEmailAddress") != null && !jsonObj.get("ExportedByEmailAddress").isJsonNull()) && !jsonObj.get("ExportedByEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExportedByEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExportedByEmailAddress").toString()));
      }
      if (!jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if (!jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if (!jsonObj.get("PreferredName").isJsonNull() && (jsonObj.get("PreferredName") != null && !jsonObj.get("PreferredName").isJsonNull()) && !jsonObj.get("PreferredName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PreferredName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PreferredName").toString()));
      }
      if (!jsonObj.get("CountryCode").isJsonNull() && (jsonObj.get("CountryCode") != null && !jsonObj.get("CountryCode").isJsonNull()) && !jsonObj.get("CountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountryCode").toString()));
      }
      if (!jsonObj.get("Zip").isJsonNull() && (jsonObj.get("Zip") != null && !jsonObj.get("Zip").isJsonNull()) && !jsonObj.get("Zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Zip").toString()));
      }
      if (!jsonObj.get("State").isJsonNull() && (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      if (!jsonObj.get("City").isJsonNull() && (jsonObj.get("City") != null && !jsonObj.get("City").isJsonNull()) && !jsonObj.get("City").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `City` to be a primitive type in the JSON string but got `%s`", jsonObj.get("City").toString()));
      }
      if (!jsonObj.get("Address1").isJsonNull() && (jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) && !jsonObj.get("Address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address1").toString()));
      }
      if (!jsonObj.get("Address2").isJsonNull() && (jsonObj.get("Address2") != null && !jsonObj.get("Address2").isJsonNull()) && !jsonObj.get("Address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address2").toString()));
      }
      if (!jsonObj.get("MobilePhone").isJsonNull() && (jsonObj.get("MobilePhone") != null && !jsonObj.get("MobilePhone").isJsonNull()) && !jsonObj.get("MobilePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MobilePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MobilePhone").toString()));
      }
      if (!jsonObj.get("HomePhone").isJsonNull() && (jsonObj.get("HomePhone") != null && !jsonObj.get("HomePhone").isJsonNull()) && !jsonObj.get("HomePhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomePhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomePhone").toString()));
      }
      if (!jsonObj.get("HomeEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeEmailAddress").toString()));
      }
      if (!jsonObj.get("JobTitle").isJsonNull() && (jsonObj.get("JobTitle") != null && !jsonObj.get("JobTitle").isJsonNull()) && !jsonObj.get("JobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobTitle").toString()));
      }
      if (!jsonObj.get("DepartmentCode").isJsonNull() && (jsonObj.get("DepartmentCode") != null && !jsonObj.get("DepartmentCode").isJsonNull()) && !jsonObj.get("DepartmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DepartmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DepartmentCode").toString()));
      }
      if (!jsonObj.get("SalaryFrequency").isJsonNull() && (jsonObj.get("SalaryFrequency") != null && !jsonObj.get("SalaryFrequency").isJsonNull()) && !jsonObj.get("SalaryFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SalaryFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SalaryFrequency").toString()));
      }
      if (!jsonObj.get("WorkLocationId").isJsonNull() && (jsonObj.get("WorkLocationId") != null && !jsonObj.get("WorkLocationId").isJsonNull()) && !jsonObj.get("WorkLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkLocationId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimpleHire.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimpleHire' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimpleHire> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimpleHire.class));

       return (TypeAdapter<T>) new TypeAdapter<SimpleHire>() {
           @Override
           public void write(JsonWriter out, SimpleHire value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SimpleHire read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SimpleHire instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimpleHire given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimpleHire
  * @throws IOException if the JSON string is invalid with respect to SimpleHire
  */
  public static SimpleHire fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimpleHire.class);
  }

 /**
  * Convert an instance of SimpleHire to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

