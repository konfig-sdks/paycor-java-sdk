/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeeExemptions;
import com.konfigthis.client.model.EmployeeTaxCredit;
import com.konfigthis.client.model.FilingStatus2;
import com.konfigthis.client.model.ReciprocityType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The Employee Tax model represents Employee level Tax information.
 */
@ApiModel(description = "The Employee Tax model represents Employee level Tax information.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeTax3 {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_TAX_ID = "LegalEntityTaxId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_TAX_ID)
  private String legalEntityTaxId;

  public static final String SERIALIZED_NAME_RECIPROCITY_TYPE = "ReciprocityType";
  @SerializedName(SERIALIZED_NAME_RECIPROCITY_TYPE)
  private ReciprocityType reciprocityType;

  public static final String SERIALIZED_NAME_FILING_STATUS = "FilingStatus";
  @SerializedName(SERIALIZED_NAME_FILING_STATUS)
  private FilingStatus2 filingStatus;

  public static final String SERIALIZED_NAME_WITHHOLDING_EFFECTIVE_START_DATE = "WithholdingEffectiveStartDate";
  @SerializedName(SERIALIZED_NAME_WITHHOLDING_EFFECTIVE_START_DATE)
  private OffsetDateTime withholdingEffectiveStartDate;

  public static final String SERIALIZED_NAME_BLOCK_DATE = "BlockDate";
  @SerializedName(SERIALIZED_NAME_BLOCK_DATE)
  private OffsetDateTime blockDate;

  public static final String SERIALIZED_NAME_NON_RESIDENT_ALIEN = "NonResidentAlien";
  @SerializedName(SERIALIZED_NAME_NON_RESIDENT_ALIEN)
  private String nonResidentAlien;

  public static final String SERIALIZED_NAME_IS_PROBATIONARY_EMPLOYEE = "IsProbationaryEmployee";
  @SerializedName(SERIALIZED_NAME_IS_PROBATIONARY_EMPLOYEE)
  private Boolean isProbationaryEmployee;

  public static final String SERIALIZED_NAME_OCCUPATIONAL_CODE = "OccupationalCode";
  @SerializedName(SERIALIZED_NAME_OCCUPATIONAL_CODE)
  private String occupationalCode;

  public static final String SERIALIZED_NAME_GEOGRAPHIC_CODE = "GeographicCode";
  @SerializedName(SERIALIZED_NAME_GEOGRAPHIC_CODE)
  private String geographicCode;

  public static final String SERIALIZED_NAME_SO_C_CODE = "SOCCode";
  @SerializedName(SERIALIZED_NAME_SO_C_CODE)
  private String soCCode;

  public static final String SERIALIZED_NAME_SEASONAL_CODE = "SeasonalCode";
  @SerializedName(SERIALIZED_NAME_SEASONAL_CODE)
  private String seasonalCode;

  public static final String SERIALIZED_NAME_COUNTY_CODE = "CountyCode";
  @SerializedName(SERIALIZED_NAME_COUNTY_CODE)
  private String countyCode;

  public static final String SERIALIZED_NAME_SPOUSE_WORK = "SpouseWork";
  @SerializedName(SERIALIZED_NAME_SPOUSE_WORK)
  private String spouseWork;

  public static final String SERIALIZED_NAME_DEPENDENT_INSURANCE_ELIGIBLE = "DependentInsuranceEligible";
  @SerializedName(SERIALIZED_NAME_DEPENDENT_INSURANCE_ELIGIBLE)
  private String dependentInsuranceEligible;

  public static final String SERIALIZED_NAME_DEPENDENT_INSURANCE_ELIGIBLE_DATE = "DependentInsuranceEligibleDate";
  @SerializedName(SERIALIZED_NAME_DEPENDENT_INSURANCE_ELIGIBLE_DATE)
  private OffsetDateTime dependentInsuranceEligibleDate;

  public static final String SERIALIZED_NAME_APPLICABLE_BIRTHYEAR = "ApplicableBirthyear";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_BIRTHYEAR)
  private Integer applicableBirthyear;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_PERCENTAGE = "Percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private Double percentage;

  public static final String SERIALIZED_NAME_NC_C_I_CODE = "NCCICode";
  @SerializedName(SERIALIZED_NAME_NC_C_I_CODE)
  private String ncCICode;

  public static final String SERIALIZED_NAME_PSD_CODE = "PsdCode";
  @SerializedName(SERIALIZED_NAME_PSD_CODE)
  private String psdCode;

  public static final String SERIALIZED_NAME_PSD_RATE = "PsdRate";
  @SerializedName(SERIALIZED_NAME_PSD_RATE)
  private Double psdRate;

  public static final String SERIALIZED_NAME_ON_HOLD = "OnHold";
  @SerializedName(SERIALIZED_NAME_ON_HOLD)
  private Boolean onHold;

  public static final String SERIALIZED_NAME_EXEMPTIONS = "Exemptions";
  @SerializedName(SERIALIZED_NAME_EXEMPTIONS)
  private EmployeeExemptions exemptions;

  public static final String SERIALIZED_NAME_TAX_CREDIT = "TaxCredit";
  @SerializedName(SERIALIZED_NAME_TAX_CREDIT)
  private EmployeeTaxCredit taxCredit;

  public EmployeeTax3() {
  }

  public EmployeeTax3 id(String id) {
    
    
    if (id != null && id.length() < 1) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
    }
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the employee tax in Paycor&#39;s system. Generated by Paycor.
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "a5713n92-196c-0000-0000-0007d5268Sa2", required = true, value = "Unique identifier of the employee tax in Paycor's system. Generated by Paycor.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    if (id != null && id.length() < 1) {
      throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
    }
    this.id = id;
  }


  public EmployeeTax3 legalEntityTaxId(String legalEntityTaxId) {
    
    
    if (legalEntityTaxId != null && legalEntityTaxId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for legalEntityTaxId. Length must be greater than or equal to 1.");
    }
    
    this.legalEntityTaxId = legalEntityTaxId;
    return this;
  }

   /**
   * Unique identifier of the legal entity tax in Paycor&#39;s system. Generated by Paycor.
   * @return legalEntityTaxId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "b55a9eba-1007-0000-0000-000040e20100", required = true, value = "Unique identifier of the legal entity tax in Paycor's system. Generated by Paycor.")

  public String getLegalEntityTaxId() {
    return legalEntityTaxId;
  }


  public void setLegalEntityTaxId(String legalEntityTaxId) {
    
    
    if (legalEntityTaxId != null && legalEntityTaxId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for legalEntityTaxId. Length must be greater than or equal to 1.");
    }
    this.legalEntityTaxId = legalEntityTaxId;
  }


  public EmployeeTax3 reciprocityType(ReciprocityType reciprocityType) {
    
    
    
    
    this.reciprocityType = reciprocityType;
    return this;
  }

   /**
   * Get reciprocityType
   * @return reciprocityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReciprocityType getReciprocityType() {
    return reciprocityType;
  }


  public void setReciprocityType(ReciprocityType reciprocityType) {
    
    
    
    this.reciprocityType = reciprocityType;
  }


  public EmployeeTax3 filingStatus(FilingStatus2 filingStatus) {
    
    
    
    
    this.filingStatus = filingStatus;
    return this;
  }

   /**
   * Get filingStatus
   * @return filingStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FilingStatus2 getFilingStatus() {
    return filingStatus;
  }


  public void setFilingStatus(FilingStatus2 filingStatus) {
    
    
    
    this.filingStatus = filingStatus;
  }


  public EmployeeTax3 withholdingEffectiveStartDate(OffsetDateTime withholdingEffectiveStartDate) {
    
    
    
    
    this.withholdingEffectiveStartDate = withholdingEffectiveStartDate;
    return this;
  }

   /**
   * Effective start date of withholding
   * @return withholdingEffectiveStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Effective start date of withholding")

  public OffsetDateTime getWithholdingEffectiveStartDate() {
    return withholdingEffectiveStartDate;
  }


  public void setWithholdingEffectiveStartDate(OffsetDateTime withholdingEffectiveStartDate) {
    
    
    
    this.withholdingEffectiveStartDate = withholdingEffectiveStartDate;
  }


  public EmployeeTax3 blockDate(OffsetDateTime blockDate) {
    
    
    
    
    this.blockDate = blockDate;
    return this;
  }

   /**
   * Withholding block date
   * @return blockDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Withholding block date")

  public OffsetDateTime getBlockDate() {
    return blockDate;
  }


  public void setBlockDate(OffsetDateTime blockDate) {
    
    
    
    this.blockDate = blockDate;
  }


  public EmployeeTax3 nonResidentAlien(String nonResidentAlien) {
    
    
    
    
    this.nonResidentAlien = nonResidentAlien;
    return this;
  }

   /**
   * Specifies whether an employee is NonResidentAlien
   * @return nonResidentAlien
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies whether an employee is NonResidentAlien")

  public String getNonResidentAlien() {
    return nonResidentAlien;
  }


  public void setNonResidentAlien(String nonResidentAlien) {
    
    
    
    this.nonResidentAlien = nonResidentAlien;
  }


  public EmployeeTax3 isProbationaryEmployee(Boolean isProbationaryEmployee) {
    
    
    
    
    this.isProbationaryEmployee = isProbationaryEmployee;
    return this;
  }

   /**
   * Specifies whether an employee is a probationary employee
   * @return isProbationaryEmployee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies whether an employee is a probationary employee")

  public Boolean getIsProbationaryEmployee() {
    return isProbationaryEmployee;
  }


  public void setIsProbationaryEmployee(Boolean isProbationaryEmployee) {
    
    
    
    this.isProbationaryEmployee = isProbationaryEmployee;
  }


  public EmployeeTax3 occupationalCode(String occupationalCode) {
    
    
    
    
    this.occupationalCode = occupationalCode;
    return this;
  }

   /**
   * Occupational code
   * @return occupationalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12", value = "Occupational code")

  public String getOccupationalCode() {
    return occupationalCode;
  }


  public void setOccupationalCode(String occupationalCode) {
    
    
    
    this.occupationalCode = occupationalCode;
  }


  public EmployeeTax3 geographicCode(String geographicCode) {
    
    
    
    
    this.geographicCode = geographicCode;
    return this;
  }

   /**
   * Geographic code Required only for UNEAK tax
   * @return geographicCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11-1011", value = "Geographic code Required only for UNEAK tax")

  public String getGeographicCode() {
    return geographicCode;
  }


  public void setGeographicCode(String geographicCode) {
    
    
    
    this.geographicCode = geographicCode;
  }


  public EmployeeTax3 soCCode(String soCCode) {
    
    
    
    
    this.soCCode = soCCode;
    return this;
  }

   /**
   * Standard occupational classification Code
   * @return soCCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11-1012", value = "Standard occupational classification Code")

  public String getSoCCode() {
    return soCCode;
  }


  public void setSoCCode(String soCCode) {
    
    
    
    this.soCCode = soCCode;
  }


  public EmployeeTax3 seasonalCode(String seasonalCode) {
    
    
    
    
    this.seasonalCode = seasonalCode;
    return this;
  }

   /**
   * Seasonal Code 
   * @return seasonalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "14", value = "Seasonal Code ")

  public String getSeasonalCode() {
    return seasonalCode;
  }


  public void setSeasonalCode(String seasonalCode) {
    
    
    
    this.seasonalCode = seasonalCode;
  }


  public EmployeeTax3 countyCode(String countyCode) {
    
    
    
    
    this.countyCode = countyCode;
    return this;
  }

   /**
   * County Code
   * @return countyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "124", value = "County Code")

  public String getCountyCode() {
    return countyCode;
  }


  public void setCountyCode(String countyCode) {
    
    
    
    this.countyCode = countyCode;
  }


  public EmployeeTax3 spouseWork(String spouseWork) {
    
    
    
    
    this.spouseWork = spouseWork;
    return this;
  }

   /**
   * Specifies  whether an employee&#39;s spouse is employed
   * @return spouseWork
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes/True", value = "Specifies  whether an employee's spouse is employed")

  public String getSpouseWork() {
    return spouseWork;
  }


  public void setSpouseWork(String spouseWork) {
    
    
    
    this.spouseWork = spouseWork;
  }


  public EmployeeTax3 dependentInsuranceEligible(String dependentInsuranceEligible) {
    
    
    
    
    this.dependentInsuranceEligible = dependentInsuranceEligible;
    return this;
  }

   /**
   * Dependent insurance eligibility status
   * @return dependentInsuranceEligible
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Yes/True", value = "Dependent insurance eligibility status")

  public String getDependentInsuranceEligible() {
    return dependentInsuranceEligible;
  }


  public void setDependentInsuranceEligible(String dependentInsuranceEligible) {
    
    
    
    this.dependentInsuranceEligible = dependentInsuranceEligible;
  }


  public EmployeeTax3 dependentInsuranceEligibleDate(OffsetDateTime dependentInsuranceEligibleDate) {
    
    
    
    
    this.dependentInsuranceEligibleDate = dependentInsuranceEligibleDate;
    return this;
  }

   /**
   * Dependent insurance eligibility date
   * @return dependentInsuranceEligibleDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dependent insurance eligibility date")

  public OffsetDateTime getDependentInsuranceEligibleDate() {
    return dependentInsuranceEligibleDate;
  }


  public void setDependentInsuranceEligibleDate(OffsetDateTime dependentInsuranceEligibleDate) {
    
    
    
    this.dependentInsuranceEligibleDate = dependentInsuranceEligibleDate;
  }


  public EmployeeTax3 applicableBirthyear(Integer applicableBirthyear) {
    
    
    
    
    this.applicableBirthyear = applicableBirthyear;
    return this;
  }

   /**
   * Birth year
   * @return applicableBirthyear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1980", value = "Birth year")

  public Integer getApplicableBirthyear() {
    return applicableBirthyear;
  }


  public void setApplicableBirthyear(Integer applicableBirthyear) {
    
    
    
    this.applicableBirthyear = applicableBirthyear;
  }


  public EmployeeTax3 amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public EmployeeTax3 amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * Fixed, recurring deduction dollar amount.             
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3141.59", value = "Fixed, recurring deduction dollar amount.             ")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public EmployeeTax3 percentage(Double percentage) {
    
    
    
    
    this.percentage = percentage;
    return this;
  }

  public EmployeeTax3 percentage(Integer percentage) {
    
    
    
    
    this.percentage = percentage.doubleValue();
    return this;
  }

   /**
   * Percentage value used in tax calculation. 
   * @return percentage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.2", value = "Percentage value used in tax calculation. ")

  public Double getPercentage() {
    return percentage;
  }


  public void setPercentage(Double percentage) {
    
    
    
    this.percentage = percentage;
  }


  public EmployeeTax3 ncCICode(String ncCICode) {
    
    
    
    
    this.ncCICode = ncCICode;
    return this;
  }

   /**
   * National Council on Compensation Insurance (NCCI) Code 
   * @return ncCICode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2004", value = "National Council on Compensation Insurance (NCCI) Code ")

  public String getNcCICode() {
    return ncCICode;
  }


  public void setNcCICode(String ncCICode) {
    
    
    
    this.ncCICode = ncCICode;
  }


  public EmployeeTax3 psdCode(String psdCode) {
    
    
    
    
    this.psdCode = psdCode;
    return this;
  }

   /**
   * PA Residence PSD code- political subdivision code
   * @return psdCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "101001", value = "PA Residence PSD code- political subdivision code")

  public String getPsdCode() {
    return psdCode;
  }


  public void setPsdCode(String psdCode) {
    
    
    
    this.psdCode = psdCode;
  }


  public EmployeeTax3 psdRate(Double psdRate) {
    
    
    
    
    this.psdRate = psdRate;
    return this;
  }

  public EmployeeTax3 psdRate(Integer psdRate) {
    
    
    
    
    this.psdRate = psdRate.doubleValue();
    return this;
  }

   /**
   * PA Residence PSD rate
   * @return psdRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.123", value = "PA Residence PSD rate")

  public Double getPsdRate() {
    return psdRate;
  }


  public void setPsdRate(Double psdRate) {
    
    
    
    this.psdRate = psdRate;
  }


  public EmployeeTax3 onHold(Boolean onHold) {
    
    
    
    
    this.onHold = onHold;
    return this;
  }

   /**
   * Whether employee tax should appear on paychecks.             
   * @return onHold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether employee tax should appear on paychecks.             ")

  public Boolean getOnHold() {
    return onHold;
  }


  public void setOnHold(Boolean onHold) {
    
    
    
    this.onHold = onHold;
  }


  public EmployeeTax3 exemptions(EmployeeExemptions exemptions) {
    
    
    
    
    this.exemptions = exemptions;
    return this;
  }

   /**
   * Get exemptions
   * @return exemptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeExemptions getExemptions() {
    return exemptions;
  }


  public void setExemptions(EmployeeExemptions exemptions) {
    
    
    
    this.exemptions = exemptions;
  }


  public EmployeeTax3 taxCredit(EmployeeTaxCredit taxCredit) {
    
    
    
    
    this.taxCredit = taxCredit;
    return this;
  }

   /**
   * Get taxCredit
   * @return taxCredit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeTaxCredit getTaxCredit() {
    return taxCredit;
  }


  public void setTaxCredit(EmployeeTaxCredit taxCredit) {
    
    
    
    this.taxCredit = taxCredit;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeTax3 instance itself
   */
  public EmployeeTax3 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeTax3 employeeTax3 = (EmployeeTax3) o;
    return Objects.equals(this.id, employeeTax3.id) &&
        Objects.equals(this.legalEntityTaxId, employeeTax3.legalEntityTaxId) &&
        Objects.equals(this.reciprocityType, employeeTax3.reciprocityType) &&
        Objects.equals(this.filingStatus, employeeTax3.filingStatus) &&
        Objects.equals(this.withholdingEffectiveStartDate, employeeTax3.withholdingEffectiveStartDate) &&
        Objects.equals(this.blockDate, employeeTax3.blockDate) &&
        Objects.equals(this.nonResidentAlien, employeeTax3.nonResidentAlien) &&
        Objects.equals(this.isProbationaryEmployee, employeeTax3.isProbationaryEmployee) &&
        Objects.equals(this.occupationalCode, employeeTax3.occupationalCode) &&
        Objects.equals(this.geographicCode, employeeTax3.geographicCode) &&
        Objects.equals(this.soCCode, employeeTax3.soCCode) &&
        Objects.equals(this.seasonalCode, employeeTax3.seasonalCode) &&
        Objects.equals(this.countyCode, employeeTax3.countyCode) &&
        Objects.equals(this.spouseWork, employeeTax3.spouseWork) &&
        Objects.equals(this.dependentInsuranceEligible, employeeTax3.dependentInsuranceEligible) &&
        Objects.equals(this.dependentInsuranceEligibleDate, employeeTax3.dependentInsuranceEligibleDate) &&
        Objects.equals(this.applicableBirthyear, employeeTax3.applicableBirthyear) &&
        Objects.equals(this.amount, employeeTax3.amount) &&
        Objects.equals(this.percentage, employeeTax3.percentage) &&
        Objects.equals(this.ncCICode, employeeTax3.ncCICode) &&
        Objects.equals(this.psdCode, employeeTax3.psdCode) &&
        Objects.equals(this.psdRate, employeeTax3.psdRate) &&
        Objects.equals(this.onHold, employeeTax3.onHold) &&
        Objects.equals(this.exemptions, employeeTax3.exemptions) &&
        Objects.equals(this.taxCredit, employeeTax3.taxCredit)&&
        Objects.equals(this.additionalProperties, employeeTax3.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, legalEntityTaxId, reciprocityType, filingStatus, withholdingEffectiveStartDate, blockDate, nonResidentAlien, isProbationaryEmployee, occupationalCode, geographicCode, soCCode, seasonalCode, countyCode, spouseWork, dependentInsuranceEligible, dependentInsuranceEligibleDate, applicableBirthyear, amount, percentage, ncCICode, psdCode, psdRate, onHold, exemptions, taxCredit, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeTax3 {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    legalEntityTaxId: ").append(toIndentedString(legalEntityTaxId)).append("\n");
    sb.append("    reciprocityType: ").append(toIndentedString(reciprocityType)).append("\n");
    sb.append("    filingStatus: ").append(toIndentedString(filingStatus)).append("\n");
    sb.append("    withholdingEffectiveStartDate: ").append(toIndentedString(withholdingEffectiveStartDate)).append("\n");
    sb.append("    blockDate: ").append(toIndentedString(blockDate)).append("\n");
    sb.append("    nonResidentAlien: ").append(toIndentedString(nonResidentAlien)).append("\n");
    sb.append("    isProbationaryEmployee: ").append(toIndentedString(isProbationaryEmployee)).append("\n");
    sb.append("    occupationalCode: ").append(toIndentedString(occupationalCode)).append("\n");
    sb.append("    geographicCode: ").append(toIndentedString(geographicCode)).append("\n");
    sb.append("    soCCode: ").append(toIndentedString(soCCode)).append("\n");
    sb.append("    seasonalCode: ").append(toIndentedString(seasonalCode)).append("\n");
    sb.append("    countyCode: ").append(toIndentedString(countyCode)).append("\n");
    sb.append("    spouseWork: ").append(toIndentedString(spouseWork)).append("\n");
    sb.append("    dependentInsuranceEligible: ").append(toIndentedString(dependentInsuranceEligible)).append("\n");
    sb.append("    dependentInsuranceEligibleDate: ").append(toIndentedString(dependentInsuranceEligibleDate)).append("\n");
    sb.append("    applicableBirthyear: ").append(toIndentedString(applicableBirthyear)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    ncCICode: ").append(toIndentedString(ncCICode)).append("\n");
    sb.append("    psdCode: ").append(toIndentedString(psdCode)).append("\n");
    sb.append("    psdRate: ").append(toIndentedString(psdRate)).append("\n");
    sb.append("    onHold: ").append(toIndentedString(onHold)).append("\n");
    sb.append("    exemptions: ").append(toIndentedString(exemptions)).append("\n");
    sb.append("    taxCredit: ").append(toIndentedString(taxCredit)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("LegalEntityTaxId");
    openapiFields.add("ReciprocityType");
    openapiFields.add("FilingStatus");
    openapiFields.add("WithholdingEffectiveStartDate");
    openapiFields.add("BlockDate");
    openapiFields.add("NonResidentAlien");
    openapiFields.add("IsProbationaryEmployee");
    openapiFields.add("OccupationalCode");
    openapiFields.add("GeographicCode");
    openapiFields.add("SOCCode");
    openapiFields.add("SeasonalCode");
    openapiFields.add("CountyCode");
    openapiFields.add("SpouseWork");
    openapiFields.add("DependentInsuranceEligible");
    openapiFields.add("DependentInsuranceEligibleDate");
    openapiFields.add("ApplicableBirthyear");
    openapiFields.add("Amount");
    openapiFields.add("Percentage");
    openapiFields.add("NCCICode");
    openapiFields.add("PsdCode");
    openapiFields.add("PsdRate");
    openapiFields.add("OnHold");
    openapiFields.add("Exemptions");
    openapiFields.add("TaxCredit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("LegalEntityTaxId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeTax3
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeTax3.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeTax3 is not found in the empty JSON string", EmployeeTax3.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeeTax3.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("LegalEntityTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalEntityTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalEntityTaxId").toString()));
      }
      if (!jsonObj.get("NonResidentAlien").isJsonNull() && (jsonObj.get("NonResidentAlien") != null && !jsonObj.get("NonResidentAlien").isJsonNull()) && !jsonObj.get("NonResidentAlien").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NonResidentAlien` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NonResidentAlien").toString()));
      }
      if (!jsonObj.get("OccupationalCode").isJsonNull() && (jsonObj.get("OccupationalCode") != null && !jsonObj.get("OccupationalCode").isJsonNull()) && !jsonObj.get("OccupationalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OccupationalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OccupationalCode").toString()));
      }
      if (!jsonObj.get("GeographicCode").isJsonNull() && (jsonObj.get("GeographicCode") != null && !jsonObj.get("GeographicCode").isJsonNull()) && !jsonObj.get("GeographicCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GeographicCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GeographicCode").toString()));
      }
      if (!jsonObj.get("SOCCode").isJsonNull() && (jsonObj.get("SOCCode") != null && !jsonObj.get("SOCCode").isJsonNull()) && !jsonObj.get("SOCCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SOCCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SOCCode").toString()));
      }
      if (!jsonObj.get("SeasonalCode").isJsonNull() && (jsonObj.get("SeasonalCode") != null && !jsonObj.get("SeasonalCode").isJsonNull()) && !jsonObj.get("SeasonalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SeasonalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SeasonalCode").toString()));
      }
      if (!jsonObj.get("CountyCode").isJsonNull() && (jsonObj.get("CountyCode") != null && !jsonObj.get("CountyCode").isJsonNull()) && !jsonObj.get("CountyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CountyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CountyCode").toString()));
      }
      if (!jsonObj.get("SpouseWork").isJsonNull() && (jsonObj.get("SpouseWork") != null && !jsonObj.get("SpouseWork").isJsonNull()) && !jsonObj.get("SpouseWork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SpouseWork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SpouseWork").toString()));
      }
      if (!jsonObj.get("DependentInsuranceEligible").isJsonNull() && (jsonObj.get("DependentInsuranceEligible") != null && !jsonObj.get("DependentInsuranceEligible").isJsonNull()) && !jsonObj.get("DependentInsuranceEligible").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DependentInsuranceEligible` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DependentInsuranceEligible").toString()));
      }
      if (!jsonObj.get("NCCICode").isJsonNull() && (jsonObj.get("NCCICode") != null && !jsonObj.get("NCCICode").isJsonNull()) && !jsonObj.get("NCCICode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NCCICode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NCCICode").toString()));
      }
      if (!jsonObj.get("PsdCode").isJsonNull() && (jsonObj.get("PsdCode") != null && !jsonObj.get("PsdCode").isJsonNull()) && !jsonObj.get("PsdCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PsdCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PsdCode").toString()));
      }
      // validate the optional field `Exemptions`
      if (jsonObj.get("Exemptions") != null && !jsonObj.get("Exemptions").isJsonNull()) {
        EmployeeExemptions.validateJsonObject(jsonObj.getAsJsonObject("Exemptions"));
      }
      // validate the optional field `TaxCredit`
      if (jsonObj.get("TaxCredit") != null && !jsonObj.get("TaxCredit").isJsonNull()) {
        EmployeeTaxCredit.validateJsonObject(jsonObj.getAsJsonObject("TaxCredit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeTax3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeTax3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeTax3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeTax3.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeTax3>() {
           @Override
           public void write(JsonWriter out, EmployeeTax3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeTax3 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeTax3 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeTax3 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeTax3
  * @throws IOException if the JSON string is invalid with respect to EmployeeTax3
  */
  public static EmployeeTax3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeTax3.class);
  }

 /**
  * Convert an instance of EmployeeTax3 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

