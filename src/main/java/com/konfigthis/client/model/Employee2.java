/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DisabilityStatus;
import com.konfigthis.client.model.EmploymentStatus;
import com.konfigthis.client.model.EmploymentType;
import com.konfigthis.client.model.EthnicityType;
import com.konfigthis.client.model.FlsaType;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.GenericAddress;
import com.konfigthis.client.model.MaritalStatus;
import com.konfigthis.client.model.Phone;
import com.konfigthis.client.model.Prefix;
import com.konfigthis.client.model.Suffix;
import com.konfigthis.client.model.VeteranStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The Create Employee model represents Employee related information needed to create a new employee (a new hire).
 */
@ApiModel(description = "The Create Employee model represents Employee related information needed to create a new employee (a new hire).")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Employee2 {
  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "LegalEntityId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Integer legalEntityId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "EmployeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private Integer employeeNumber;

  public static final String SERIALIZED_NAME_ALTERNATE_EMPLOYEE_NUMBER = "AlternateEmployeeNumber";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_EMPLOYEE_NUMBER)
  private String alternateEmployeeNumber;

  public static final String SERIALIZED_NAME_PREFIX = "Prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private Prefix prefix;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "MiddleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_SUFFIX = "Suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private Suffix suffix;

  public static final String SERIALIZED_NAME_HOME_EMAIL = "HomeEmail";
  @SerializedName(SERIALIZED_NAME_HOME_EMAIL)
  private String homeEmail;

  public static final String SERIALIZED_NAME_WORK_EMAIL = "WorkEmail";
  @SerializedName(SERIALIZED_NAME_WORK_EMAIL)
  private String workEmail;

  public static final String SERIALIZED_NAME_PHONES = "Phones";
  @SerializedName(SERIALIZED_NAME_PHONES)
  private List<Phone> phones = null;

  public static final String SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER = "SocialSecurityNumber";
  @SerializedName(SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER)
  private String socialSecurityNumber;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "BirthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private OffsetDateTime birthDate;

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private Gender gender;

  public static final String SERIALIZED_NAME_ETHNICITY = "Ethnicity";
  @SerializedName(SERIALIZED_NAME_ETHNICITY)
  private EthnicityType ethnicity;

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "MaritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private MaritalStatus maritalStatus;

  public static final String SERIALIZED_NAME_WORK_LOCATION = "WorkLocation";
  @SerializedName(SERIALIZED_NAME_WORK_LOCATION)
  private String workLocation;

  public static final String SERIALIZED_NAME_JOB_TITLE = "JobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_HIRE_DATE = "HireDate";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private OffsetDateTime hireDate;

  public static final String SERIALIZED_NAME_RE_HIRE_DATE = "ReHireDate";
  @SerializedName(SERIALIZED_NAME_RE_HIRE_DATE)
  private OffsetDateTime reHireDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private EmploymentStatus status;

  public static final String SERIALIZED_NAME_FLSA = "Flsa";
  @SerializedName(SERIALIZED_NAME_FLSA)
  private FlsaType flsa;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private EmploymentType type;

  public static final String SERIALIZED_NAME_MANAGER_EMP_ID = "ManagerEmpId";
  @SerializedName(SERIALIZED_NAME_MANAGER_EMP_ID)
  private String managerEmpId;

  public static final String SERIALIZED_NAME_PAYGROUP_DESCRIPTION = "PaygroupDescription";
  @SerializedName(SERIALIZED_NAME_PAYGROUP_DESCRIPTION)
  private String paygroupDescription;

  public static final String SERIALIZED_NAME_DEPARTMENT_CODE = "DepartmentCode";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_CODE)
  private Long departmentCode;

  public static final String SERIALIZED_NAME_VETERAN = "Veteran";
  @SerializedName(SERIALIZED_NAME_VETERAN)
  private VeteranStatus veteran;

  public static final String SERIALIZED_NAME_DISABILITY = "Disability";
  @SerializedName(SERIALIZED_NAME_DISABILITY)
  private DisabilityStatus disability;

  public static final String SERIALIZED_NAME_PRIMARY_ADDRESS = "PrimaryAddress";
  @SerializedName(SERIALIZED_NAME_PRIMARY_ADDRESS)
  private GenericAddress primaryAddress;

  public Employee2() {
  }

  public Employee2 legalEntityId(Integer legalEntityId) {
    
    
    
    
    this.legalEntityId = legalEntityId;
    return this;
  }

   /**
   * Employee&#39;s LegalEntityId.             
   * @return legalEntityId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "123666", required = true, value = "Employee's LegalEntityId.             ")

  public Integer getLegalEntityId() {
    return legalEntityId;
  }


  public void setLegalEntityId(Integer legalEntityId) {
    
    
    
    this.legalEntityId = legalEntityId;
  }


  public Employee2 employeeNumber(Integer employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Unique number of the employee in the tenant. Generated by Paycor if not provided.             
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "Unique number of the employee in the tenant. Generated by Paycor if not provided.             ")

  public Integer getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(Integer employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public Employee2 alternateEmployeeNumber(String alternateEmployeeNumber) {
    
    
    
    
    this.alternateEmployeeNumber = alternateEmployeeNumber;
    return this;
  }

   /**
   * Can be up to 9 characters, Requires Alternate Employee Number product offering.
   * @return alternateEmployeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1234567890", value = "Can be up to 9 characters, Requires Alternate Employee Number product offering.")

  public String getAlternateEmployeeNumber() {
    return alternateEmployeeNumber;
  }


  public void setAlternateEmployeeNumber(String alternateEmployeeNumber) {
    
    
    
    this.alternateEmployeeNumber = alternateEmployeeNumber;
  }


  public Employee2 prefix(Prefix prefix) {
    
    
    
    
    this.prefix = prefix;
    return this;
  }

   /**
   * Get prefix
   * @return prefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Prefix getPrefix() {
    return prefix;
  }


  public void setPrefix(Prefix prefix) {
    
    
    
    this.prefix = prefix;
  }


  public Employee2 firstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
    }
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the employee.
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Charles", required = true, value = "First name of the employee.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
    }
    this.firstName = firstName;
  }


  public Employee2 middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Middle name of the employee.
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Lutwidge", value = "Middle name of the employee.")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public Employee2 lastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
    }
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the employee.
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Dodgson", required = true, value = "Last name of the employee.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
    }
    this.lastName = lastName;
  }


  public Employee2 suffix(Suffix suffix) {
    
    
    
    
    this.suffix = suffix;
    return this;
  }

   /**
   * Get suffix
   * @return suffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Suffix getSuffix() {
    return suffix;
  }


  public void setSuffix(Suffix suffix) {
    
    
    
    this.suffix = suffix;
  }


  public Employee2 homeEmail(String homeEmail) {
    
    
    
    
    this.homeEmail = homeEmail;
    return this;
  }

   /**
   * Home Email Information of an employee.             
   * @return homeEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Home Email Information of an employee.             ")

  public String getHomeEmail() {
    return homeEmail;
  }


  public void setHomeEmail(String homeEmail) {
    
    
    
    this.homeEmail = homeEmail;
  }


  public Employee2 workEmail(String workEmail) {
    
    
    
    
    this.workEmail = workEmail;
    return this;
  }

   /**
   * Work Email Information of an employee.             
   * @return workEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Work Email Information of an employee.             ")

  public String getWorkEmail() {
    return workEmail;
  }


  public void setWorkEmail(String workEmail) {
    
    
    
    this.workEmail = workEmail;
  }


  public Employee2 phones(List<Phone> phones) {
    
    
    
    
    this.phones = phones;
    return this;
  }

  public Employee2 addPhonesItem(Phone phonesItem) {
    if (this.phones == null) {
      this.phones = new ArrayList<>();
    }
    this.phones.add(phonesItem);
    return this;
  }

   /**
   * List of type Phone containing phone numbers of the employee. Accepts home,mobile and work phone numbers, upto 1 of each type. Mobile phone is accepted only if home contact is provided.              
   * @return phones
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of type Phone containing phone numbers of the employee. Accepts home,mobile and work phone numbers, upto 1 of each type. Mobile phone is accepted only if home contact is provided.              ")

  public List<Phone> getPhones() {
    return phones;
  }


  public void setPhones(List<Phone> phones) {
    
    
    
    this.phones = phones;
  }


  public Employee2 socialSecurityNumber(String socialSecurityNumber) {
    
    
    
    
    this.socialSecurityNumber = socialSecurityNumber;
    return this;
  }

   /**
   * Social security number of the employee.
   * @return socialSecurityNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "555555555", value = "Social security number of the employee.")

  public String getSocialSecurityNumber() {
    return socialSecurityNumber;
  }


  public void setSocialSecurityNumber(String socialSecurityNumber) {
    
    
    
    this.socialSecurityNumber = socialSecurityNumber;
  }


  public Employee2 birthDate(OffsetDateTime birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * Date of birth of the employee following the ISO 8601 standard. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) 
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1944-04-01T00:00Z", value = "Date of birth of the employee following the ISO 8601 standard. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ")

  public OffsetDateTime getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(OffsetDateTime birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public Employee2 gender(Gender gender) {
    
    
    
    
    this.gender = gender;
    return this;
  }

   /**
   * Get gender
   * @return gender
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Gender getGender() {
    return gender;
  }


  public void setGender(Gender gender) {
    
    
    
    this.gender = gender;
  }


  public Employee2 ethnicity(EthnicityType ethnicity) {
    
    
    
    
    this.ethnicity = ethnicity;
    return this;
  }

   /**
   * Get ethnicity
   * @return ethnicity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EthnicityType getEthnicity() {
    return ethnicity;
  }


  public void setEthnicity(EthnicityType ethnicity) {
    
    
    
    this.ethnicity = ethnicity;
  }


  public Employee2 maritalStatus(MaritalStatus maritalStatus) {
    
    
    
    
    this.maritalStatus = maritalStatus;
    return this;
  }

   /**
   * Get maritalStatus
   * @return maritalStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MaritalStatus getMaritalStatus() {
    return maritalStatus;
  }


  public void setMaritalStatus(MaritalStatus maritalStatus) {
    
    
    
    this.maritalStatus = maritalStatus;
  }


  public Employee2 workLocation(String workLocation) {
    
    
    
    
    this.workLocation = workLocation;
    return this;
  }

   /**
   * The name of the Work Location to associate with new hire.  * Must be an existing Work Location. Use API &#39;GET Legal Entity Work Location by Legal Entity ID&#39; to retrieve a list of valid names.             
   * @return workLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the Work Location to associate with new hire.  * Must be an existing Work Location. Use API 'GET Legal Entity Work Location by Legal Entity ID' to retrieve a list of valid names.             ")

  public String getWorkLocation() {
    return workLocation;
  }


  public void setWorkLocation(String workLocation) {
    
    
    
    this.workLocation = workLocation;
  }


  public Employee2 jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Name of the Job Title to associate with new hire.  * Must be an existing Job setup on the Tenant. Use API &#39;GET Tenant Job Titles by TenantId&#39; to retrieve a list of valid names.             
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Software Engineer", value = "Name of the Job Title to associate with new hire.  * Must be an existing Job setup on the Tenant. Use API 'GET Tenant Job Titles by TenantId' to retrieve a list of valid names.             ")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public Employee2 hireDate(OffsetDateTime hireDate) {
    
    
    if (hireDate != null && hireDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for hireDate. Length must be greater than or equal to 1.");
    }
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * Date the employee was hired following the ISO 8601 standard.. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              
   * @return hireDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2000-11-01T00:00Z", required = true, value = "Date the employee was hired following the ISO 8601 standard.. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              ")

  public OffsetDateTime getHireDate() {
    return hireDate;
  }


  public void setHireDate(OffsetDateTime hireDate) {
    
    
    if (hireDate != null && hireDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for hireDate. Length must be greater than or equal to 1.");
    }
    this.hireDate = hireDate;
  }


  public Employee2 reHireDate(OffsetDateTime reHireDate) {
    
    
    
    
    this.reHireDate = reHireDate;
    return this;
  }

   /**
   * Re-hire date of the employee. Terminated employees can be rehired.  Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) 
   * @return reHireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-05-21T00:00Z", value = "Re-hire date of the employee. Terminated employees can be rehired.  Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard) ")

  public OffsetDateTime getReHireDate() {
    return reHireDate;
  }


  public void setReHireDate(OffsetDateTime reHireDate) {
    
    
    
    this.reHireDate = reHireDate;
  }


  public Employee2 status(EmploymentStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmploymentStatus getStatus() {
    return status;
  }


  public void setStatus(EmploymentStatus status) {
    
    
    
    this.status = status;
  }


  public Employee2 flsa(FlsaType flsa) {
    
    
    
    
    this.flsa = flsa;
    return this;
  }

   /**
   * Get flsa
   * @return flsa
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FlsaType getFlsa() {
    return flsa;
  }


  public void setFlsa(FlsaType flsa) {
    
    
    
    this.flsa = flsa;
  }


  public Employee2 type(EmploymentType type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmploymentType getType() {
    return type;
  }


  public void setType(EmploymentType type) {
    
    
    
    this.type = type;
  }


  public Employee2 managerEmpId(String managerEmpId) {
    
    
    
    
    this.managerEmpId = managerEmpId;
    return this;
  }

   /**
   * Unique identifier of the manager in Paycor&#39;s system. Generated by Paycor.
   * @return managerEmpId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "52a2s23-0000-0000-0000-0007d0009840", value = "Unique identifier of the manager in Paycor's system. Generated by Paycor.")

  public String getManagerEmpId() {
    return managerEmpId;
  }


  public void setManagerEmpId(String managerEmpId) {
    
    
    
    this.managerEmpId = managerEmpId;
  }


  public Employee2 paygroupDescription(String paygroupDescription) {
    
    
    if (paygroupDescription != null && paygroupDescription.length() < 1) {
      throw new IllegalArgumentException("Invalid value for paygroupDescription. Length must be greater than or equal to 1.");
    }
    
    this.paygroupDescription = paygroupDescription;
    return this;
  }

   /**
   * The description of the paygroup that the employee belongs to.  * Must be existing Paygroup. Call GET Pay Groups by LegalEntityID to lookup valid values in the field \&quot;PaygroupName\&quot;.              
   * @return paygroupDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The description of the paygroup that the employee belongs to.  * Must be existing Paygroup. Call GET Pay Groups by LegalEntityID to lookup valid values in the field \"PaygroupName\".              ")

  public String getPaygroupDescription() {
    return paygroupDescription;
  }


  public void setPaygroupDescription(String paygroupDescription) {
    
    
    if (paygroupDescription != null && paygroupDescription.length() < 1) {
      throw new IllegalArgumentException("Invalid value for paygroupDescription. Length must be greater than or equal to 1.");
    }
    this.paygroupDescription = paygroupDescription;
  }


  public Employee2 departmentCode(Long departmentCode) {
    
    
    
    
    this.departmentCode = departmentCode;
    return this;
  }

   /**
   * The department code that the employee belongs to.   * Must be existing Department. Call Get Legal Entity Departments by LegalEntityID to get valid Code value.             
   * @return departmentCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The department code that the employee belongs to.   * Must be existing Department. Call Get Legal Entity Departments by LegalEntityID to get valid Code value.             ")

  public Long getDepartmentCode() {
    return departmentCode;
  }


  public void setDepartmentCode(Long departmentCode) {
    
    
    
    this.departmentCode = departmentCode;
  }


  public Employee2 veteran(VeteranStatus veteran) {
    
    
    
    
    this.veteran = veteran;
    return this;
  }

   /**
   * Get veteran
   * @return veteran
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VeteranStatus getVeteran() {
    return veteran;
  }


  public void setVeteran(VeteranStatus veteran) {
    
    
    
    this.veteran = veteran;
  }


  public Employee2 disability(DisabilityStatus disability) {
    
    
    
    
    this.disability = disability;
    return this;
  }

   /**
   * Get disability
   * @return disability
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DisabilityStatus getDisability() {
    return disability;
  }


  public void setDisability(DisabilityStatus disability) {
    
    
    
    this.disability = disability;
  }


  public Employee2 primaryAddress(GenericAddress primaryAddress) {
    
    
    
    
    this.primaryAddress = primaryAddress;
    return this;
  }

   /**
   * Get primaryAddress
   * @return primaryAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public GenericAddress getPrimaryAddress() {
    return primaryAddress;
  }


  public void setPrimaryAddress(GenericAddress primaryAddress) {
    
    
    
    this.primaryAddress = primaryAddress;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Employee2 instance itself
   */
  public Employee2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Employee2 employee2 = (Employee2) o;
    return Objects.equals(this.legalEntityId, employee2.legalEntityId) &&
        Objects.equals(this.employeeNumber, employee2.employeeNumber) &&
        Objects.equals(this.alternateEmployeeNumber, employee2.alternateEmployeeNumber) &&
        Objects.equals(this.prefix, employee2.prefix) &&
        Objects.equals(this.firstName, employee2.firstName) &&
        Objects.equals(this.middleName, employee2.middleName) &&
        Objects.equals(this.lastName, employee2.lastName) &&
        Objects.equals(this.suffix, employee2.suffix) &&
        Objects.equals(this.homeEmail, employee2.homeEmail) &&
        Objects.equals(this.workEmail, employee2.workEmail) &&
        Objects.equals(this.phones, employee2.phones) &&
        Objects.equals(this.socialSecurityNumber, employee2.socialSecurityNumber) &&
        Objects.equals(this.birthDate, employee2.birthDate) &&
        Objects.equals(this.gender, employee2.gender) &&
        Objects.equals(this.ethnicity, employee2.ethnicity) &&
        Objects.equals(this.maritalStatus, employee2.maritalStatus) &&
        Objects.equals(this.workLocation, employee2.workLocation) &&
        Objects.equals(this.jobTitle, employee2.jobTitle) &&
        Objects.equals(this.hireDate, employee2.hireDate) &&
        Objects.equals(this.reHireDate, employee2.reHireDate) &&
        Objects.equals(this.status, employee2.status) &&
        Objects.equals(this.flsa, employee2.flsa) &&
        Objects.equals(this.type, employee2.type) &&
        Objects.equals(this.managerEmpId, employee2.managerEmpId) &&
        Objects.equals(this.paygroupDescription, employee2.paygroupDescription) &&
        Objects.equals(this.departmentCode, employee2.departmentCode) &&
        Objects.equals(this.veteran, employee2.veteran) &&
        Objects.equals(this.disability, employee2.disability) &&
        Objects.equals(this.primaryAddress, employee2.primaryAddress)&&
        Objects.equals(this.additionalProperties, employee2.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(legalEntityId, employeeNumber, alternateEmployeeNumber, prefix, firstName, middleName, lastName, suffix, homeEmail, workEmail, phones, socialSecurityNumber, birthDate, gender, ethnicity, maritalStatus, workLocation, jobTitle, hireDate, reHireDate, status, flsa, type, managerEmpId, paygroupDescription, departmentCode, veteran, disability, primaryAddress, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Employee2 {\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    alternateEmployeeNumber: ").append(toIndentedString(alternateEmployeeNumber)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    homeEmail: ").append(toIndentedString(homeEmail)).append("\n");
    sb.append("    workEmail: ").append(toIndentedString(workEmail)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    socialSecurityNumber: ").append(toIndentedString(socialSecurityNumber)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    ethnicity: ").append(toIndentedString(ethnicity)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    workLocation: ").append(toIndentedString(workLocation)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    reHireDate: ").append(toIndentedString(reHireDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    flsa: ").append(toIndentedString(flsa)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    managerEmpId: ").append(toIndentedString(managerEmpId)).append("\n");
    sb.append("    paygroupDescription: ").append(toIndentedString(paygroupDescription)).append("\n");
    sb.append("    departmentCode: ").append(toIndentedString(departmentCode)).append("\n");
    sb.append("    veteran: ").append(toIndentedString(veteran)).append("\n");
    sb.append("    disability: ").append(toIndentedString(disability)).append("\n");
    sb.append("    primaryAddress: ").append(toIndentedString(primaryAddress)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LegalEntityId");
    openapiFields.add("EmployeeNumber");
    openapiFields.add("AlternateEmployeeNumber");
    openapiFields.add("Prefix");
    openapiFields.add("FirstName");
    openapiFields.add("MiddleName");
    openapiFields.add("LastName");
    openapiFields.add("Suffix");
    openapiFields.add("HomeEmail");
    openapiFields.add("WorkEmail");
    openapiFields.add("Phones");
    openapiFields.add("SocialSecurityNumber");
    openapiFields.add("BirthDate");
    openapiFields.add("Gender");
    openapiFields.add("Ethnicity");
    openapiFields.add("MaritalStatus");
    openapiFields.add("WorkLocation");
    openapiFields.add("JobTitle");
    openapiFields.add("HireDate");
    openapiFields.add("ReHireDate");
    openapiFields.add("Status");
    openapiFields.add("Flsa");
    openapiFields.add("Type");
    openapiFields.add("ManagerEmpId");
    openapiFields.add("PaygroupDescription");
    openapiFields.add("DepartmentCode");
    openapiFields.add("Veteran");
    openapiFields.add("Disability");
    openapiFields.add("PrimaryAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LegalEntityId");
    openapiRequiredFields.add("FirstName");
    openapiRequiredFields.add("LastName");
    openapiRequiredFields.add("HireDate");
    openapiRequiredFields.add("Status");
    openapiRequiredFields.add("PaygroupDescription");
    openapiRequiredFields.add("DepartmentCode");
    openapiRequiredFields.add("PrimaryAddress");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Employee2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Employee2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Employee2 is not found in the empty JSON string", Employee2.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Employee2.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("AlternateEmployeeNumber").isJsonNull() && (jsonObj.get("AlternateEmployeeNumber") != null && !jsonObj.get("AlternateEmployeeNumber").isJsonNull()) && !jsonObj.get("AlternateEmployeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AlternateEmployeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AlternateEmployeeNumber").toString()));
      }
      if (!jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if (!jsonObj.get("MiddleName").isJsonNull() && (jsonObj.get("MiddleName") != null && !jsonObj.get("MiddleName").isJsonNull()) && !jsonObj.get("MiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleName").toString()));
      }
      if (!jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if (!jsonObj.get("HomeEmail").isJsonNull() && (jsonObj.get("HomeEmail") != null && !jsonObj.get("HomeEmail").isJsonNull()) && !jsonObj.get("HomeEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeEmail").toString()));
      }
      if (!jsonObj.get("WorkEmail").isJsonNull() && (jsonObj.get("WorkEmail") != null && !jsonObj.get("WorkEmail").isJsonNull()) && !jsonObj.get("WorkEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkEmail").toString()));
      }
      if (jsonObj.get("Phones") != null && !jsonObj.get("Phones").isJsonNull()) {
        JsonArray jsonArrayphones = jsonObj.getAsJsonArray("Phones");
        if (jsonArrayphones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Phones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Phones` to be an array in the JSON string but got `%s`", jsonObj.get("Phones").toString()));
          }

          // validate the optional field `Phones` (array)
          for (int i = 0; i < jsonArrayphones.size(); i++) {
            Phone.validateJsonObject(jsonArrayphones.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("SocialSecurityNumber").isJsonNull() && (jsonObj.get("SocialSecurityNumber") != null && !jsonObj.get("SocialSecurityNumber").isJsonNull()) && !jsonObj.get("SocialSecurityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SocialSecurityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SocialSecurityNumber").toString()));
      }
      if (!jsonObj.get("WorkLocation").isJsonNull() && (jsonObj.get("WorkLocation") != null && !jsonObj.get("WorkLocation").isJsonNull()) && !jsonObj.get("WorkLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkLocation").toString()));
      }
      if (!jsonObj.get("JobTitle").isJsonNull() && (jsonObj.get("JobTitle") != null && !jsonObj.get("JobTitle").isJsonNull()) && !jsonObj.get("JobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobTitle").toString()));
      }
      if (!jsonObj.get("ManagerEmpId").isJsonNull() && (jsonObj.get("ManagerEmpId") != null && !jsonObj.get("ManagerEmpId").isJsonNull()) && !jsonObj.get("ManagerEmpId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ManagerEmpId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ManagerEmpId").toString()));
      }
      if (!jsonObj.get("PaygroupDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaygroupDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaygroupDescription").toString()));
      }
      // validate the required field `PrimaryAddress`
      GenericAddress.validateJsonObject(jsonObj.getAsJsonObject("PrimaryAddress"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Employee2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Employee2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Employee2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Employee2.class));

       return (TypeAdapter<T>) new TypeAdapter<Employee2>() {
           @Override
           public void write(JsonWriter out, Employee2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Employee2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Employee2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Employee2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Employee2
  * @throws IOException if the JSON string is invalid with respect to Employee2
  */
  public static Employee2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Employee2.class);
  }

 /**
  * Convert an instance of Employee2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

