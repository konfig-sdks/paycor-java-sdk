/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DepositFrequencyType;
import com.konfigthis.client.model.ReciprocityType;
import com.konfigthis.client.model.ResourceReference;
import com.konfigthis.client.model.TaxType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The Legal Entity (Client) tax model represents organization Legal Entity Tax information.  
 */
@ApiModel(description = "The Legal Entity (Client) tax model represents organization Legal Entity Tax information.  ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LegalEntityTax {
  public static final String SERIALIZED_NAME_LEGAL_ENTITY_TAX_ID = "LegalEntityTaxId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_TAX_ID)
  private String legalEntityTaxId;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "LegalEntityId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Integer legalEntityId;

  public static final String SERIALIZED_NAME_TAX_CODE = "TaxCode";
  @SerializedName(SERIALIZED_NAME_TAX_CODE)
  private String taxCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TaxType type;

  public static final String SERIALIZED_NAME_TAX_AUTH_CODE = "TaxAuthCode";
  @SerializedName(SERIALIZED_NAME_TAX_AUTH_CODE)
  private String taxAuthCode;

  public static final String SERIALIZED_NAME_DEPOSIT_FREQUENCY = "DepositFrequency";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_FREQUENCY)
  private DepositFrequencyType depositFrequency;

  public static final String SERIALIZED_NAME_EFFECTIVE_START_DATE = "EffectiveStartDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_START_DATE)
  private OffsetDateTime effectiveStartDate;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_RATE = "Rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public static final String SERIALIZED_NAME_RECIPROCITY_TYPE = "ReciprocityType";
  @SerializedName(SERIALIZED_NAME_RECIPROCITY_TYPE)
  private ReciprocityType reciprocityType;

  public static final String SERIALIZED_NAME_OFFER_DEPENDENT_INSURANCE = "OfferDependentInsurance";
  @SerializedName(SERIALIZED_NAME_OFFER_DEPENDENT_INSURANCE)
  private Boolean offerDependentInsurance;

  public static final String SERIALIZED_NAME_WAGE_PLAN = "WagePlan";
  @SerializedName(SERIALIZED_NAME_WAGE_PLAN)
  private String wagePlan;

  public static final String SERIALIZED_NAME_ITEM_HOLD = "ItemHold";
  @SerializedName(SERIALIZED_NAME_ITEM_HOLD)
  private String itemHold;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "LegalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  private ResourceReference legalEntity;

  public LegalEntityTax() {
  }

  public LegalEntityTax legalEntityTaxId(String legalEntityTaxId) {
    
    
    
    
    this.legalEntityTaxId = legalEntityTaxId;
    return this;
  }

   /**
   * Unique identifier of the legal entity tax in Paycor&#39;s system.             
   * @return legalEntityTaxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2802cb0f-d278-0000-0000-000014e00100", value = "Unique identifier of the legal entity tax in Paycor's system.             ")

  public String getLegalEntityTaxId() {
    return legalEntityTaxId;
  }


  public void setLegalEntityTaxId(String legalEntityTaxId) {
    
    
    
    this.legalEntityTaxId = legalEntityTaxId;
  }


  public LegalEntityTax legalEntityId(Integer legalEntityId) {
    
    
    
    
    this.legalEntityId = legalEntityId;
    return this;
  }

   /**
   * Unique identifier of the legal entity in Paycor&#39;s system.             
   * @return legalEntityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "501123", value = "Unique identifier of the legal entity in Paycor's system.             ")

  public Integer getLegalEntityId() {
    return legalEntityId;
  }


  public void setLegalEntityId(Integer legalEntityId) {
    
    
    
    this.legalEntityId = legalEntityId;
  }


  public LegalEntityTax taxCode(String taxCode) {
    
    
    
    
    this.taxCode = taxCode;
    return this;
  }

   /**
   * Tax code values set at the client level.             
   * @return taxCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ZZEIC", value = "Tax code values set at the client level.             ")

  public String getTaxCode() {
    return taxCode;
  }


  public void setTaxCode(String taxCode) {
    
    
    
    this.taxCode = taxCode;
  }


  public LegalEntityTax description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of  tax code.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Earned Income Credit", value = "Description of  tax code.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public LegalEntityTax type(TaxType type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TaxType getType() {
    return type;
  }


  public void setType(TaxType type) {
    
    
    
    this.type = type;
  }


  public LegalEntityTax taxAuthCode(String taxAuthCode) {
    
    
    
    
    this.taxAuthCode = taxAuthCode;
    return this;
  }

   /**
   * Tax authority code
   * @return taxAuthCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "940", value = "Tax authority code")

  public String getTaxAuthCode() {
    return taxAuthCode;
  }


  public void setTaxAuthCode(String taxAuthCode) {
    
    
    
    this.taxAuthCode = taxAuthCode;
  }


  public LegalEntityTax depositFrequency(DepositFrequencyType depositFrequency) {
    
    
    
    
    this.depositFrequency = depositFrequency;
    return this;
  }

   /**
   * Get depositFrequency
   * @return depositFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DepositFrequencyType getDepositFrequency() {
    return depositFrequency;
  }


  public void setDepositFrequency(DepositFrequencyType depositFrequency) {
    
    
    
    this.depositFrequency = depositFrequency;
  }


  public LegalEntityTax effectiveStartDate(OffsetDateTime effectiveStartDate) {
    
    
    
    
    this.effectiveStartDate = effectiveStartDate;
    return this;
  }

   /**
   * Specifies the effective start date of the tax
   * @return effectiveStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-11-01T00:00Z", value = "Specifies the effective start date of the tax")

  public OffsetDateTime getEffectiveStartDate() {
    return effectiveStartDate;
  }


  public void setEffectiveStartDate(OffsetDateTime effectiveStartDate) {
    
    
    
    this.effectiveStartDate = effectiveStartDate;
  }


  public LegalEntityTax sequenceNumber(Integer sequenceNumber) {
    
    
    
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Specifies the sequence number of the tax
   * @return sequenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Specifies the sequence number of the tax")

  public Integer getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(Integer sequenceNumber) {
    
    
    
    this.sequenceNumber = sequenceNumber;
  }


  public LegalEntityTax rate(Double rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

  public LegalEntityTax rate(Integer rate) {
    
    
    
    
    this.rate = rate.doubleValue();
    return this;
  }

   /**
   * Tax rate              
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.1", value = "Tax rate              ")

  public Double getRate() {
    return rate;
  }


  public void setRate(Double rate) {
    
    
    
    this.rate = rate;
  }


  public LegalEntityTax reciprocityType(ReciprocityType reciprocityType) {
    
    
    
    
    this.reciprocityType = reciprocityType;
    return this;
  }

   /**
   * Get reciprocityType
   * @return reciprocityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ReciprocityType getReciprocityType() {
    return reciprocityType;
  }


  public void setReciprocityType(ReciprocityType reciprocityType) {
    
    
    
    this.reciprocityType = reciprocityType;
  }


  public LegalEntityTax offerDependentInsurance(Boolean offerDependentInsurance) {
    
    
    
    
    this.offerDependentInsurance = offerDependentInsurance;
    return this;
  }

   /**
   * Specifies whether dependent insurance is offered.             
   * @return offerDependentInsurance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Specifies whether dependent insurance is offered.             ")

  public Boolean getOfferDependentInsurance() {
    return offerDependentInsurance;
  }


  public void setOfferDependentInsurance(Boolean offerDependentInsurance) {
    
    
    
    this.offerDependentInsurance = offerDependentInsurance;
  }


  public LegalEntityTax wagePlan(String wagePlan) {
    
    
    
    
    this.wagePlan = wagePlan;
    return this;
  }

   /**
   * Wage plan             
   * @return wagePlan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "S", value = "Wage plan             ")

  public String getWagePlan() {
    return wagePlan;
  }


  public void setWagePlan(String wagePlan) {
    
    
    
    this.wagePlan = wagePlan;
  }


  public LegalEntityTax itemHold(String itemHold) {
    
    
    
    
    this.itemHold = itemHold;
    return this;
  }

   /**
   * Specifies Item hold status on the tax Specifies tax status
   * @return itemHold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "N", value = "Specifies Item hold status on the tax Specifies tax status")

  public String getItemHold() {
    return itemHold;
  }


  public void setItemHold(String itemHold) {
    
    
    
    this.itemHold = itemHold;
  }


  public LegalEntityTax legalEntity(ResourceReference legalEntity) {
    
    
    
    
    this.legalEntity = legalEntity;
    return this;
  }

   /**
   * Get legalEntity
   * @return legalEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getLegalEntity() {
    return legalEntity;
  }


  public void setLegalEntity(ResourceReference legalEntity) {
    
    
    
    this.legalEntity = legalEntity;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LegalEntityTax instance itself
   */
  public LegalEntityTax putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntityTax legalEntityTax = (LegalEntityTax) o;
    return Objects.equals(this.legalEntityTaxId, legalEntityTax.legalEntityTaxId) &&
        Objects.equals(this.legalEntityId, legalEntityTax.legalEntityId) &&
        Objects.equals(this.taxCode, legalEntityTax.taxCode) &&
        Objects.equals(this.description, legalEntityTax.description) &&
        Objects.equals(this.type, legalEntityTax.type) &&
        Objects.equals(this.taxAuthCode, legalEntityTax.taxAuthCode) &&
        Objects.equals(this.depositFrequency, legalEntityTax.depositFrequency) &&
        Objects.equals(this.effectiveStartDate, legalEntityTax.effectiveStartDate) &&
        Objects.equals(this.sequenceNumber, legalEntityTax.sequenceNumber) &&
        Objects.equals(this.rate, legalEntityTax.rate) &&
        Objects.equals(this.reciprocityType, legalEntityTax.reciprocityType) &&
        Objects.equals(this.offerDependentInsurance, legalEntityTax.offerDependentInsurance) &&
        Objects.equals(this.wagePlan, legalEntityTax.wagePlan) &&
        Objects.equals(this.itemHold, legalEntityTax.itemHold) &&
        Objects.equals(this.legalEntity, legalEntityTax.legalEntity)&&
        Objects.equals(this.additionalProperties, legalEntityTax.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(legalEntityTaxId, legalEntityId, taxCode, description, type, taxAuthCode, depositFrequency, effectiveStartDate, sequenceNumber, rate, reciprocityType, offerDependentInsurance, wagePlan, itemHold, legalEntity, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntityTax {\n");
    sb.append("    legalEntityTaxId: ").append(toIndentedString(legalEntityTaxId)).append("\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    taxCode: ").append(toIndentedString(taxCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    taxAuthCode: ").append(toIndentedString(taxAuthCode)).append("\n");
    sb.append("    depositFrequency: ").append(toIndentedString(depositFrequency)).append("\n");
    sb.append("    effectiveStartDate: ").append(toIndentedString(effectiveStartDate)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    reciprocityType: ").append(toIndentedString(reciprocityType)).append("\n");
    sb.append("    offerDependentInsurance: ").append(toIndentedString(offerDependentInsurance)).append("\n");
    sb.append("    wagePlan: ").append(toIndentedString(wagePlan)).append("\n");
    sb.append("    itemHold: ").append(toIndentedString(itemHold)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LegalEntityTaxId");
    openapiFields.add("LegalEntityId");
    openapiFields.add("TaxCode");
    openapiFields.add("Description");
    openapiFields.add("Type");
    openapiFields.add("TaxAuthCode");
    openapiFields.add("DepositFrequency");
    openapiFields.add("EffectiveStartDate");
    openapiFields.add("SequenceNumber");
    openapiFields.add("Rate");
    openapiFields.add("ReciprocityType");
    openapiFields.add("OfferDependentInsurance");
    openapiFields.add("WagePlan");
    openapiFields.add("ItemHold");
    openapiFields.add("LegalEntity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LegalEntityTax
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LegalEntityTax.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalEntityTax is not found in the empty JSON string", LegalEntityTax.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("LegalEntityTaxId") != null && !jsonObj.get("LegalEntityTaxId").isJsonNull()) && !jsonObj.get("LegalEntityTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalEntityTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalEntityTaxId").toString()));
      }
      if (!jsonObj.get("TaxCode").isJsonNull() && (jsonObj.get("TaxCode") != null && !jsonObj.get("TaxCode").isJsonNull()) && !jsonObj.get("TaxCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxCode").toString()));
      }
      if (!jsonObj.get("Description").isJsonNull() && (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("TaxAuthCode").isJsonNull() && (jsonObj.get("TaxAuthCode") != null && !jsonObj.get("TaxAuthCode").isJsonNull()) && !jsonObj.get("TaxAuthCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxAuthCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxAuthCode").toString()));
      }
      if (!jsonObj.get("WagePlan").isJsonNull() && (jsonObj.get("WagePlan") != null && !jsonObj.get("WagePlan").isJsonNull()) && !jsonObj.get("WagePlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WagePlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WagePlan").toString()));
      }
      if (!jsonObj.get("ItemHold").isJsonNull() && (jsonObj.get("ItemHold") != null && !jsonObj.get("ItemHold").isJsonNull()) && !jsonObj.get("ItemHold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ItemHold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ItemHold").toString()));
      }
      // validate the optional field `LegalEntity`
      if (jsonObj.get("LegalEntity") != null && !jsonObj.get("LegalEntity").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("LegalEntity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalEntityTax.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalEntityTax' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalEntityTax> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalEntityTax.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalEntityTax>() {
           @Override
           public void write(JsonWriter out, LegalEntityTax value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalEntityTax read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LegalEntityTax instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LegalEntityTax given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LegalEntityTax
  * @throws IOException if the JSON string is invalid with respect to LegalEntityTax
  */
  public static LegalEntityTax fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalEntityTax.class);
  }

 /**
  * Convert an instance of LegalEntityTax to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

