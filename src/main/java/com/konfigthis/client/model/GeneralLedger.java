/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * GeneralLedger
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GeneralLedger {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "EmployeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_DEPARTMENT_ID = "DepartmentId";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_ID)
  private String departmentId;

  public static final String SERIALIZED_NAME_DEPARTMENT_DESCRIPTION = "DepartmentDescription";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_DESCRIPTION)
  private String departmentDescription;

  public static final String SERIALIZED_NAME_DEPARTMENT_CODE = "DepartmentCode";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_CODE)
  private Long departmentCode;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "AccountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_MASTER_ACCOUNT = "MasterAccount";
  @SerializedName(SERIALIZED_NAME_MASTER_ACCOUNT)
  private String masterAccount;

  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "AccountName";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ITEMIZE = "Itemize";
  @SerializedName(SERIALIZED_NAME_ITEMIZE)
  private Boolean itemize;

  public static final String SERIALIZED_NAME_SORT_SEQUENCE = "SortSequence";
  @SerializedName(SERIALIZED_NAME_SORT_SEQUENCE)
  private Integer sortSequence;

  public static final String SERIALIZED_NAME_CREDIT = "Credit";
  @SerializedName(SERIALIZED_NAME_CREDIT)
  private Boolean credit;

  public static final String SERIALIZED_NAME_COMPANY_DEPARTMENT_NUMBER = "CompanyDepartmentNumber";
  @SerializedName(SERIALIZED_NAME_COMPANY_DEPARTMENT_NUMBER)
  private String companyDepartmentNumber;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "MiddleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public GeneralLedger() {
  }

  public GeneralLedger employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Unique identifier of employee Only set for employee level general ledger data
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "36f45f30-9a35-0000-0000-000001000000", value = "Unique identifier of employee Only set for employee level general ledger data")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public GeneralLedger departmentId(String departmentId) {
    
    
    
    
    this.departmentId = departmentId;
    return this;
  }

   /**
   * Unique identifier of department Synonymous with OrganizationId
   * @return departmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "36f45f30-9a35-0000-0000-000001000000", value = "Unique identifier of department Synonymous with OrganizationId")

  public String getDepartmentId() {
    return departmentId;
  }


  public void setDepartmentId(String departmentId) {
    
    
    
    this.departmentId = departmentId;
  }


  public GeneralLedger departmentDescription(String departmentDescription) {
    
    
    
    
    this.departmentDescription = departmentDescription;
    return this;
  }

   /**
   * Description of department Synonymous with OrganizationDescription
   * @return departmentDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "IT", value = "Description of department Synonymous with OrganizationDescription")

  public String getDepartmentDescription() {
    return departmentDescription;
  }


  public void setDepartmentDescription(String departmentDescription) {
    
    
    
    this.departmentDescription = departmentDescription;
  }


  public GeneralLedger departmentCode(Long departmentCode) {
    
    
    
    
    this.departmentCode = departmentCode;
    return this;
  }

   /**
   * Numeric code of department  Synonymous with OrganizationCode
   * @return departmentCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "213", value = "Numeric code of department  Synonymous with OrganizationCode")

  public Long getDepartmentCode() {
    return departmentCode;
  }


  public void setDepartmentCode(Long departmentCode) {
    
    
    
    this.departmentCode = departmentCode;
  }


  public GeneralLedger amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Dollar amount on general ledger
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-16880", value = "Dollar amount on general ledger")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public GeneralLedger accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Account number 
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "64", value = "Account number ")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public GeneralLedger masterAccount(String masterAccount) {
    
    
    
    
    this.masterAccount = masterAccount;
    return this;
  }

   /**
   * Master Account 
   * @return masterAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "XE ", value = "Master Account ")

  public String getMasterAccount() {
    return masterAccount;
  }


  public void setMasterAccount(String masterAccount) {
    
    
    
    this.masterAccount = masterAccount;
  }


  public GeneralLedger accountName(String accountName) {
    
    
    
    
    this.accountName = accountName;
    return this;
  }

   /**
   * Account Name
   * @return accountName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Ohio State Treasurer", value = "Account Name")

  public String getAccountName() {
    return accountName;
  }


  public void setAccountName(String accountName) {
    
    
    
    this.accountName = accountName;
  }


  public GeneralLedger itemize(Boolean itemize) {
    
    
    
    
    this.itemize = itemize;
    return this;
  }

   /**
   * Identifier that shows whether that particular record can be separated into additional records
   * @return itemize
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Identifier that shows whether that particular record can be separated into additional records")

  public Boolean getItemize() {
    return itemize;
  }


  public void setItemize(Boolean itemize) {
    
    
    
    this.itemize = itemize;
  }


  public GeneralLedger sortSequence(Integer sortSequence) {
    
    
    
    
    this.sortSequence = sortSequence;
    return this;
  }

   /**
   * Sort sequence number
   * @return sortSequence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40", value = "Sort sequence number")

  public Integer getSortSequence() {
    return sortSequence;
  }


  public void setSortSequence(Integer sortSequence) {
    
    
    
    this.sortSequence = sortSequence;
  }


  public GeneralLedger credit(Boolean credit) {
    
    
    
    
    this.credit = credit;
    return this;
  }

   /**
   * Field that shows whether record is a credit (true) or debit (false)
   * @return credit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Field that shows whether record is a credit (true) or debit (false)")

  public Boolean getCredit() {
    return credit;
  }


  public void setCredit(Boolean credit) {
    
    
    
    this.credit = credit;
  }


  public GeneralLedger companyDepartmentNumber(String companyDepartmentNumber) {
    
    
    
    
    this.companyDepartmentNumber = companyDepartmentNumber;
    return this;
  }

   /**
   * String of 20 characters that represent company department number  Synonymous with CompanyOrganizationNumber
   * @return companyDepartmentNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "139", value = "String of 20 characters that represent company department number  Synonymous with CompanyOrganizationNumber")

  public String getCompanyDepartmentNumber() {
    return companyDepartmentNumber;
  }


  public void setCompanyDepartmentNumber(String companyDepartmentNumber) {
    
    
    
    this.companyDepartmentNumber = companyDepartmentNumber;
  }


  public GeneralLedger firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of an employee Only set for employee level general ledger data
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Emily", value = "First name of an employee Only set for employee level general ledger data")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public GeneralLedger middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Middle name of an employee Only set for employee level general ledger data
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Anna", value = "Middle name of an employee Only set for employee level general ledger data")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public GeneralLedger lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of an employee Only set for employee level general ledger data
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smith", value = "Last name of an employee Only set for employee level general ledger data")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GeneralLedger instance itself
   */
  public GeneralLedger putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeneralLedger generalLedger = (GeneralLedger) o;
    return Objects.equals(this.employeeId, generalLedger.employeeId) &&
        Objects.equals(this.departmentId, generalLedger.departmentId) &&
        Objects.equals(this.departmentDescription, generalLedger.departmentDescription) &&
        Objects.equals(this.departmentCode, generalLedger.departmentCode) &&
        Objects.equals(this.amount, generalLedger.amount) &&
        Objects.equals(this.accountNumber, generalLedger.accountNumber) &&
        Objects.equals(this.masterAccount, generalLedger.masterAccount) &&
        Objects.equals(this.accountName, generalLedger.accountName) &&
        Objects.equals(this.itemize, generalLedger.itemize) &&
        Objects.equals(this.sortSequence, generalLedger.sortSequence) &&
        Objects.equals(this.credit, generalLedger.credit) &&
        Objects.equals(this.companyDepartmentNumber, generalLedger.companyDepartmentNumber) &&
        Objects.equals(this.firstName, generalLedger.firstName) &&
        Objects.equals(this.middleName, generalLedger.middleName) &&
        Objects.equals(this.lastName, generalLedger.lastName)&&
        Objects.equals(this.additionalProperties, generalLedger.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, departmentId, departmentDescription, departmentCode, amount, accountNumber, masterAccount, accountName, itemize, sortSequence, credit, companyDepartmentNumber, firstName, middleName, lastName, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeneralLedger {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    departmentId: ").append(toIndentedString(departmentId)).append("\n");
    sb.append("    departmentDescription: ").append(toIndentedString(departmentDescription)).append("\n");
    sb.append("    departmentCode: ").append(toIndentedString(departmentCode)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    masterAccount: ").append(toIndentedString(masterAccount)).append("\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    itemize: ").append(toIndentedString(itemize)).append("\n");
    sb.append("    sortSequence: ").append(toIndentedString(sortSequence)).append("\n");
    sb.append("    credit: ").append(toIndentedString(credit)).append("\n");
    sb.append("    companyDepartmentNumber: ").append(toIndentedString(companyDepartmentNumber)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmployeeId");
    openapiFields.add("DepartmentId");
    openapiFields.add("DepartmentDescription");
    openapiFields.add("DepartmentCode");
    openapiFields.add("Amount");
    openapiFields.add("AccountNumber");
    openapiFields.add("MasterAccount");
    openapiFields.add("AccountName");
    openapiFields.add("Itemize");
    openapiFields.add("SortSequence");
    openapiFields.add("Credit");
    openapiFields.add("CompanyDepartmentNumber");
    openapiFields.add("FirstName");
    openapiFields.add("MiddleName");
    openapiFields.add("LastName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GeneralLedger
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GeneralLedger.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeneralLedger is not found in the empty JSON string", GeneralLedger.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("EmployeeId").isJsonNull() && (jsonObj.get("EmployeeId") != null && !jsonObj.get("EmployeeId").isJsonNull()) && !jsonObj.get("EmployeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeId").toString()));
      }
      if (!jsonObj.get("DepartmentId").isJsonNull() && (jsonObj.get("DepartmentId") != null && !jsonObj.get("DepartmentId").isJsonNull()) && !jsonObj.get("DepartmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DepartmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DepartmentId").toString()));
      }
      if (!jsonObj.get("DepartmentDescription").isJsonNull() && (jsonObj.get("DepartmentDescription") != null && !jsonObj.get("DepartmentDescription").isJsonNull()) && !jsonObj.get("DepartmentDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DepartmentDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DepartmentDescription").toString()));
      }
      if (!jsonObj.get("AccountNumber").isJsonNull() && (jsonObj.get("AccountNumber") != null && !jsonObj.get("AccountNumber").isJsonNull()) && !jsonObj.get("AccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountNumber").toString()));
      }
      if (!jsonObj.get("MasterAccount").isJsonNull() && (jsonObj.get("MasterAccount") != null && !jsonObj.get("MasterAccount").isJsonNull()) && !jsonObj.get("MasterAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MasterAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MasterAccount").toString()));
      }
      if (!jsonObj.get("AccountName").isJsonNull() && (jsonObj.get("AccountName") != null && !jsonObj.get("AccountName").isJsonNull()) && !jsonObj.get("AccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountName").toString()));
      }
      if (!jsonObj.get("CompanyDepartmentNumber").isJsonNull() && (jsonObj.get("CompanyDepartmentNumber") != null && !jsonObj.get("CompanyDepartmentNumber").isJsonNull()) && !jsonObj.get("CompanyDepartmentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyDepartmentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyDepartmentNumber").toString()));
      }
      if (!jsonObj.get("FirstName").isJsonNull() && (jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if (!jsonObj.get("MiddleName").isJsonNull() && (jsonObj.get("MiddleName") != null && !jsonObj.get("MiddleName").isJsonNull()) && !jsonObj.get("MiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleName").toString()));
      }
      if (!jsonObj.get("LastName").isJsonNull() && (jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeneralLedger.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeneralLedger' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeneralLedger> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeneralLedger.class));

       return (TypeAdapter<T>) new TypeAdapter<GeneralLedger>() {
           @Override
           public void write(JsonWriter out, GeneralLedger value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GeneralLedger read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GeneralLedger instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GeneralLedger given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GeneralLedger
  * @throws IOException if the JSON string is invalid with respect to GeneralLedger
  */
  public static GeneralLedger fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeneralLedger.class);
  }

 /**
  * Convert an instance of GeneralLedger to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

