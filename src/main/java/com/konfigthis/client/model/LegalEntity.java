/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BusinessName;
import com.konfigthis.client.model.CorporationType;
import com.konfigthis.client.model.ResourceReference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The Legal Entity (Client) model represents organization Legal Entity information. Provides links to the Legal Entity&#39;s associated Tenant, Employee, Person, Earning, Deduction, Taxes and Custom Field information.
 */
@ApiModel(description = "The Legal Entity (Client) model represents organization Legal Entity information. Provides links to the Legal Entity's associated Tenant, Employee, Person, Earning, Deduction, Taxes and Custom Field information.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LegalEntity {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FEDERAL_ID = "FederalId";
  @SerializedName(SERIALIZED_NAME_FEDERAL_ID)
  private String federalId;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CorporationType type;

  public static final String SERIALIZED_NAME_IS_LOST = "IsLost";
  @SerializedName(SERIALIZED_NAME_IS_LOST)
  private Boolean isLost;

  public static final String SERIALIZED_NAME_BUSINESS_NAMES = "BusinessNames";
  @SerializedName(SERIALIZED_NAME_BUSINESS_NAMES)
  private List<BusinessName> businessNames = null;

  public static final String SERIALIZED_NAME_TENANT = "Tenant";
  @SerializedName(SERIALIZED_NAME_TENANT)
  private ResourceReference tenant;

  public static final String SERIALIZED_NAME_EMPLOYEES = "Employees";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES)
  private ResourceReference employees;

  public static final String SERIALIZED_NAME_PERSONS = "Persons";
  @SerializedName(SERIALIZED_NAME_PERSONS)
  private ResourceReference persons;

  public static final String SERIALIZED_NAME_EARNINGS = "Earnings";
  @SerializedName(SERIALIZED_NAME_EARNINGS)
  private ResourceReference earnings;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "Deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private ResourceReference deductions;

  public static final String SERIALIZED_NAME_TAXES = "Taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private ResourceReference taxes;

  public LegalEntity() {
  }

  public LegalEntity id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the legal entity in Paycor&#39;s system. This is also known as the Client Id.             
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "501123", value = "Unique identifier of the legal entity in Paycor's system. This is also known as the Client Id.             ")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public LegalEntity name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the legal entity.              
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACME Inc.", value = "Name of the legal entity.              ")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public LegalEntity federalId(String federalId) {
    
    
    
    
    this.federalId = federalId;
    return this;
  }

   /**
   * US Federal tax Identification Number/Employer Identification Number.              
   * @return federalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "555555555", value = "US Federal tax Identification Number/Employer Identification Number.              ")

  public String getFederalId() {
    return federalId;
  }


  public void setFederalId(String federalId) {
    
    
    
    this.federalId = federalId;
  }


  public LegalEntity type(CorporationType type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CorporationType getType() {
    return type;
  }


  public void setType(CorporationType type) {
    
    
    
    this.type = type;
  }


  public LegalEntity isLost(Boolean isLost) {
    
    
    
    
    this.isLost = isLost;
    return this;
  }

   /**
   * Flag that shows is the client active in Paycor system. Once a client is marked Lost, it will never reset to IsLost&#x3D;false. A new LegalEntityId would be created instead
   * @return isLost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Flag that shows is the client active in Paycor system. Once a client is marked Lost, it will never reset to IsLost=false. A new LegalEntityId would be created instead")

  public Boolean getIsLost() {
    return isLost;
  }


  public void setIsLost(Boolean isLost) {
    
    
    
    this.isLost = isLost;
  }


  public LegalEntity businessNames(List<BusinessName> businessNames) {
    
    
    
    
    this.businessNames = businessNames;
    return this;
  }

  public LegalEntity addBusinessNamesItem(BusinessName businessNamesItem) {
    if (this.businessNames == null) {
      this.businessNames = new ArrayList<>();
    }
    this.businessNames.add(businessNamesItem);
    return this;
  }

   /**
   * List of type BusinessName containing the legal entity&#39;s name, addresses and types.              
   * @return businessNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of type BusinessName containing the legal entity's name, addresses and types.              ")

  public List<BusinessName> getBusinessNames() {
    return businessNames;
  }


  public void setBusinessNames(List<BusinessName> businessNames) {
    
    
    
    this.businessNames = businessNames;
  }


  public LegalEntity tenant(ResourceReference tenant) {
    
    
    
    
    this.tenant = tenant;
    return this;
  }

   /**
   * Get tenant
   * @return tenant
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getTenant() {
    return tenant;
  }


  public void setTenant(ResourceReference tenant) {
    
    
    
    this.tenant = tenant;
  }


  public LegalEntity employees(ResourceReference employees) {
    
    
    
    
    this.employees = employees;
    return this;
  }

   /**
   * Get employees
   * @return employees
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getEmployees() {
    return employees;
  }


  public void setEmployees(ResourceReference employees) {
    
    
    
    this.employees = employees;
  }


  public LegalEntity persons(ResourceReference persons) {
    
    
    
    
    this.persons = persons;
    return this;
  }

   /**
   * Get persons
   * @return persons
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getPersons() {
    return persons;
  }


  public void setPersons(ResourceReference persons) {
    
    
    
    this.persons = persons;
  }


  public LegalEntity earnings(ResourceReference earnings) {
    
    
    
    
    this.earnings = earnings;
    return this;
  }

   /**
   * Get earnings
   * @return earnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getEarnings() {
    return earnings;
  }


  public void setEarnings(ResourceReference earnings) {
    
    
    
    this.earnings = earnings;
  }


  public LegalEntity deductions(ResourceReference deductions) {
    
    
    
    
    this.deductions = deductions;
    return this;
  }

   /**
   * Get deductions
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getDeductions() {
    return deductions;
  }


  public void setDeductions(ResourceReference deductions) {
    
    
    
    this.deductions = deductions;
  }


  public LegalEntity taxes(ResourceReference taxes) {
    
    
    
    
    this.taxes = taxes;
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getTaxes() {
    return taxes;
  }


  public void setTaxes(ResourceReference taxes) {
    
    
    
    this.taxes = taxes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LegalEntity instance itself
   */
  public LegalEntity putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntity legalEntity = (LegalEntity) o;
    return Objects.equals(this.id, legalEntity.id) &&
        Objects.equals(this.name, legalEntity.name) &&
        Objects.equals(this.federalId, legalEntity.federalId) &&
        Objects.equals(this.type, legalEntity.type) &&
        Objects.equals(this.isLost, legalEntity.isLost) &&
        Objects.equals(this.businessNames, legalEntity.businessNames) &&
        Objects.equals(this.tenant, legalEntity.tenant) &&
        Objects.equals(this.employees, legalEntity.employees) &&
        Objects.equals(this.persons, legalEntity.persons) &&
        Objects.equals(this.earnings, legalEntity.earnings) &&
        Objects.equals(this.deductions, legalEntity.deductions) &&
        Objects.equals(this.taxes, legalEntity.taxes)&&
        Objects.equals(this.additionalProperties, legalEntity.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, federalId, type, isLost, businessNames, tenant, employees, persons, earnings, deductions, taxes, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    federalId: ").append(toIndentedString(federalId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isLost: ").append(toIndentedString(isLost)).append("\n");
    sb.append("    businessNames: ").append(toIndentedString(businessNames)).append("\n");
    sb.append("    tenant: ").append(toIndentedString(tenant)).append("\n");
    sb.append("    employees: ").append(toIndentedString(employees)).append("\n");
    sb.append("    persons: ").append(toIndentedString(persons)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Name");
    openapiFields.add("FederalId");
    openapiFields.add("Type");
    openapiFields.add("IsLost");
    openapiFields.add("BusinessNames");
    openapiFields.add("Tenant");
    openapiFields.add("Employees");
    openapiFields.add("Persons");
    openapiFields.add("Earnings");
    openapiFields.add("Deductions");
    openapiFields.add("Taxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LegalEntity
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LegalEntity.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalEntity is not found in the empty JSON string", LegalEntity.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("Name").isJsonNull() && (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("FederalId").isJsonNull() && (jsonObj.get("FederalId") != null && !jsonObj.get("FederalId").isJsonNull()) && !jsonObj.get("FederalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FederalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FederalId").toString()));
      }
      if (jsonObj.get("BusinessNames") != null && !jsonObj.get("BusinessNames").isJsonNull()) {
        JsonArray jsonArraybusinessNames = jsonObj.getAsJsonArray("BusinessNames");
        if (jsonArraybusinessNames != null) {
          // ensure the json data is an array
          if (!jsonObj.get("BusinessNames").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `BusinessNames` to be an array in the JSON string but got `%s`", jsonObj.get("BusinessNames").toString()));
          }

          // validate the optional field `BusinessNames` (array)
          for (int i = 0; i < jsonArraybusinessNames.size(); i++) {
            BusinessName.validateJsonObject(jsonArraybusinessNames.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `Tenant`
      if (jsonObj.get("Tenant") != null && !jsonObj.get("Tenant").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("Tenant"));
      }
      // validate the optional field `Employees`
      if (jsonObj.get("Employees") != null && !jsonObj.get("Employees").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("Employees"));
      }
      // validate the optional field `Persons`
      if (jsonObj.get("Persons") != null && !jsonObj.get("Persons").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("Persons"));
      }
      // validate the optional field `Earnings`
      if (jsonObj.get("Earnings") != null && !jsonObj.get("Earnings").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("Earnings"));
      }
      // validate the optional field `Deductions`
      if (jsonObj.get("Deductions") != null && !jsonObj.get("Deductions").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("Deductions"));
      }
      // validate the optional field `Taxes`
      if (jsonObj.get("Taxes") != null && !jsonObj.get("Taxes").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("Taxes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalEntity.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalEntity' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalEntity> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalEntity.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalEntity>() {
           @Override
           public void write(JsonWriter out, LegalEntity value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalEntity read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LegalEntity instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LegalEntity given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LegalEntity
  * @throws IOException if the JSON string is invalid with respect to LegalEntity
  */
  public static LegalEntity fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalEntity.class);
  }

 /**
  * Convert an instance of LegalEntity to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

