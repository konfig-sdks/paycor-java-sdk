/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CheckType;
import com.konfigthis.client.model.PayStubDeduction2;
import com.konfigthis.client.model.PayStubEarning2;
import com.konfigthis.client.model.PayStubTax2;
import com.konfigthis.client.model.ResourceReference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Pay Stub model represents collection of information included on Employee&#39;s pay stub
 */
@ApiModel(description = "Pay Stub model represents collection of information included on Employee's pay stub")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PayStub2 {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "EmployeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_CLIENT_ID = "ClientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private Integer clientId;

  public static final String SERIALIZED_NAME_CHECK_NUMBER = "CheckNumber";
  @SerializedName(SERIALIZED_NAME_CHECK_NUMBER)
  private Long checkNumber;

  public static final String SERIALIZED_NAME_PLANNER_ID = "PlannerId";
  @SerializedName(SERIALIZED_NAME_PLANNER_ID)
  private String plannerId;

  public static final String SERIALIZED_NAME_CHECK_TYPE = "CheckType";
  @SerializedName(SERIALIZED_NAME_CHECK_TYPE)
  private CheckType checkType;

  public static final String SERIALIZED_NAME_PERIOD_START_DATE = "PeriodStartDate";
  @SerializedName(SERIALIZED_NAME_PERIOD_START_DATE)
  private OffsetDateTime periodStartDate;

  public static final String SERIALIZED_NAME_PERIOD_END_DATE = "PeriodEndDate";
  @SerializedName(SERIALIZED_NAME_PERIOD_END_DATE)
  private OffsetDateTime periodEndDate;

  public static final String SERIALIZED_NAME_GROSS_AMOUNT = "GrossAmount";
  @SerializedName(SERIALIZED_NAME_GROSS_AMOUNT)
  private Double grossAmount;

  public static final String SERIALIZED_NAME_NET_AMOUNT = "NetAmount";
  @SerializedName(SERIALIZED_NAME_NET_AMOUNT)
  private Double netAmount;

  public static final String SERIALIZED_NAME_EARNINGS = "Earnings";
  @SerializedName(SERIALIZED_NAME_EARNINGS)
  private PayStubEarning2 earnings;

  public static final String SERIALIZED_NAME_TAXES = "Taxes";
  @SerializedName(SERIALIZED_NAME_TAXES)
  private PayStubTax2 taxes;

  public static final String SERIALIZED_NAME_DEDUCTIONS = "Deductions";
  @SerializedName(SERIALIZED_NAME_DEDUCTIONS)
  private PayStubDeduction2 deductions;

  public static final String SERIALIZED_NAME_EMPLOYEE = "Employee";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE)
  private ResourceReference employee;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "LegalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  private ResourceReference legalEntity;

  public PayStub2() {
  }

  public PayStub2 employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Unique identifier of employee
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "36f45f30-9a35-0000-0000-000001000000", value = "Unique identifier of employee")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public PayStub2 clientId(Integer clientId) {
    
    
    
    
    this.clientId = clientId;
    return this;
  }

   /**
   * Unique identifier of the legal entity in Paycor&#39;s system
   * @return clientId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "100", value = "Unique identifier of the legal entity in Paycor's system")

  public Integer getClientId() {
    return clientId;
  }


  public void setClientId(Integer clientId) {
    
    
    
    this.clientId = clientId;
  }


  public PayStub2 checkNumber(Long checkNumber) {
    
    
    
    
    this.checkNumber = checkNumber;
    return this;
  }

   /**
   * Check number.
   * @return checkNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "27463631", value = "Check number.")

  public Long getCheckNumber() {
    return checkNumber;
  }


  public void setCheckNumber(Long checkNumber) {
    
    
    
    this.checkNumber = checkNumber;
  }


  public PayStub2 plannerId(String plannerId) {
    
    
    
    
    this.plannerId = plannerId;
    return this;
  }

   /**
   * Unique identifier of the Planner Id for this Paystub.
   * @return plannerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "cfc11370-c241-4c9d-a5d2-90d340ee005c", value = "Unique identifier of the Planner Id for this Paystub.")

  public String getPlannerId() {
    return plannerId;
  }


  public void setPlannerId(String plannerId) {
    
    
    
    this.plannerId = plannerId;
  }


  public PayStub2 checkType(CheckType checkType) {
    
    
    
    
    this.checkType = checkType;
    return this;
  }

   /**
   * Get checkType
   * @return checkType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CheckType getCheckType() {
    return checkType;
  }


  public void setCheckType(CheckType checkType) {
    
    
    
    this.checkType = checkType;
  }


  public PayStub2 periodStartDate(OffsetDateTime periodStartDate) {
    
    
    
    
    this.periodStartDate = periodStartDate;
    return this;
  }

   /**
   * Start date of the pay period Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              
   * @return periodStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-11-01T00:00Z", value = "Start date of the pay period Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              ")

  public OffsetDateTime getPeriodStartDate() {
    return periodStartDate;
  }


  public void setPeriodStartDate(OffsetDateTime periodStartDate) {
    
    
    
    this.periodStartDate = periodStartDate;
  }


  public PayStub2 periodEndDate(OffsetDateTime periodEndDate) {
    
    
    
    
    this.periodEndDate = periodEndDate;
    return this;
  }

   /**
   * End date of the pay period Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              
   * @return periodEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-11-01T00:00Z", value = "End date of the pay period Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              ")

  public OffsetDateTime getPeriodEndDate() {
    return periodEndDate;
  }


  public void setPeriodEndDate(OffsetDateTime periodEndDate) {
    
    
    
    this.periodEndDate = periodEndDate;
  }


  public PayStub2 grossAmount(Double grossAmount) {
    
    
    
    
    this.grossAmount = grossAmount;
    return this;
  }

  public PayStub2 grossAmount(Integer grossAmount) {
    
    
    
    
    this.grossAmount = grossAmount.doubleValue();
    return this;
  }

   /**
   * Employee&#39;s grosspay
   * @return grossAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4200", value = "Employee's grosspay")

  public Double getGrossAmount() {
    return grossAmount;
  }


  public void setGrossAmount(Double grossAmount) {
    
    
    
    this.grossAmount = grossAmount;
  }


  public PayStub2 netAmount(Double netAmount) {
    
    
    
    
    this.netAmount = netAmount;
    return this;
  }

  public PayStub2 netAmount(Integer netAmount) {
    
    
    
    
    this.netAmount = netAmount.doubleValue();
    return this;
  }

   /**
   * Employee&#39;s netpay
   * @return netAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3000", value = "Employee's netpay")

  public Double getNetAmount() {
    return netAmount;
  }


  public void setNetAmount(Double netAmount) {
    
    
    
    this.netAmount = netAmount;
  }


  public PayStub2 earnings(PayStubEarning2 earnings) {
    
    
    
    
    this.earnings = earnings;
    return this;
  }

   /**
   * Get earnings
   * @return earnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayStubEarning2 getEarnings() {
    return earnings;
  }


  public void setEarnings(PayStubEarning2 earnings) {
    
    
    
    this.earnings = earnings;
  }


  public PayStub2 taxes(PayStubTax2 taxes) {
    
    
    
    
    this.taxes = taxes;
    return this;
  }

   /**
   * Get taxes
   * @return taxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayStubTax2 getTaxes() {
    return taxes;
  }


  public void setTaxes(PayStubTax2 taxes) {
    
    
    
    this.taxes = taxes;
  }


  public PayStub2 deductions(PayStubDeduction2 deductions) {
    
    
    
    
    this.deductions = deductions;
    return this;
  }

   /**
   * Get deductions
   * @return deductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayStubDeduction2 getDeductions() {
    return deductions;
  }


  public void setDeductions(PayStubDeduction2 deductions) {
    
    
    
    this.deductions = deductions;
  }


  public PayStub2 employee(ResourceReference employee) {
    
    
    
    
    this.employee = employee;
    return this;
  }

   /**
   * Get employee
   * @return employee
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getEmployee() {
    return employee;
  }


  public void setEmployee(ResourceReference employee) {
    
    
    
    this.employee = employee;
  }


  public PayStub2 legalEntity(ResourceReference legalEntity) {
    
    
    
    
    this.legalEntity = legalEntity;
    return this;
  }

   /**
   * Get legalEntity
   * @return legalEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getLegalEntity() {
    return legalEntity;
  }


  public void setLegalEntity(ResourceReference legalEntity) {
    
    
    
    this.legalEntity = legalEntity;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PayStub2 instance itself
   */
  public PayStub2 putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayStub2 payStub2 = (PayStub2) o;
    return Objects.equals(this.employeeId, payStub2.employeeId) &&
        Objects.equals(this.clientId, payStub2.clientId) &&
        Objects.equals(this.checkNumber, payStub2.checkNumber) &&
        Objects.equals(this.plannerId, payStub2.plannerId) &&
        Objects.equals(this.checkType, payStub2.checkType) &&
        Objects.equals(this.periodStartDate, payStub2.periodStartDate) &&
        Objects.equals(this.periodEndDate, payStub2.periodEndDate) &&
        Objects.equals(this.grossAmount, payStub2.grossAmount) &&
        Objects.equals(this.netAmount, payStub2.netAmount) &&
        Objects.equals(this.earnings, payStub2.earnings) &&
        Objects.equals(this.taxes, payStub2.taxes) &&
        Objects.equals(this.deductions, payStub2.deductions) &&
        Objects.equals(this.employee, payStub2.employee) &&
        Objects.equals(this.legalEntity, payStub2.legalEntity)&&
        Objects.equals(this.additionalProperties, payStub2.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, clientId, checkNumber, plannerId, checkType, periodStartDate, periodEndDate, grossAmount, netAmount, earnings, taxes, deductions, employee, legalEntity, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayStub2 {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    plannerId: ").append(toIndentedString(plannerId)).append("\n");
    sb.append("    checkType: ").append(toIndentedString(checkType)).append("\n");
    sb.append("    periodStartDate: ").append(toIndentedString(periodStartDate)).append("\n");
    sb.append("    periodEndDate: ").append(toIndentedString(periodEndDate)).append("\n");
    sb.append("    grossAmount: ").append(toIndentedString(grossAmount)).append("\n");
    sb.append("    netAmount: ").append(toIndentedString(netAmount)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmployeeId");
    openapiFields.add("ClientId");
    openapiFields.add("CheckNumber");
    openapiFields.add("PlannerId");
    openapiFields.add("CheckType");
    openapiFields.add("PeriodStartDate");
    openapiFields.add("PeriodEndDate");
    openapiFields.add("GrossAmount");
    openapiFields.add("NetAmount");
    openapiFields.add("Earnings");
    openapiFields.add("Taxes");
    openapiFields.add("Deductions");
    openapiFields.add("Employee");
    openapiFields.add("LegalEntity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PayStub2
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PayStub2.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayStub2 is not found in the empty JSON string", PayStub2.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("EmployeeId") != null && !jsonObj.get("EmployeeId").isJsonNull()) && !jsonObj.get("EmployeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeId").toString()));
      }
      if ((jsonObj.get("PlannerId") != null && !jsonObj.get("PlannerId").isJsonNull()) && !jsonObj.get("PlannerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlannerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlannerId").toString()));
      }
      // validate the optional field `Earnings`
      if (jsonObj.get("Earnings") != null && !jsonObj.get("Earnings").isJsonNull()) {
        PayStubEarning2.validateJsonObject(jsonObj.getAsJsonObject("Earnings"));
      }
      // validate the optional field `Taxes`
      if (jsonObj.get("Taxes") != null && !jsonObj.get("Taxes").isJsonNull()) {
        PayStubTax2.validateJsonObject(jsonObj.getAsJsonObject("Taxes"));
      }
      // validate the optional field `Deductions`
      if (jsonObj.get("Deductions") != null && !jsonObj.get("Deductions").isJsonNull()) {
        PayStubDeduction2.validateJsonObject(jsonObj.getAsJsonObject("Deductions"));
      }
      // validate the optional field `Employee`
      if (jsonObj.get("Employee") != null && !jsonObj.get("Employee").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("Employee"));
      }
      // validate the optional field `LegalEntity`
      if (jsonObj.get("LegalEntity") != null && !jsonObj.get("LegalEntity").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("LegalEntity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayStub2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayStub2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayStub2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayStub2.class));

       return (TypeAdapter<T>) new TypeAdapter<PayStub2>() {
           @Override
           public void write(JsonWriter out, PayStub2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PayStub2 read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PayStub2 instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PayStub2 given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PayStub2
  * @throws IOException if the JSON string is invalid with respect to PayStub2
  */
  public static PayStub2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayStub2.class);
  }

 /**
  * Convert an instance of PayStub2 to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

