/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PayFrequency;
import com.konfigthis.client.model.ResourceReference;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The Legal Entity Earning model represents Legal Entity level Earning information.
 */
@ApiModel(description = "The Legal Entity Earning model represents Legal Entity level Earning information.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class LegalEntityEarning {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_GLOBAL_EARNING_CODE = "GlobalEarningCode";
  @SerializedName(SERIALIZED_NAME_GLOBAL_EARNING_CODE)
  private String globalEarningCode;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HOURS = "Hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Double hours;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Double amount;

  public static final String SERIALIZED_NAME_RATE = "Rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private Double rate;

  public static final String SERIALIZED_NAME_FREQUENCY = "Frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private PayFrequency frequency;

  public static final String SERIALIZED_NAME_IS_ON_W2 = "IsOnW2";
  @SerializedName(SERIALIZED_NAME_IS_ON_W2)
  private Boolean isOnW2;

  public static final String SERIALIZED_NAME_ON_HOLD = "OnHold";
  @SerializedName(SERIALIZED_NAME_ON_HOLD)
  private Boolean onHold;

  public static final String SERIALIZED_NAME_EFFECTIVE_START_DATE = "EffectiveStartDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_START_DATE)
  private OffsetDateTime effectiveStartDate;

  public static final String SERIALIZED_NAME_FACTOR = "Factor";
  @SerializedName(SERIALIZED_NAME_FACTOR)
  private Double factor;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "LegalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  private ResourceReference legalEntity;

  public LegalEntityEarning() {
  }

  public LegalEntityEarning id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the legal entity&#39;s earning in Paycor&#39;s system. Generated by Paycor.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "d0f18d42-21cb-0000-0000-0000fb0d0300", value = "Unique identifier of the legal entity's earning in Paycor's system. Generated by Paycor.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public LegalEntityEarning code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Descriptive legal entity earning identifier set at the legal entity or tenant level.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OT", value = "Descriptive legal entity earning identifier set at the legal entity or tenant level.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public LegalEntityEarning globalEarningCode(String globalEarningCode) {
    
    
    
    
    this.globalEarningCode = globalEarningCode;
    return this;
  }

   /**
   * Global descriptive legal entity earning identifier.
   * @return globalEarningCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OT", value = "Global descriptive legal entity earning identifier.")

  public String getGlobalEarningCode() {
    return globalEarningCode;
  }


  public void setGlobalEarningCode(String globalEarningCode) {
    
    
    
    this.globalEarningCode = globalEarningCode;
  }


  public LegalEntityEarning description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the legal entity&#39;s earning code.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Overtime", value = "Description of the legal entity's earning code.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public LegalEntityEarning hours(Double hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

  public LegalEntityEarning hours(Integer hours) {
    
    
    
    
    this.hours = hours.doubleValue();
    return this;
  }

   /**
   * Total hours worked for legal entity&#39;s earning.
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40.4", value = "Total hours worked for legal entity's earning.")

  public Double getHours() {
    return hours;
  }


  public void setHours(Double hours) {
    
    
    
    this.hours = hours;
  }


  public LegalEntityEarning amount(Double amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

  public LegalEntityEarning amount(Integer amount) {
    
    
    
    
    this.amount = amount.doubleValue();
    return this;
  }

   /**
   * Fixed, recurring dollar amount.             
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123.45", value = "Fixed, recurring dollar amount.             ")

  public Double getAmount() {
    return amount;
  }


  public void setAmount(Double amount) {
    
    
    
    this.amount = amount;
  }


  public LegalEntityEarning rate(Double rate) {
    
    
    
    
    this.rate = rate;
    return this;
  }

  public LegalEntityEarning rate(Integer rate) {
    
    
    
    
    this.rate = rate.doubleValue();
    return this;
  }

   /**
   * Percentage value set by the user.             
   * @return rate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.25", value = "Percentage value set by the user.             ")

  public Double getRate() {
    return rate;
  }


  public void setRate(Double rate) {
    
    
    
    this.rate = rate;
  }


  public LegalEntityEarning frequency(PayFrequency frequency) {
    
    
    
    
    this.frequency = frequency;
    return this;
  }

   /**
   * Get frequency
   * @return frequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PayFrequency getFrequency() {
    return frequency;
  }


  public void setFrequency(PayFrequency frequency) {
    
    
    
    this.frequency = frequency;
  }


  public LegalEntityEarning isOnW2(Boolean isOnW2) {
    
    
    
    
    this.isOnW2 = isOnW2;
    return this;
  }

   /**
   * Whether legal entity&#39;s earning shows up on a W-2 tax form.             
   * @return isOnW2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether legal entity's earning shows up on a W-2 tax form.             ")

  public Boolean getIsOnW2() {
    return isOnW2;
  }


  public void setIsOnW2(Boolean isOnW2) {
    
    
    
    this.isOnW2 = isOnW2;
  }


  public LegalEntityEarning onHold(Boolean onHold) {
    
    
    
    
    this.onHold = onHold;
    return this;
  }

   /**
   * Whether legal entity&#39;s earning should appear on paychecks.             
   * @return onHold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether legal entity's earning should appear on paychecks.             ")

  public Boolean getOnHold() {
    return onHold;
  }


  public void setOnHold(Boolean onHold) {
    
    
    
    this.onHold = onHold;
  }


  public LegalEntityEarning effectiveStartDate(OffsetDateTime effectiveStartDate) {
    
    
    
    
    this.effectiveStartDate = effectiveStartDate;
    return this;
  }

   /**
   * Date the legal entity earning take effect. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              
   * @return effectiveStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2019-11-01T00:00Z", value = "Date the legal entity earning take effect. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)              ")

  public OffsetDateTime getEffectiveStartDate() {
    return effectiveStartDate;
  }


  public void setEffectiveStartDate(OffsetDateTime effectiveStartDate) {
    
    
    
    this.effectiveStartDate = effectiveStartDate;
  }


  public LegalEntityEarning factor(Double factor) {
    
    
    
    
    this.factor = factor;
    return this;
  }

  public LegalEntityEarning factor(Integer factor) {
    
    
    
    
    this.factor = factor.doubleValue();
    return this;
  }

   /**
   * Value set by the user to multiply with the rate.             
   * @return factor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.5", value = "Value set by the user to multiply with the rate.             ")

  public Double getFactor() {
    return factor;
  }


  public void setFactor(Double factor) {
    
    
    
    this.factor = factor;
  }


  public LegalEntityEarning legalEntity(ResourceReference legalEntity) {
    
    
    
    
    this.legalEntity = legalEntity;
    return this;
  }

   /**
   * Get legalEntity
   * @return legalEntity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getLegalEntity() {
    return legalEntity;
  }


  public void setLegalEntity(ResourceReference legalEntity) {
    
    
    
    this.legalEntity = legalEntity;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the LegalEntityEarning instance itself
   */
  public LegalEntityEarning putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalEntityEarning legalEntityEarning = (LegalEntityEarning) o;
    return Objects.equals(this.id, legalEntityEarning.id) &&
        Objects.equals(this.code, legalEntityEarning.code) &&
        Objects.equals(this.globalEarningCode, legalEntityEarning.globalEarningCode) &&
        Objects.equals(this.description, legalEntityEarning.description) &&
        Objects.equals(this.hours, legalEntityEarning.hours) &&
        Objects.equals(this.amount, legalEntityEarning.amount) &&
        Objects.equals(this.rate, legalEntityEarning.rate) &&
        Objects.equals(this.frequency, legalEntityEarning.frequency) &&
        Objects.equals(this.isOnW2, legalEntityEarning.isOnW2) &&
        Objects.equals(this.onHold, legalEntityEarning.onHold) &&
        Objects.equals(this.effectiveStartDate, legalEntityEarning.effectiveStartDate) &&
        Objects.equals(this.factor, legalEntityEarning.factor) &&
        Objects.equals(this.legalEntity, legalEntityEarning.legalEntity)&&
        Objects.equals(this.additionalProperties, legalEntityEarning.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, globalEarningCode, description, hours, amount, rate, frequency, isOnW2, onHold, effectiveStartDate, factor, legalEntity, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalEntityEarning {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    globalEarningCode: ").append(toIndentedString(globalEarningCode)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    isOnW2: ").append(toIndentedString(isOnW2)).append("\n");
    sb.append("    onHold: ").append(toIndentedString(onHold)).append("\n");
    sb.append("    effectiveStartDate: ").append(toIndentedString(effectiveStartDate)).append("\n");
    sb.append("    factor: ").append(toIndentedString(factor)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Code");
    openapiFields.add("GlobalEarningCode");
    openapiFields.add("Description");
    openapiFields.add("Hours");
    openapiFields.add("Amount");
    openapiFields.add("Rate");
    openapiFields.add("Frequency");
    openapiFields.add("IsOnW2");
    openapiFields.add("OnHold");
    openapiFields.add("EffectiveStartDate");
    openapiFields.add("Factor");
    openapiFields.add("LegalEntity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LegalEntityEarning
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LegalEntityEarning.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalEntityEarning is not found in the empty JSON string", LegalEntityEarning.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("Code").isJsonNull() && (jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if (!jsonObj.get("GlobalEarningCode").isJsonNull() && (jsonObj.get("GlobalEarningCode") != null && !jsonObj.get("GlobalEarningCode").isJsonNull()) && !jsonObj.get("GlobalEarningCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GlobalEarningCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GlobalEarningCode").toString()));
      }
      if (!jsonObj.get("Description").isJsonNull() && (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `LegalEntity`
      if (jsonObj.get("LegalEntity") != null && !jsonObj.get("LegalEntity").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("LegalEntity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalEntityEarning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalEntityEarning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalEntityEarning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalEntityEarning.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalEntityEarning>() {
           @Override
           public void write(JsonWriter out, LegalEntityEarning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalEntityEarning read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             LegalEntityEarning instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LegalEntityEarning given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LegalEntityEarning
  * @throws IOException if the JSON string is invalid with respect to LegalEntityEarning
  */
  public static LegalEntityEarning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalEntityEarning.class);
  }

 /**
  * Convert an instance of LegalEntityEarning to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

