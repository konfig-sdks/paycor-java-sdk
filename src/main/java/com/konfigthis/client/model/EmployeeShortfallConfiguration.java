/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Employee&#39;s accrual short fall configuration model.
 */
@ApiModel(description = "Employee's accrual short fall configuration model.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeShortfallConfiguration {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "EmployeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_TIME_OFF_TYPE_CODE = "TimeOffTypeCode";
  @SerializedName(SERIALIZED_NAME_TIME_OFF_TYPE_CODE)
  private String timeOffTypeCode;

  public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "AvailableBalance";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
  private Double availableBalance;

  public static final String SERIALIZED_NAME_SHORT_FALL_ALARM_OPTION = "ShortFallAlarmOption";
  @SerializedName(SERIALIZED_NAME_SHORT_FALL_ALARM_OPTION)
  private String shortFallAlarmOption;

  public static final String SERIALIZED_NAME_EARNING_CODES = "EarningCodes";
  @SerializedName(SERIALIZED_NAME_EARNING_CODES)
  private List<String> earningCodes = null;

  public static final String SERIALIZED_NAME_TIME_OFF_HOURS = "TimeOffHours";
  @SerializedName(SERIALIZED_NAME_TIME_OFF_HOURS)
  private Double timeOffHours;

  public EmployeeShortfallConfiguration() {
  }

  public EmployeeShortfallConfiguration employeeId(String employeeId) {
    
    
    if (employeeId != null && employeeId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for employeeId. Length must be greater than or equal to 1.");
    }
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Unique identifier of the employee in Paycor&#39;s system. Generated by Paycor.
   * @return employeeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "5245ae3d-e570-0000-0000-000066000000", required = true, value = "Unique identifier of the employee in Paycor's system. Generated by Paycor.")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    if (employeeId != null && employeeId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for employeeId. Length must be greater than or equal to 1.");
    }
    this.employeeId = employeeId;
  }


  public EmployeeShortfallConfiguration startDate(OffsetDateTime startDate) {
    
    
    if (startDate != null && startDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for startDate. Length must be greater than or equal to 1.");
    }
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Date range filter.
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date range filter.")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    if (startDate != null && startDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for startDate. Length must be greater than or equal to 1.");
    }
    this.startDate = startDate;
  }


  public EmployeeShortfallConfiguration endDate(OffsetDateTime endDate) {
    
    
    if (endDate != null && endDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for endDate. Length must be greater than or equal to 1.");
    }
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Date range filter.
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date range filter.")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    
    
    if (endDate != null && endDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for endDate. Length must be greater than or equal to 1.");
    }
    this.endDate = endDate;
  }


  public EmployeeShortfallConfiguration timeOffTypeCode(String timeOffTypeCode) {
    
    
    
    
    this.timeOffTypeCode = timeOffTypeCode;
    return this;
  }

   /**
   * Code for the time off plan (example PTO, Holiday, Personal etc.) Specific to Reseller’s plan.
   * @return timeOffTypeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PTO", value = "Code for the time off plan (example PTO, Holiday, Personal etc.) Specific to Reseller’s plan.")

  public String getTimeOffTypeCode() {
    return timeOffTypeCode;
  }


  public void setTimeOffTypeCode(String timeOffTypeCode) {
    
    
    
    this.timeOffTypeCode = timeOffTypeCode;
  }


  public EmployeeShortfallConfiguration availableBalance(Double availableBalance) {
    
    
    
    
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Amount of hours available for an Employee for the particular TimeOffTypeCode.
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "6", value = "Amount of hours available for an Employee for the particular TimeOffTypeCode.")

  public Double getAvailableBalance() {
    return availableBalance;
  }


  public void setAvailableBalance(Double availableBalance) {
    
    
    
    this.availableBalance = availableBalance;
  }


  public EmployeeShortfallConfiguration shortFallAlarmOption(String shortFallAlarmOption) {
    
    
    
    
    this.shortFallAlarmOption = shortFallAlarmOption;
    return this;
  }

   /**
   * Payroll&#39;s Short fall alarm option configured for the specific Employee.
   * @return shortFallAlarmOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Payroll's Short fall alarm option configured for the specific Employee.")

  public String getShortFallAlarmOption() {
    return shortFallAlarmOption;
  }


  public void setShortFallAlarmOption(String shortFallAlarmOption) {
    
    
    
    this.shortFallAlarmOption = shortFallAlarmOption;
  }


  public EmployeeShortfallConfiguration earningCodes(List<String> earningCodes) {
    
    
    
    
    this.earningCodes = earningCodes;
    return this;
  }

  public EmployeeShortfallConfiguration addEarningCodesItem(String earningCodesItem) {
    if (this.earningCodes == null) {
      this.earningCodes = new ArrayList<>();
    }
    this.earningCodes.add(earningCodesItem);
    return this;
  }

   /**
   * List of earnings codes.
   * @return earningCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of earnings codes.")

  public List<String> getEarningCodes() {
    return earningCodes;
  }


  public void setEarningCodes(List<String> earningCodes) {
    
    
    
    this.earningCodes = earningCodes;
  }


  public EmployeeShortfallConfiguration timeOffHours(Double timeOffHours) {
    
    
    
    
    this.timeOffHours = timeOffHours;
    return this;
  }

   /**
   * Amount of hours for which an Employee has time off hours per TimeOffTypeCode after the start date of the short fall alarm option.
   * @return timeOffHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "15", value = "Amount of hours for which an Employee has time off hours per TimeOffTypeCode after the start date of the short fall alarm option.")

  public Double getTimeOffHours() {
    return timeOffHours;
  }


  public void setTimeOffHours(Double timeOffHours) {
    
    
    
    this.timeOffHours = timeOffHours;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeShortfallConfiguration instance itself
   */
  public EmployeeShortfallConfiguration putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeShortfallConfiguration employeeShortfallConfiguration = (EmployeeShortfallConfiguration) o;
    return Objects.equals(this.employeeId, employeeShortfallConfiguration.employeeId) &&
        Objects.equals(this.startDate, employeeShortfallConfiguration.startDate) &&
        Objects.equals(this.endDate, employeeShortfallConfiguration.endDate) &&
        Objects.equals(this.timeOffTypeCode, employeeShortfallConfiguration.timeOffTypeCode) &&
        Objects.equals(this.availableBalance, employeeShortfallConfiguration.availableBalance) &&
        Objects.equals(this.shortFallAlarmOption, employeeShortfallConfiguration.shortFallAlarmOption) &&
        Objects.equals(this.earningCodes, employeeShortfallConfiguration.earningCodes) &&
        Objects.equals(this.timeOffHours, employeeShortfallConfiguration.timeOffHours)&&
        Objects.equals(this.additionalProperties, employeeShortfallConfiguration.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, startDate, endDate, timeOffTypeCode, availableBalance, shortFallAlarmOption, earningCodes, timeOffHours, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeShortfallConfiguration {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    timeOffTypeCode: ").append(toIndentedString(timeOffTypeCode)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    shortFallAlarmOption: ").append(toIndentedString(shortFallAlarmOption)).append("\n");
    sb.append("    earningCodes: ").append(toIndentedString(earningCodes)).append("\n");
    sb.append("    timeOffHours: ").append(toIndentedString(timeOffHours)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmployeeId");
    openapiFields.add("StartDate");
    openapiFields.add("EndDate");
    openapiFields.add("TimeOffTypeCode");
    openapiFields.add("AvailableBalance");
    openapiFields.add("ShortFallAlarmOption");
    openapiFields.add("EarningCodes");
    openapiFields.add("TimeOffHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EmployeeId");
    openapiRequiredFields.add("StartDate");
    openapiRequiredFields.add("EndDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeShortfallConfiguration
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeShortfallConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeShortfallConfiguration is not found in the empty JSON string", EmployeeShortfallConfiguration.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmployeeShortfallConfiguration.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("EmployeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployeeId").toString()));
      }
      if (!jsonObj.get("TimeOffTypeCode").isJsonNull() && (jsonObj.get("TimeOffTypeCode") != null && !jsonObj.get("TimeOffTypeCode").isJsonNull()) && !jsonObj.get("TimeOffTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeOffTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeOffTypeCode").toString()));
      }
      if (!jsonObj.get("ShortFallAlarmOption").isJsonNull() && (jsonObj.get("ShortFallAlarmOption") != null && !jsonObj.get("ShortFallAlarmOption").isJsonNull()) && !jsonObj.get("ShortFallAlarmOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShortFallAlarmOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShortFallAlarmOption").toString()));
      }
      // ensure the optional json data is an array if present (nullable)
      if (jsonObj.get("EarningCodes") != null && !jsonObj.get("EarningCodes").isJsonNull() && !jsonObj.get("EarningCodes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EarningCodes` to be an array in the JSON string or null but got `%s`", jsonObj.get("EarningCodes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeShortfallConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeShortfallConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeShortfallConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeShortfallConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeShortfallConfiguration>() {
           @Override
           public void write(JsonWriter out, EmployeeShortfallConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeShortfallConfiguration read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeShortfallConfiguration instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeShortfallConfiguration given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeShortfallConfiguration
  * @throws IOException if the JSON string is invalid with respect to EmployeeShortfallConfiguration
  */
  public static EmployeeShortfallConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeShortfallConfiguration.class);
  }

 /**
  * Convert an instance of EmployeeShortfallConfiguration to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

