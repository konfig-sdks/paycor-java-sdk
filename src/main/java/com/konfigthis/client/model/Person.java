/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BenefitData;
import com.konfigthis.client.model.DemographicData;
import com.konfigthis.client.model.EmergencyContactData;
import com.konfigthis.client.model.EmployeeAssignment;
import com.konfigthis.client.model.MilitaryData;
import com.konfigthis.client.model.PersonAddress;
import com.konfigthis.client.model.PersonEmail;
import com.konfigthis.client.model.Phone;
import com.konfigthis.client.model.Prefix;
import com.konfigthis.client.model.ResourceReference;
import com.konfigthis.client.model.SocialMediaData;
import com.konfigthis.client.model.Suffix;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Each Person is associated with one or more Employees within one Tenant. An Employee works for a single Legal Entity within the Tenant.  If a person works for multiple Legal Entities within a Tenant, they will be associated with multiple Employee records - but will only have a single Person record in the Paycor system. Provides links to the Person&#39;s associated Employee, Legal Entity and Tenant information.             
 */
@ApiModel(description = "Each Person is associated with one or more Employees within one Tenant. An Employee works for a single Legal Entity within the Tenant.  If a person works for multiple Legal Entities within a Tenant, they will be associated with multiple Employee records - but will only have a single Person record in the Paycor system. Provides links to the Person's associated Employee, Legal Entity and Tenant information.             ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Person {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PREFIX = "Prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private Prefix prefix;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "MiddleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_SUFFIX = "Suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private Suffix suffix;

  public static final String SERIALIZED_NAME_LEGAL_FIRST_NAME = "LegalFirstName";
  @SerializedName(SERIALIZED_NAME_LEGAL_FIRST_NAME)
  private String legalFirstName;

  public static final String SERIALIZED_NAME_LEGAL_LAST_NAME = "LegalLastName";
  @SerializedName(SERIALIZED_NAME_LEGAL_LAST_NAME)
  private String legalLastName;

  public static final String SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER = "SocialSecurityNumber";
  @SerializedName(SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER)
  private String socialSecurityNumber;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private PersonEmail email;

  public static final String SERIALIZED_NAME_DEMOGRAPHIC_DATA = "DemographicData";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHIC_DATA)
  private DemographicData demographicData;

  public static final String SERIALIZED_NAME_BENEFIT_DATA = "BenefitData";
  @SerializedName(SERIALIZED_NAME_BENEFIT_DATA)
  private BenefitData benefitData;

  public static final String SERIALIZED_NAME_EMERGENCY_CONTACT_DATA = "EmergencyContactData";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_CONTACT_DATA)
  private List<EmergencyContactData> emergencyContactData = null;

  public static final String SERIALIZED_NAME_MILITARY_DATA = "MilitaryData";
  @SerializedName(SERIALIZED_NAME_MILITARY_DATA)
  private MilitaryData militaryData;

  public static final String SERIALIZED_NAME_SOCIAL_MEDIA_DATA = "SocialMediaData";
  @SerializedName(SERIALIZED_NAME_SOCIAL_MEDIA_DATA)
  private List<SocialMediaData> socialMediaData = null;

  public static final String SERIALIZED_NAME_EMPLOYEE_ASSIGNMENTS = "EmployeeAssignments";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ASSIGNMENTS)
  private List<EmployeeAssignment> employeeAssignments = null;

  public static final String SERIALIZED_NAME_ADDRESSES = "Addresses";
  @SerializedName(SERIALIZED_NAME_ADDRESSES)
  private List<PersonAddress> addresses = null;

  public static final String SERIALIZED_NAME_PHONES = "Phones";
  @SerializedName(SERIALIZED_NAME_PHONES)
  private List<Phone> phones = null;

  public static final String SERIALIZED_NAME_TENANTS = "Tenants";
  @SerializedName(SERIALIZED_NAME_TENANTS)
  private ResourceReference tenants;

  public Person() {
  }

  public Person id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the person in Paycor&#39;s system. Generated by Paycor.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "df5566ef-196c-0000-0000-0007d5268Sa2", value = "Unique identifier of the person in Paycor's system. Generated by Paycor.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Person prefix(Prefix prefix) {
    
    
    
    
    this.prefix = prefix;
    return this;
  }

   /**
   * Get prefix
   * @return prefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Prefix getPrefix() {
    return prefix;
  }


  public void setPrefix(Prefix prefix) {
    
    
    
    this.prefix = prefix;
  }


  public Person firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the person. 
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Edwin", value = "First name of the person. ")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public Person middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Middle name of the person.
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Powell", value = "Middle name of the person.")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public Person lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the person.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hubble", value = "Last name of the person.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public Person suffix(Suffix suffix) {
    
    
    
    
    this.suffix = suffix;
    return this;
  }

   /**
   * Get suffix
   * @return suffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Suffix getSuffix() {
    return suffix;
  }


  public void setSuffix(Suffix suffix) {
    
    
    
    this.suffix = suffix;
  }


  public Person legalFirstName(String legalFirstName) {
    
    
    
    
    this.legalFirstName = legalFirstName;
    return this;
  }

   /**
   * First name used on the person&#39;s W-2 tax form.             
   * @return legalFirstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Lewis", value = "First name used on the person's W-2 tax form.             ")

  public String getLegalFirstName() {
    return legalFirstName;
  }


  public void setLegalFirstName(String legalFirstName) {
    
    
    
    this.legalFirstName = legalFirstName;
  }


  public Person legalLastName(String legalLastName) {
    
    
    
    
    this.legalLastName = legalLastName;
    return this;
  }

   /**
   * Last name used on the person&#39;s W-2 tax form.             
   * @return legalLastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Carroll", value = "Last name used on the person's W-2 tax form.             ")

  public String getLegalLastName() {
    return legalLastName;
  }


  public void setLegalLastName(String legalLastName) {
    
    
    
    this.legalLastName = legalLastName;
  }


  public Person socialSecurityNumber(String socialSecurityNumber) {
    
    
    
    
    this.socialSecurityNumber = socialSecurityNumber;
    return this;
  }

   /**
   * Social security number of the person.
   * @return socialSecurityNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "555555555", value = "Social security number of the person.")

  public String getSocialSecurityNumber() {
    return socialSecurityNumber;
  }


  public void setSocialSecurityNumber(String socialSecurityNumber) {
    
    
    
    this.socialSecurityNumber = socialSecurityNumber;
  }


  public Person email(PersonEmail email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PersonEmail getEmail() {
    return email;
  }


  public void setEmail(PersonEmail email) {
    
    
    
    this.email = email;
  }


  public Person demographicData(DemographicData demographicData) {
    
    
    
    
    this.demographicData = demographicData;
    return this;
  }

   /**
   * Get demographicData
   * @return demographicData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DemographicData getDemographicData() {
    return demographicData;
  }


  public void setDemographicData(DemographicData demographicData) {
    
    
    
    this.demographicData = demographicData;
  }


  public Person benefitData(BenefitData benefitData) {
    
    
    
    
    this.benefitData = benefitData;
    return this;
  }

   /**
   * Get benefitData
   * @return benefitData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BenefitData getBenefitData() {
    return benefitData;
  }


  public void setBenefitData(BenefitData benefitData) {
    
    
    
    this.benefitData = benefitData;
  }


  public Person emergencyContactData(List<EmergencyContactData> emergencyContactData) {
    
    
    
    
    this.emergencyContactData = emergencyContactData;
    return this;
  }

  public Person addEmergencyContactDataItem(EmergencyContactData emergencyContactDataItem) {
    if (this.emergencyContactData == null) {
      this.emergencyContactData = new ArrayList<>();
    }
    this.emergencyContactData.add(emergencyContactDataItem);
    return this;
  }

   /**
   * List of type EmergencyContactData containing a Person&#39;s emergency contacts data. This data will only be available for Get Person (returns single Person object) APIs and will always be null for Get Persons (returns list of Person) APIs.
   * @return emergencyContactData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of type EmergencyContactData containing a Person's emergency contacts data. This data will only be available for Get Person (returns single Person object) APIs and will always be null for Get Persons (returns list of Person) APIs.")

  public List<EmergencyContactData> getEmergencyContactData() {
    return emergencyContactData;
  }


  public void setEmergencyContactData(List<EmergencyContactData> emergencyContactData) {
    
    
    
    this.emergencyContactData = emergencyContactData;
  }


  public Person militaryData(MilitaryData militaryData) {
    
    
    
    
    this.militaryData = militaryData;
    return this;
  }

   /**
   * Get militaryData
   * @return militaryData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MilitaryData getMilitaryData() {
    return militaryData;
  }


  public void setMilitaryData(MilitaryData militaryData) {
    
    
    
    this.militaryData = militaryData;
  }


  public Person socialMediaData(List<SocialMediaData> socialMediaData) {
    
    
    
    
    this.socialMediaData = socialMediaData;
    return this;
  }

  public Person addSocialMediaDataItem(SocialMediaData socialMediaDataItem) {
    if (this.socialMediaData == null) {
      this.socialMediaData = new ArrayList<>();
    }
    this.socialMediaData.add(socialMediaDataItem);
    return this;
  }

   /**
   * List of type SocialMediaData containing the Person&#39;s social media information.              
   * @return socialMediaData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of type SocialMediaData containing the Person's social media information.              ")

  public List<SocialMediaData> getSocialMediaData() {
    return socialMediaData;
  }


  public void setSocialMediaData(List<SocialMediaData> socialMediaData) {
    
    
    
    this.socialMediaData = socialMediaData;
  }


  public Person employeeAssignments(List<EmployeeAssignment> employeeAssignments) {
    
    
    
    
    this.employeeAssignments = employeeAssignments;
    return this;
  }

  public Person addEmployeeAssignmentsItem(EmployeeAssignment employeeAssignmentsItem) {
    if (this.employeeAssignments == null) {
      this.employeeAssignments = new ArrayList<>();
    }
    this.employeeAssignments.add(employeeAssignmentsItem);
    return this;
  }

   /**
   * List of type EmployeeAssignment containing the person&#39;s employee assignments.             
   * @return employeeAssignments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of type EmployeeAssignment containing the person's employee assignments.             ")

  public List<EmployeeAssignment> getEmployeeAssignments() {
    return employeeAssignments;
  }


  public void setEmployeeAssignments(List<EmployeeAssignment> employeeAssignments) {
    
    
    
    this.employeeAssignments = employeeAssignments;
  }


  public Person addresses(List<PersonAddress> addresses) {
    
    
    
    
    this.addresses = addresses;
    return this;
  }

  public Person addAddressesItem(PersonAddress addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * List of type Address containing the person&#39;s addresses.             
   * @return addresses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of type Address containing the person's addresses.             ")

  public List<PersonAddress> getAddresses() {
    return addresses;
  }


  public void setAddresses(List<PersonAddress> addresses) {
    
    
    
    this.addresses = addresses;
  }


  public Person phones(List<Phone> phones) {
    
    
    
    
    this.phones = phones;
    return this;
  }

  public Person addPhonesItem(Phone phonesItem) {
    if (this.phones == null) {
      this.phones = new ArrayList<>();
    }
    this.phones.add(phonesItem);
    return this;
  }

   /**
   * List of type Phone containing the person&#39;s phone numbers.             
   * @return phones
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of type Phone containing the person's phone numbers.             ")

  public List<Phone> getPhones() {
    return phones;
  }


  public void setPhones(List<Phone> phones) {
    
    
    
    this.phones = phones;
  }


  public Person tenants(ResourceReference tenants) {
    
    
    
    
    this.tenants = tenants;
    return this;
  }

   /**
   * Get tenants
   * @return tenants
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ResourceReference getTenants() {
    return tenants;
  }


  public void setTenants(ResourceReference tenants) {
    
    
    
    this.tenants = tenants;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Person instance itself
   */
  public Person putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Person person = (Person) o;
    return Objects.equals(this.id, person.id) &&
        Objects.equals(this.prefix, person.prefix) &&
        Objects.equals(this.firstName, person.firstName) &&
        Objects.equals(this.middleName, person.middleName) &&
        Objects.equals(this.lastName, person.lastName) &&
        Objects.equals(this.suffix, person.suffix) &&
        Objects.equals(this.legalFirstName, person.legalFirstName) &&
        Objects.equals(this.legalLastName, person.legalLastName) &&
        Objects.equals(this.socialSecurityNumber, person.socialSecurityNumber) &&
        Objects.equals(this.email, person.email) &&
        Objects.equals(this.demographicData, person.demographicData) &&
        Objects.equals(this.benefitData, person.benefitData) &&
        Objects.equals(this.emergencyContactData, person.emergencyContactData) &&
        Objects.equals(this.militaryData, person.militaryData) &&
        Objects.equals(this.socialMediaData, person.socialMediaData) &&
        Objects.equals(this.employeeAssignments, person.employeeAssignments) &&
        Objects.equals(this.addresses, person.addresses) &&
        Objects.equals(this.phones, person.phones) &&
        Objects.equals(this.tenants, person.tenants)&&
        Objects.equals(this.additionalProperties, person.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, prefix, firstName, middleName, lastName, suffix, legalFirstName, legalLastName, socialSecurityNumber, email, demographicData, benefitData, emergencyContactData, militaryData, socialMediaData, employeeAssignments, addresses, phones, tenants, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Person {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    legalFirstName: ").append(toIndentedString(legalFirstName)).append("\n");
    sb.append("    legalLastName: ").append(toIndentedString(legalLastName)).append("\n");
    sb.append("    socialSecurityNumber: ").append(toIndentedString(socialSecurityNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    demographicData: ").append(toIndentedString(demographicData)).append("\n");
    sb.append("    benefitData: ").append(toIndentedString(benefitData)).append("\n");
    sb.append("    emergencyContactData: ").append(toIndentedString(emergencyContactData)).append("\n");
    sb.append("    militaryData: ").append(toIndentedString(militaryData)).append("\n");
    sb.append("    socialMediaData: ").append(toIndentedString(socialMediaData)).append("\n");
    sb.append("    employeeAssignments: ").append(toIndentedString(employeeAssignments)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Prefix");
    openapiFields.add("FirstName");
    openapiFields.add("MiddleName");
    openapiFields.add("LastName");
    openapiFields.add("Suffix");
    openapiFields.add("LegalFirstName");
    openapiFields.add("LegalLastName");
    openapiFields.add("SocialSecurityNumber");
    openapiFields.add("Email");
    openapiFields.add("DemographicData");
    openapiFields.add("BenefitData");
    openapiFields.add("EmergencyContactData");
    openapiFields.add("MilitaryData");
    openapiFields.add("SocialMediaData");
    openapiFields.add("EmployeeAssignments");
    openapiFields.add("Addresses");
    openapiFields.add("Phones");
    openapiFields.add("Tenants");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Person
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Person.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Person is not found in the empty JSON string", Person.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("FirstName").isJsonNull() && (jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if (!jsonObj.get("MiddleName").isJsonNull() && (jsonObj.get("MiddleName") != null && !jsonObj.get("MiddleName").isJsonNull()) && !jsonObj.get("MiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleName").toString()));
      }
      if (!jsonObj.get("LastName").isJsonNull() && (jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if (!jsonObj.get("LegalFirstName").isJsonNull() && (jsonObj.get("LegalFirstName") != null && !jsonObj.get("LegalFirstName").isJsonNull()) && !jsonObj.get("LegalFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalFirstName").toString()));
      }
      if (!jsonObj.get("LegalLastName").isJsonNull() && (jsonObj.get("LegalLastName") != null && !jsonObj.get("LegalLastName").isJsonNull()) && !jsonObj.get("LegalLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LegalLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LegalLastName").toString()));
      }
      if (!jsonObj.get("SocialSecurityNumber").isJsonNull() && (jsonObj.get("SocialSecurityNumber") != null && !jsonObj.get("SocialSecurityNumber").isJsonNull()) && !jsonObj.get("SocialSecurityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SocialSecurityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SocialSecurityNumber").toString()));
      }
      // validate the optional field `Email`
      if (jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) {
        PersonEmail.validateJsonObject(jsonObj.getAsJsonObject("Email"));
      }
      // validate the optional field `DemographicData`
      if (jsonObj.get("DemographicData") != null && !jsonObj.get("DemographicData").isJsonNull()) {
        DemographicData.validateJsonObject(jsonObj.getAsJsonObject("DemographicData"));
      }
      // validate the optional field `BenefitData`
      if (jsonObj.get("BenefitData") != null && !jsonObj.get("BenefitData").isJsonNull()) {
        BenefitData.validateJsonObject(jsonObj.getAsJsonObject("BenefitData"));
      }
      if (jsonObj.get("EmergencyContactData") != null && !jsonObj.get("EmergencyContactData").isJsonNull()) {
        JsonArray jsonArrayemergencyContactData = jsonObj.getAsJsonArray("EmergencyContactData");
        if (jsonArrayemergencyContactData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EmergencyContactData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EmergencyContactData` to be an array in the JSON string but got `%s`", jsonObj.get("EmergencyContactData").toString()));
          }

          // validate the optional field `EmergencyContactData` (array)
          for (int i = 0; i < jsonArrayemergencyContactData.size(); i++) {
            EmergencyContactData.validateJsonObject(jsonArrayemergencyContactData.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `MilitaryData`
      if (jsonObj.get("MilitaryData") != null && !jsonObj.get("MilitaryData").isJsonNull()) {
        MilitaryData.validateJsonObject(jsonObj.getAsJsonObject("MilitaryData"));
      }
      if (jsonObj.get("SocialMediaData") != null && !jsonObj.get("SocialMediaData").isJsonNull()) {
        JsonArray jsonArraysocialMediaData = jsonObj.getAsJsonArray("SocialMediaData");
        if (jsonArraysocialMediaData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SocialMediaData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SocialMediaData` to be an array in the JSON string but got `%s`", jsonObj.get("SocialMediaData").toString()));
          }

          // validate the optional field `SocialMediaData` (array)
          for (int i = 0; i < jsonArraysocialMediaData.size(); i++) {
            SocialMediaData.validateJsonObject(jsonArraysocialMediaData.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("EmployeeAssignments") != null && !jsonObj.get("EmployeeAssignments").isJsonNull()) {
        JsonArray jsonArrayemployeeAssignments = jsonObj.getAsJsonArray("EmployeeAssignments");
        if (jsonArrayemployeeAssignments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("EmployeeAssignments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `EmployeeAssignments` to be an array in the JSON string but got `%s`", jsonObj.get("EmployeeAssignments").toString()));
          }

          // validate the optional field `EmployeeAssignments` (array)
          for (int i = 0; i < jsonArrayemployeeAssignments.size(); i++) {
            EmployeeAssignment.validateJsonObject(jsonArrayemployeeAssignments.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Addresses") != null && !jsonObj.get("Addresses").isJsonNull()) {
        JsonArray jsonArrayaddresses = jsonObj.getAsJsonArray("Addresses");
        if (jsonArrayaddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Addresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Addresses` to be an array in the JSON string but got `%s`", jsonObj.get("Addresses").toString()));
          }

          // validate the optional field `Addresses` (array)
          for (int i = 0; i < jsonArrayaddresses.size(); i++) {
            PersonAddress.validateJsonObject(jsonArrayaddresses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Phones") != null && !jsonObj.get("Phones").isJsonNull()) {
        JsonArray jsonArrayphones = jsonObj.getAsJsonArray("Phones");
        if (jsonArrayphones != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Phones").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Phones` to be an array in the JSON string but got `%s`", jsonObj.get("Phones").toString()));
          }

          // validate the optional field `Phones` (array)
          for (int i = 0; i < jsonArrayphones.size(); i++) {
            Phone.validateJsonObject(jsonArrayphones.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `Tenants`
      if (jsonObj.get("Tenants") != null && !jsonObj.get("Tenants").isJsonNull()) {
        ResourceReference.validateJsonObject(jsonObj.getAsJsonObject("Tenants"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Person.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Person' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Person> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Person.class));

       return (TypeAdapter<T>) new TypeAdapter<Person>() {
           @Override
           public void write(JsonWriter out, Person value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Person read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Person instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Person given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Person
  * @throws IOException if the JSON string is invalid with respect to Person
  */
  public static Person fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Person.class);
  }

 /**
  * Convert an instance of Person to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

