/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.JobDepartment;
import com.konfigthis.client.model.JobLocation;
import com.konfigthis.client.model.JobPayRange;
import com.konfigthis.client.model.JobPriority;
import com.konfigthis.client.model.JobRemoteStatus;
import com.konfigthis.client.model.JobStatus;
import com.konfigthis.client.model.JobUser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Details about the Job.
 */
@ApiModel(description = "Details about the Job.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Job {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_AT_S_ACCOUNT_ID = "ATSAccountId";
  @SerializedName(SERIALIZED_NAME_AT_S_ACCOUNT_ID)
  private String atSAccountId;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private JobStatus status;

  public static final String SERIALIZED_NAME_OPENINGS = "Openings";
  @SerializedName(SERIALIZED_NAME_OPENINGS)
  private Integer openings;

  public static final String SERIALIZED_NAME_PRIORITY = "Priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private JobPriority priority;

  public static final String SERIALIZED_NAME_CONFIDENTIAL = "Confidential";
  @SerializedName(SERIALIZED_NAME_CONFIDENTIAL)
  private Boolean confidential;

  public static final String SERIALIZED_NAME_INTERNAL = "Internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  private Boolean internal;

  public static final String SERIALIZED_NAME_TIME_TO_FILL = "TimeToFill";
  @SerializedName(SERIALIZED_NAME_TIME_TO_FILL)
  private Integer timeToFill;

  public static final String SERIALIZED_NAME_REMOTE_STATUS = "RemoteStatus";
  @SerializedName(SERIALIZED_NAME_REMOTE_STATUS)
  private JobRemoteStatus remoteStatus;

  public static final String SERIALIZED_NAME_EEO_CATEGORY = "EeoCategory";
  @SerializedName(SERIALIZED_NAME_EEO_CATEGORY)
  private String eeoCategory;

  public static final String SERIALIZED_NAME_PAY_RANGE = "PayRange";
  @SerializedName(SERIALIZED_NAME_PAY_RANGE)
  private JobPayRange payRange;

  public static final String SERIALIZED_NAME_AT_S_LOCATION = "ATSLocation";
  @SerializedName(SERIALIZED_NAME_AT_S_LOCATION)
  private JobLocation atSLocation;

  public static final String SERIALIZED_NAME_AT_S_DEPARTMENT = "ATSDepartment";
  @SerializedName(SERIALIZED_NAME_AT_S_DEPARTMENT)
  private JobDepartment atSDepartment;

  public static final String SERIALIZED_NAME_HIRING_MANAGERS = "HiringManagers";
  @SerializedName(SERIALIZED_NAME_HIRING_MANAGERS)
  private List<JobUser> hiringManagers = null;

  public static final String SERIALIZED_NAME_RECRUITERS = "Recruiters";
  @SerializedName(SERIALIZED_NAME_RECRUITERS)
  private List<JobUser> recruiters = null;

  public static final String SERIALIZED_NAME_TEAM_MEMBERS = "TeamMembers";
  @SerializedName(SERIALIZED_NAME_TEAM_MEMBERS)
  private List<JobUser> teamMembers = null;

  public static final String SERIALIZED_NAME_EXECUTIVES = "Executives";
  @SerializedName(SERIALIZED_NAME_EXECUTIVES)
  private List<JobUser> executives = null;

  public static final String SERIALIZED_NAME_ACTIVATED_DATE = "ActivatedDate";
  @SerializedName(SERIALIZED_NAME_ACTIVATED_DATE)
  private OffsetDateTime activatedDate;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "ModifiedDate";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private OffsetDateTime modifiedDate;

  public static final String SERIALIZED_NAME_POSTED_TO_CAREERS = "PostedToCareers";
  @SerializedName(SERIALIZED_NAME_POSTED_TO_CAREERS)
  private Boolean postedToCareers;

  public static final String SERIALIZED_NAME_POSTED_TO_INDEED = "PostedToIndeed";
  @SerializedName(SERIALIZED_NAME_POSTED_TO_INDEED)
  private Boolean postedToIndeed;

  public static final String SERIALIZED_NAME_POSTED_TO_SMART_SOURCING = "PostedToSmartSourcing";
  @SerializedName(SERIALIZED_NAME_POSTED_TO_SMART_SOURCING)
  private Boolean postedToSmartSourcing;

  public static final String SERIALIZED_NAME_POSTED_TO_LINKED_IN = "PostedToLinkedIn";
  @SerializedName(SERIALIZED_NAME_POSTED_TO_LINKED_IN)
  private Boolean postedToLinkedIn;

  public static final String SERIALIZED_NAME_POSTED_TO_ZIP_RECRUITER = "PostedToZipRecruiter";
  @SerializedName(SERIALIZED_NAME_POSTED_TO_ZIP_RECRUITER)
  private Boolean postedToZipRecruiter;

  public static final String SERIALIZED_NAME_POSTED_TO_GRAVITY = "PostedToGravity";
  @SerializedName(SERIALIZED_NAME_POSTED_TO_GRAVITY)
  private Boolean postedToGravity;

  public Job() {
  }

  public Job id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the Job in Paycor&#39;s system.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ff80828188da71090188da8f2c240001", value = "Unique identifier of the Job in Paycor's system.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Job atSAccountId(String atSAccountId) {
    
    
    
    
    this.atSAccountId = atSAccountId;
    return this;
  }

   /**
   * The ATS client ID.
   * @return atSAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ff808281889cbe5701889cd426ee0000", value = "The ATS client ID.")

  public String getAtSAccountId() {
    return atSAccountId;
  }


  public void setAtSAccountId(String atSAccountId) {
    
    
    
    this.atSAccountId = atSAccountId;
  }


  public Job number(String number) {
    
    
    
    
    this.number = number;
    return this;
  }

   /**
   * The job&#39;s human readable job number.
   * @return number
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "103", value = "The job's human readable job number.")

  public String getNumber() {
    return number;
  }


  public void setNumber(String number) {
    
    
    
    this.number = number;
  }


  public Job title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The job&#39;s name.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CCPA Job", value = "The job's name.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public Job description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The job&#39;s description in HTML format.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Job for CCPA supa", value = "The job's description in HTML format.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Job status(JobStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobStatus getStatus() {
    return status;
  }


  public void setStatus(JobStatus status) {
    
    
    
    this.status = status;
  }


  public Job openings(Integer openings) {
    
    
    
    
    this.openings = openings;
    return this;
  }

   /**
   * The number of openings for the job.
   * @return openings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "The number of openings for the job.")

  public Integer getOpenings() {
    return openings;
  }


  public void setOpenings(Integer openings) {
    
    
    
    this.openings = openings;
  }


  public Job priority(JobPriority priority) {
    
    
    
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobPriority getPriority() {
    return priority;
  }


  public void setPriority(JobPriority priority) {
    
    
    
    this.priority = priority;
  }


  public Job confidential(Boolean confidential) {
    
    
    
    
    this.confidential = confidential;
    return this;
  }

   /**
   * If the job is confidential.
   * @return confidential
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "If the job is confidential.")

  public Boolean getConfidential() {
    return confidential;
  }


  public void setConfidential(Boolean confidential) {
    
    
    
    this.confidential = confidential;
  }


  public Job internal(Boolean internal) {
    
    
    
    
    this.internal = internal;
    return this;
  }

   /**
   * If the job is an internal only job.
   * @return internal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "If the job is an internal only job.")

  public Boolean getInternal() {
    return internal;
  }


  public void setInternal(Boolean internal) {
    
    
    
    this.internal = internal;
  }


  public Job timeToFill(Integer timeToFill) {
    
    
    
    
    this.timeToFill = timeToFill;
    return this;
  }

   /**
   * The targeted time to fill the job.
   * @return timeToFill
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The targeted time to fill the job.")

  public Integer getTimeToFill() {
    return timeToFill;
  }


  public void setTimeToFill(Integer timeToFill) {
    
    
    
    this.timeToFill = timeToFill;
  }


  public Job remoteStatus(JobRemoteStatus remoteStatus) {
    
    
    
    
    this.remoteStatus = remoteStatus;
    return this;
  }

   /**
   * Get remoteStatus
   * @return remoteStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobRemoteStatus getRemoteStatus() {
    return remoteStatus;
  }


  public void setRemoteStatus(JobRemoteStatus remoteStatus) {
    
    
    
    this.remoteStatus = remoteStatus;
  }


  public Job eeoCategory(String eeoCategory) {
    
    
    
    
    this.eeoCategory = eeoCategory;
    return this;
  }

   /**
   * The EEO (Equal Employment Opportunity) category specification for the job. Can be one of these values: Executive/Senior-Level Officials and Managers, First/Mid-Level Officials and Managers, Professionals, Technicians, Sales Workers, Administrative Support Workers, Craft Workers, Operatives, Laborers and Helpers, Service Workers.
   * @return eeoCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Technicians", value = "The EEO (Equal Employment Opportunity) category specification for the job. Can be one of these values: Executive/Senior-Level Officials and Managers, First/Mid-Level Officials and Managers, Professionals, Technicians, Sales Workers, Administrative Support Workers, Craft Workers, Operatives, Laborers and Helpers, Service Workers.")

  public String getEeoCategory() {
    return eeoCategory;
  }


  public void setEeoCategory(String eeoCategory) {
    
    
    
    this.eeoCategory = eeoCategory;
  }


  public Job payRange(JobPayRange payRange) {
    
    
    
    
    this.payRange = payRange;
    return this;
  }

   /**
   * Get payRange
   * @return payRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobPayRange getPayRange() {
    return payRange;
  }


  public void setPayRange(JobPayRange payRange) {
    
    
    
    this.payRange = payRange;
  }


  public Job atSLocation(JobLocation atSLocation) {
    
    
    
    
    this.atSLocation = atSLocation;
    return this;
  }

   /**
   * Get atSLocation
   * @return atSLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobLocation getAtSLocation() {
    return atSLocation;
  }


  public void setAtSLocation(JobLocation atSLocation) {
    
    
    
    this.atSLocation = atSLocation;
  }


  public Job atSDepartment(JobDepartment atSDepartment) {
    
    
    
    
    this.atSDepartment = atSDepartment;
    return this;
  }

   /**
   * Get atSDepartment
   * @return atSDepartment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JobDepartment getAtSDepartment() {
    return atSDepartment;
  }


  public void setAtSDepartment(JobDepartment atSDepartment) {
    
    
    
    this.atSDepartment = atSDepartment;
  }


  public Job hiringManagers(List<JobUser> hiringManagers) {
    
    
    
    
    this.hiringManagers = hiringManagers;
    return this;
  }

  public Job addHiringManagersItem(JobUser hiringManagersItem) {
    if (this.hiringManagers == null) {
      this.hiringManagers = new ArrayList<>();
    }
    this.hiringManagers.add(hiringManagersItem);
    return this;
  }

   /**
   * The hiring managers assigned to the job.
   * @return hiringManagers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The hiring managers assigned to the job.")

  public List<JobUser> getHiringManagers() {
    return hiringManagers;
  }


  public void setHiringManagers(List<JobUser> hiringManagers) {
    
    
    
    this.hiringManagers = hiringManagers;
  }


  public Job recruiters(List<JobUser> recruiters) {
    
    
    
    
    this.recruiters = recruiters;
    return this;
  }

  public Job addRecruitersItem(JobUser recruitersItem) {
    if (this.recruiters == null) {
      this.recruiters = new ArrayList<>();
    }
    this.recruiters.add(recruitersItem);
    return this;
  }

   /**
   * The recruiters assigned to the job.
   * @return recruiters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The recruiters assigned to the job.")

  public List<JobUser> getRecruiters() {
    return recruiters;
  }


  public void setRecruiters(List<JobUser> recruiters) {
    
    
    
    this.recruiters = recruiters;
  }


  public Job teamMembers(List<JobUser> teamMembers) {
    
    
    
    
    this.teamMembers = teamMembers;
    return this;
  }

  public Job addTeamMembersItem(JobUser teamMembersItem) {
    if (this.teamMembers == null) {
      this.teamMembers = new ArrayList<>();
    }
    this.teamMembers.add(teamMembersItem);
    return this;
  }

   /**
   * The team members assigned to the job.
   * @return teamMembers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The team members assigned to the job.")

  public List<JobUser> getTeamMembers() {
    return teamMembers;
  }


  public void setTeamMembers(List<JobUser> teamMembers) {
    
    
    
    this.teamMembers = teamMembers;
  }


  public Job executives(List<JobUser> executives) {
    
    
    
    
    this.executives = executives;
    return this;
  }

  public Job addExecutivesItem(JobUser executivesItem) {
    if (this.executives == null) {
      this.executives = new ArrayList<>();
    }
    this.executives.add(executivesItem);
    return this;
  }

   /**
   * The executives assigned to the job.
   * @return executives
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The executives assigned to the job.")

  public List<JobUser> getExecutives() {
    return executives;
  }


  public void setExecutives(List<JobUser> executives) {
    
    
    
    this.executives = executives;
  }


  public Job activatedDate(OffsetDateTime activatedDate) {
    
    
    
    
    this.activatedDate = activatedDate;
    return this;
  }

   /**
   * The date when the job was activated.
   * @return activatedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-06-20T13:45:32Z", value = "The date when the job was activated.")

  public OffsetDateTime getActivatedDate() {
    return activatedDate;
  }


  public void setActivatedDate(OffsetDateTime activatedDate) {
    
    
    
    this.activatedDate = activatedDate;
  }


  public Job createdDate(OffsetDateTime createdDate) {
    
    
    
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * The date when the job was created.
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-06-20T13:45:32Z", value = "The date when the job was created.")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    
    
    
    this.createdDate = createdDate;
  }


  public Job modifiedDate(OffsetDateTime modifiedDate) {
    
    
    
    
    this.modifiedDate = modifiedDate;
    return this;
  }

   /**
   * The date when the job was last modified.
   * @return modifiedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2023-06-20T13:45:32Z", value = "The date when the job was last modified.")

  public OffsetDateTime getModifiedDate() {
    return modifiedDate;
  }


  public void setModifiedDate(OffsetDateTime modifiedDate) {
    
    
    
    this.modifiedDate = modifiedDate;
  }


  public Job postedToCareers(Boolean postedToCareers) {
    
    
    
    
    this.postedToCareers = postedToCareers;
    return this;
  }

   /**
   * Is the job posted to the company careers page.
   * @return postedToCareers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Is the job posted to the company careers page.")

  public Boolean getPostedToCareers() {
    return postedToCareers;
  }


  public void setPostedToCareers(Boolean postedToCareers) {
    
    
    
    this.postedToCareers = postedToCareers;
  }


  public Job postedToIndeed(Boolean postedToIndeed) {
    
    
    
    
    this.postedToIndeed = postedToIndeed;
    return this;
  }

   /**
   * Is the job posted to the free Indeed feed.
   * @return postedToIndeed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Is the job posted to the free Indeed feed.")

  public Boolean getPostedToIndeed() {
    return postedToIndeed;
  }


  public void setPostedToIndeed(Boolean postedToIndeed) {
    
    
    
    this.postedToIndeed = postedToIndeed;
  }


  public Job postedToSmartSourcing(Boolean postedToSmartSourcing) {
    
    
    
    
    this.postedToSmartSourcing = postedToSmartSourcing;
    return this;
  }

   /**
   * Is the job posted to Smart Sourcing.
   * @return postedToSmartSourcing
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Is the job posted to Smart Sourcing.")

  public Boolean getPostedToSmartSourcing() {
    return postedToSmartSourcing;
  }


  public void setPostedToSmartSourcing(Boolean postedToSmartSourcing) {
    
    
    
    this.postedToSmartSourcing = postedToSmartSourcing;
  }


  public Job postedToLinkedIn(Boolean postedToLinkedIn) {
    
    
    
    
    this.postedToLinkedIn = postedToLinkedIn;
    return this;
  }

   /**
   * Is the job posted to the free LinkedIn.
   * @return postedToLinkedIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Is the job posted to the free LinkedIn.")

  public Boolean getPostedToLinkedIn() {
    return postedToLinkedIn;
  }


  public void setPostedToLinkedIn(Boolean postedToLinkedIn) {
    
    
    
    this.postedToLinkedIn = postedToLinkedIn;
  }


  public Job postedToZipRecruiter(Boolean postedToZipRecruiter) {
    
    
    
    
    this.postedToZipRecruiter = postedToZipRecruiter;
    return this;
  }

   /**
   * Is the job posted to the free ZipRecruiter feed.
   * @return postedToZipRecruiter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Is the job posted to the free ZipRecruiter feed.")

  public Boolean getPostedToZipRecruiter() {
    return postedToZipRecruiter;
  }


  public void setPostedToZipRecruiter(Boolean postedToZipRecruiter) {
    
    
    
    this.postedToZipRecruiter = postedToZipRecruiter;
  }


  public Job postedToGravity(Boolean postedToGravity) {
    
    
    
    
    this.postedToGravity = postedToGravity;
    return this;
  }

   /**
   * Is the job posted to Gravity.             
   * @return postedToGravity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Is the job posted to Gravity.             ")

  public Boolean getPostedToGravity() {
    return postedToGravity;
  }


  public void setPostedToGravity(Boolean postedToGravity) {
    
    
    
    this.postedToGravity = postedToGravity;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Job instance itself
   */
  public Job putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.id, job.id) &&
        Objects.equals(this.atSAccountId, job.atSAccountId) &&
        Objects.equals(this.number, job.number) &&
        Objects.equals(this.title, job.title) &&
        Objects.equals(this.description, job.description) &&
        Objects.equals(this.status, job.status) &&
        Objects.equals(this.openings, job.openings) &&
        Objects.equals(this.priority, job.priority) &&
        Objects.equals(this.confidential, job.confidential) &&
        Objects.equals(this.internal, job.internal) &&
        Objects.equals(this.timeToFill, job.timeToFill) &&
        Objects.equals(this.remoteStatus, job.remoteStatus) &&
        Objects.equals(this.eeoCategory, job.eeoCategory) &&
        Objects.equals(this.payRange, job.payRange) &&
        Objects.equals(this.atSLocation, job.atSLocation) &&
        Objects.equals(this.atSDepartment, job.atSDepartment) &&
        Objects.equals(this.hiringManagers, job.hiringManagers) &&
        Objects.equals(this.recruiters, job.recruiters) &&
        Objects.equals(this.teamMembers, job.teamMembers) &&
        Objects.equals(this.executives, job.executives) &&
        Objects.equals(this.activatedDate, job.activatedDate) &&
        Objects.equals(this.createdDate, job.createdDate) &&
        Objects.equals(this.modifiedDate, job.modifiedDate) &&
        Objects.equals(this.postedToCareers, job.postedToCareers) &&
        Objects.equals(this.postedToIndeed, job.postedToIndeed) &&
        Objects.equals(this.postedToSmartSourcing, job.postedToSmartSourcing) &&
        Objects.equals(this.postedToLinkedIn, job.postedToLinkedIn) &&
        Objects.equals(this.postedToZipRecruiter, job.postedToZipRecruiter) &&
        Objects.equals(this.postedToGravity, job.postedToGravity)&&
        Objects.equals(this.additionalProperties, job.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, atSAccountId, number, title, description, status, openings, priority, confidential, internal, timeToFill, remoteStatus, eeoCategory, payRange, atSLocation, atSDepartment, hiringManagers, recruiters, teamMembers, executives, activatedDate, createdDate, modifiedDate, postedToCareers, postedToIndeed, postedToSmartSourcing, postedToLinkedIn, postedToZipRecruiter, postedToGravity, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    atSAccountId: ").append(toIndentedString(atSAccountId)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    openings: ").append(toIndentedString(openings)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    confidential: ").append(toIndentedString(confidential)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    timeToFill: ").append(toIndentedString(timeToFill)).append("\n");
    sb.append("    remoteStatus: ").append(toIndentedString(remoteStatus)).append("\n");
    sb.append("    eeoCategory: ").append(toIndentedString(eeoCategory)).append("\n");
    sb.append("    payRange: ").append(toIndentedString(payRange)).append("\n");
    sb.append("    atSLocation: ").append(toIndentedString(atSLocation)).append("\n");
    sb.append("    atSDepartment: ").append(toIndentedString(atSDepartment)).append("\n");
    sb.append("    hiringManagers: ").append(toIndentedString(hiringManagers)).append("\n");
    sb.append("    recruiters: ").append(toIndentedString(recruiters)).append("\n");
    sb.append("    teamMembers: ").append(toIndentedString(teamMembers)).append("\n");
    sb.append("    executives: ").append(toIndentedString(executives)).append("\n");
    sb.append("    activatedDate: ").append(toIndentedString(activatedDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    postedToCareers: ").append(toIndentedString(postedToCareers)).append("\n");
    sb.append("    postedToIndeed: ").append(toIndentedString(postedToIndeed)).append("\n");
    sb.append("    postedToSmartSourcing: ").append(toIndentedString(postedToSmartSourcing)).append("\n");
    sb.append("    postedToLinkedIn: ").append(toIndentedString(postedToLinkedIn)).append("\n");
    sb.append("    postedToZipRecruiter: ").append(toIndentedString(postedToZipRecruiter)).append("\n");
    sb.append("    postedToGravity: ").append(toIndentedString(postedToGravity)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("ATSAccountId");
    openapiFields.add("Number");
    openapiFields.add("Title");
    openapiFields.add("Description");
    openapiFields.add("Status");
    openapiFields.add("Openings");
    openapiFields.add("Priority");
    openapiFields.add("Confidential");
    openapiFields.add("Internal");
    openapiFields.add("TimeToFill");
    openapiFields.add("RemoteStatus");
    openapiFields.add("EeoCategory");
    openapiFields.add("PayRange");
    openapiFields.add("ATSLocation");
    openapiFields.add("ATSDepartment");
    openapiFields.add("HiringManagers");
    openapiFields.add("Recruiters");
    openapiFields.add("TeamMembers");
    openapiFields.add("Executives");
    openapiFields.add("ActivatedDate");
    openapiFields.add("CreatedDate");
    openapiFields.add("ModifiedDate");
    openapiFields.add("PostedToCareers");
    openapiFields.add("PostedToIndeed");
    openapiFields.add("PostedToSmartSourcing");
    openapiFields.add("PostedToLinkedIn");
    openapiFields.add("PostedToZipRecruiter");
    openapiFields.add("PostedToGravity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Job
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }
      if (!jsonObj.get("Id").isJsonNull() && (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (!jsonObj.get("ATSAccountId").isJsonNull() && (jsonObj.get("ATSAccountId") != null && !jsonObj.get("ATSAccountId").isJsonNull()) && !jsonObj.get("ATSAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ATSAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ATSAccountId").toString()));
      }
      if (!jsonObj.get("Number").isJsonNull() && (jsonObj.get("Number") != null && !jsonObj.get("Number").isJsonNull()) && !jsonObj.get("Number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Number").toString()));
      }
      if (!jsonObj.get("Title").isJsonNull() && (jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if (!jsonObj.get("Description").isJsonNull() && (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("EeoCategory").isJsonNull() && (jsonObj.get("EeoCategory") != null && !jsonObj.get("EeoCategory").isJsonNull()) && !jsonObj.get("EeoCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EeoCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EeoCategory").toString()));
      }
      // validate the optional field `PayRange`
      if (jsonObj.get("PayRange") != null && !jsonObj.get("PayRange").isJsonNull()) {
        JobPayRange.validateJsonObject(jsonObj.getAsJsonObject("PayRange"));
      }
      // validate the optional field `ATSLocation`
      if (jsonObj.get("ATSLocation") != null && !jsonObj.get("ATSLocation").isJsonNull()) {
        JobLocation.validateJsonObject(jsonObj.getAsJsonObject("ATSLocation"));
      }
      // validate the optional field `ATSDepartment`
      if (jsonObj.get("ATSDepartment") != null && !jsonObj.get("ATSDepartment").isJsonNull()) {
        JobDepartment.validateJsonObject(jsonObj.getAsJsonObject("ATSDepartment"));
      }
      if (jsonObj.get("HiringManagers") != null && !jsonObj.get("HiringManagers").isJsonNull()) {
        JsonArray jsonArrayhiringManagers = jsonObj.getAsJsonArray("HiringManagers");
        if (jsonArrayhiringManagers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HiringManagers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HiringManagers` to be an array in the JSON string but got `%s`", jsonObj.get("HiringManagers").toString()));
          }

          // validate the optional field `HiringManagers` (array)
          for (int i = 0; i < jsonArrayhiringManagers.size(); i++) {
            JobUser.validateJsonObject(jsonArrayhiringManagers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Recruiters") != null && !jsonObj.get("Recruiters").isJsonNull()) {
        JsonArray jsonArrayrecruiters = jsonObj.getAsJsonArray("Recruiters");
        if (jsonArrayrecruiters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Recruiters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Recruiters` to be an array in the JSON string but got `%s`", jsonObj.get("Recruiters").toString()));
          }

          // validate the optional field `Recruiters` (array)
          for (int i = 0; i < jsonArrayrecruiters.size(); i++) {
            JobUser.validateJsonObject(jsonArrayrecruiters.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("TeamMembers") != null && !jsonObj.get("TeamMembers").isJsonNull()) {
        JsonArray jsonArrayteamMembers = jsonObj.getAsJsonArray("TeamMembers");
        if (jsonArrayteamMembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TeamMembers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TeamMembers` to be an array in the JSON string but got `%s`", jsonObj.get("TeamMembers").toString()));
          }

          // validate the optional field `TeamMembers` (array)
          for (int i = 0; i < jsonArrayteamMembers.size(); i++) {
            JobUser.validateJsonObject(jsonArrayteamMembers.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("Executives") != null && !jsonObj.get("Executives").isJsonNull()) {
        JsonArray jsonArrayexecutives = jsonObj.getAsJsonArray("Executives");
        if (jsonArrayexecutives != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Executives").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Executives` to be an array in the JSON string but got `%s`", jsonObj.get("Executives").toString()));
          }

          // validate the optional field `Executives` (array)
          for (int i = 0; i < jsonArrayexecutives.size(); i++) {
            JobUser.validateJsonObject(jsonArrayexecutives.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Job instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Job given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Job
  * @throws IOException if the JSON string is invalid with respect to Job
  */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

 /**
  * Convert an instance of Job to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

