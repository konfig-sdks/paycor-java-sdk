/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OnboardingEmployee
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OnboardingEmployee {
  public static final String SERIALIZED_NAME_ONBOARDING_EMPLOYEE_ID = "OnboardingEmployeeId";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_EMPLOYEE_ID)
  private String onboardingEmployeeId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "EmployeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private Integer employeeNumber;

  public static final String SERIALIZED_NAME_LEGAL_ENTITY_ID = "LegalEntityId";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY_ID)
  private Integer legalEntityId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_FULL_NAME = "FullName";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "EmailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_INVITED_DATE = "InvitedDate";
  @SerializedName(SERIALIZED_NAME_INVITED_DATE)
  private OffsetDateTime invitedDate;

  public static final String SERIALIZED_NAME_HAS_ONBOARDING_ACCESS = "HasOnboardingAccess";
  @SerializedName(SERIALIZED_NAME_HAS_ONBOARDING_ACCESS)
  private Boolean hasOnboardingAccess;

  public static final String SERIALIZED_NAME_HIRE_DATE = "HireDate";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private OffsetDateTime hireDate;

  public static final String SERIALIZED_NAME_STEPS_TOTAL = "StepsTotal";
  @SerializedName(SERIALIZED_NAME_STEPS_TOTAL)
  private Integer stepsTotal;

  public static final String SERIALIZED_NAME_STEPS_COMPLETED = "StepsCompleted";
  @SerializedName(SERIALIZED_NAME_STEPS_COMPLETED)
  private Integer stepsCompleted;

  public static final String SERIALIZED_NAME_LAST_EMPLOYEE_STEP_COMPLETED = "LastEmployeeStepCompleted";
  @SerializedName(SERIALIZED_NAME_LAST_EMPLOYEE_STEP_COMPLETED)
  private Integer lastEmployeeStepCompleted;

  public static final String SERIALIZED_NAME_LAST_EMPLOYEE_STEP_COMPLETED_DATE = "LastEmployeeStepCompletedDate";
  @SerializedName(SERIALIZED_NAME_LAST_EMPLOYEE_STEP_COMPLETED_DATE)
  private OffsetDateTime lastEmployeeStepCompletedDate;

  public static final String SERIALIZED_NAME_LAST_ADMIN_STEP_COMPLETED = "LastAdminStepCompleted";
  @SerializedName(SERIALIZED_NAME_LAST_ADMIN_STEP_COMPLETED)
  private Integer lastAdminStepCompleted;

  public static final String SERIALIZED_NAME_LAST_ADMIN_STEP_COMPLETED_DATE = "LastAdminStepCompletedDate";
  @SerializedName(SERIALIZED_NAME_LAST_ADMIN_STEP_COMPLETED_DATE)
  private OffsetDateTime lastAdminStepCompletedDate;

  public static final String SERIALIZED_NAME_WORK_LOCATION = "WorkLocation";
  @SerializedName(SERIALIZED_NAME_WORK_LOCATION)
  private String workLocation;

  public static final String SERIALIZED_NAME_WORK_LOCATION_ID = "WorkLocationId";
  @SerializedName(SERIALIZED_NAME_WORK_LOCATION_ID)
  private String workLocationId;

  public static final String SERIALIZED_NAME_MANAGER = "Manager";
  @SerializedName(SERIALIZED_NAME_MANAGER)
  private String manager;

  public static final String SERIALIZED_NAME_MANAGER_ID = "ManagerId";
  @SerializedName(SERIALIZED_NAME_MANAGER_ID)
  private String managerId;

  public OnboardingEmployee() {
  }

  public OnboardingEmployee onboardingEmployeeId(String onboardingEmployeeId) {
    
    
    
    
    this.onboardingEmployeeId = onboardingEmployeeId;
    return this;
  }

   /**
   * Id of the employee in the onboarding state.
   * @return onboardingEmployeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a332bab4-9b53-ed11-913a-0050569fc0c9", value = "Id of the employee in the onboarding state.")

  public String getOnboardingEmployeeId() {
    return onboardingEmployeeId;
  }


  public void setOnboardingEmployeeId(String onboardingEmployeeId) {
    
    
    
    this.onboardingEmployeeId = onboardingEmployeeId;
  }


  public OnboardingEmployee employeeNumber(Integer employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Unique number of the employee.             
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12345", value = "Unique number of the employee.             ")

  public Integer getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(Integer employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public OnboardingEmployee legalEntityId(Integer legalEntityId) {
    
    
    
    
    this.legalEntityId = legalEntityId;
    return this;
  }

   /**
   * Id of the legal entity.
   * @return legalEntityId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "133900", value = "Id of the legal entity.")

  public Integer getLegalEntityId() {
    return legalEntityId;
  }


  public void setLegalEntityId(Integer legalEntityId) {
    
    
    
    this.legalEntityId = legalEntityId;
  }


  public OnboardingEmployee firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the employee in the onboarding state.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "John", value = "First name of the employee in the onboarding state.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public OnboardingEmployee lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the employee in the onboarding state.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smith", value = "Last name of the employee in the onboarding state.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public OnboardingEmployee fullName(String fullName) {
    
    
    
    
    this.fullName = fullName;
    return this;
  }

   /**
   * First and last name of the employee in the onboarding state combined.
   * @return fullName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Smith, John", value = "First and last name of the employee in the onboarding state combined.")

  public String getFullName() {
    return fullName;
  }


  public void setFullName(String fullName) {
    
    
    
    this.fullName = fullName;
  }


  public OnboardingEmployee emailAddress(String emailAddress) {
    
    
    
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Email address of the employee in the onboarding state.
   * @return emailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "johnsmith@gmail.com", value = "Email address of the employee in the onboarding state.")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    
    
    
    this.emailAddress = emailAddress;
  }


  public OnboardingEmployee invitedDate(OffsetDateTime invitedDate) {
    
    
    
    
    this.invitedDate = invitedDate;
    return this;
  }

   /**
   * Date when employee was invited.
   * @return invitedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date when employee was invited.")

  public OffsetDateTime getInvitedDate() {
    return invitedDate;
  }


  public void setInvitedDate(OffsetDateTime invitedDate) {
    
    
    
    this.invitedDate = invitedDate;
  }


  public OnboardingEmployee hasOnboardingAccess(Boolean hasOnboardingAccess) {
    
    
    
    
    this.hasOnboardingAccess = hasOnboardingAccess;
    return this;
  }

   /**
   * Indicates if this is invited or manual hiring.
   * @return hasOnboardingAccess
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates if this is invited or manual hiring.")

  public Boolean getHasOnboardingAccess() {
    return hasOnboardingAccess;
  }


  public void setHasOnboardingAccess(Boolean hasOnboardingAccess) {
    
    
    
    this.hasOnboardingAccess = hasOnboardingAccess;
  }


  public OnboardingEmployee hireDate(OffsetDateTime hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * Date when the employee was hired.
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date when the employee was hired.")

  public OffsetDateTime getHireDate() {
    return hireDate;
  }


  public void setHireDate(OffsetDateTime hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public OnboardingEmployee stepsTotal(Integer stepsTotal) {
    
    
    
    
    this.stepsTotal = stepsTotal;
    return this;
  }

   /**
   * Number of the total steps in the onboarding.
   * @return stepsTotal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12", value = "Number of the total steps in the onboarding.")

  public Integer getStepsTotal() {
    return stepsTotal;
  }


  public void setStepsTotal(Integer stepsTotal) {
    
    
    
    this.stepsTotal = stepsTotal;
  }


  public OnboardingEmployee stepsCompleted(Integer stepsCompleted) {
    
    
    
    
    this.stepsCompleted = stepsCompleted;
    return this;
  }

   /**
   * Number of the completed steps in the onboarding.
   * @return stepsCompleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Number of the completed steps in the onboarding.")

  public Integer getStepsCompleted() {
    return stepsCompleted;
  }


  public void setStepsCompleted(Integer stepsCompleted) {
    
    
    
    this.stepsCompleted = stepsCompleted;
  }


  public OnboardingEmployee lastEmployeeStepCompleted(Integer lastEmployeeStepCompleted) {
    
    
    
    
    this.lastEmployeeStepCompleted = lastEmployeeStepCompleted;
    return this;
  }

   /**
   * Last step that was completed by the employee.
   * @return lastEmployeeStepCompleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Last step that was completed by the employee.")

  public Integer getLastEmployeeStepCompleted() {
    return lastEmployeeStepCompleted;
  }


  public void setLastEmployeeStepCompleted(Integer lastEmployeeStepCompleted) {
    
    
    
    this.lastEmployeeStepCompleted = lastEmployeeStepCompleted;
  }


  public OnboardingEmployee lastEmployeeStepCompletedDate(OffsetDateTime lastEmployeeStepCompletedDate) {
    
    
    
    
    this.lastEmployeeStepCompletedDate = lastEmployeeStepCompletedDate;
    return this;
  }

   /**
   * Date when the last step was completed by employee.
   * @return lastEmployeeStepCompletedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date when the last step was completed by employee.")

  public OffsetDateTime getLastEmployeeStepCompletedDate() {
    return lastEmployeeStepCompletedDate;
  }


  public void setLastEmployeeStepCompletedDate(OffsetDateTime lastEmployeeStepCompletedDate) {
    
    
    
    this.lastEmployeeStepCompletedDate = lastEmployeeStepCompletedDate;
  }


  public OnboardingEmployee lastAdminStepCompleted(Integer lastAdminStepCompleted) {
    
    
    
    
    this.lastAdminStepCompleted = lastAdminStepCompleted;
    return this;
  }

   /**
   * Last step that was completed by the admin.
   * @return lastAdminStepCompleted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", value = "Last step that was completed by the admin.")

  public Integer getLastAdminStepCompleted() {
    return lastAdminStepCompleted;
  }


  public void setLastAdminStepCompleted(Integer lastAdminStepCompleted) {
    
    
    
    this.lastAdminStepCompleted = lastAdminStepCompleted;
  }


  public OnboardingEmployee lastAdminStepCompletedDate(OffsetDateTime lastAdminStepCompletedDate) {
    
    
    
    
    this.lastAdminStepCompletedDate = lastAdminStepCompletedDate;
    return this;
  }

   /**
   * Date when the last step was completed by admin. 
   * @return lastAdminStepCompletedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date when the last step was completed by admin. ")

  public OffsetDateTime getLastAdminStepCompletedDate() {
    return lastAdminStepCompletedDate;
  }


  public void setLastAdminStepCompletedDate(OffsetDateTime lastAdminStepCompletedDate) {
    
    
    
    this.lastAdminStepCompletedDate = lastAdminStepCompletedDate;
  }


  public OnboardingEmployee workLocation(String workLocation) {
    
    
    
    
    this.workLocation = workLocation;
    return this;
  }

   /**
   * Name of the work location.
   * @return workLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Office", value = "Name of the work location.")

  public String getWorkLocation() {
    return workLocation;
  }


  public void setWorkLocation(String workLocation) {
    
    
    
    this.workLocation = workLocation;
  }


  public OnboardingEmployee workLocationId(String workLocationId) {
    
    
    
    
    this.workLocationId = workLocationId;
    return this;
  }

   /**
   * Id of the work location.
   * @return workLocationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a332bab4-9b53-ed11-913a-0050569fc0c9", value = "Id of the work location.")

  public String getWorkLocationId() {
    return workLocationId;
  }


  public void setWorkLocationId(String workLocationId) {
    
    
    
    this.workLocationId = workLocationId;
  }


  public OnboardingEmployee manager(String manager) {
    
    
    
    
    this.manager = manager;
    return this;
  }

   /**
   * Full name of the employees manager.
   * @return manager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Erricson, Allen", value = "Full name of the employees manager.")

  public String getManager() {
    return manager;
  }


  public void setManager(String manager) {
    
    
    
    this.manager = manager;
  }


  public OnboardingEmployee managerId(String managerId) {
    
    
    
    
    this.managerId = managerId;
    return this;
  }

   /**
   * Id of the employees manager.
   * @return managerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a332bab4-9b53-ed11-913a-0050569fc0c9", value = "Id of the employees manager.")

  public String getManagerId() {
    return managerId;
  }


  public void setManagerId(String managerId) {
    
    
    
    this.managerId = managerId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OnboardingEmployee instance itself
   */
  public OnboardingEmployee putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnboardingEmployee onboardingEmployee = (OnboardingEmployee) o;
    return Objects.equals(this.onboardingEmployeeId, onboardingEmployee.onboardingEmployeeId) &&
        Objects.equals(this.employeeNumber, onboardingEmployee.employeeNumber) &&
        Objects.equals(this.legalEntityId, onboardingEmployee.legalEntityId) &&
        Objects.equals(this.firstName, onboardingEmployee.firstName) &&
        Objects.equals(this.lastName, onboardingEmployee.lastName) &&
        Objects.equals(this.fullName, onboardingEmployee.fullName) &&
        Objects.equals(this.emailAddress, onboardingEmployee.emailAddress) &&
        Objects.equals(this.invitedDate, onboardingEmployee.invitedDate) &&
        Objects.equals(this.hasOnboardingAccess, onboardingEmployee.hasOnboardingAccess) &&
        Objects.equals(this.hireDate, onboardingEmployee.hireDate) &&
        Objects.equals(this.stepsTotal, onboardingEmployee.stepsTotal) &&
        Objects.equals(this.stepsCompleted, onboardingEmployee.stepsCompleted) &&
        Objects.equals(this.lastEmployeeStepCompleted, onboardingEmployee.lastEmployeeStepCompleted) &&
        Objects.equals(this.lastEmployeeStepCompletedDate, onboardingEmployee.lastEmployeeStepCompletedDate) &&
        Objects.equals(this.lastAdminStepCompleted, onboardingEmployee.lastAdminStepCompleted) &&
        Objects.equals(this.lastAdminStepCompletedDate, onboardingEmployee.lastAdminStepCompletedDate) &&
        Objects.equals(this.workLocation, onboardingEmployee.workLocation) &&
        Objects.equals(this.workLocationId, onboardingEmployee.workLocationId) &&
        Objects.equals(this.manager, onboardingEmployee.manager) &&
        Objects.equals(this.managerId, onboardingEmployee.managerId)&&
        Objects.equals(this.additionalProperties, onboardingEmployee.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(onboardingEmployeeId, employeeNumber, legalEntityId, firstName, lastName, fullName, emailAddress, invitedDate, hasOnboardingAccess, hireDate, stepsTotal, stepsCompleted, lastEmployeeStepCompleted, lastEmployeeStepCompletedDate, lastAdminStepCompleted, lastAdminStepCompletedDate, workLocation, workLocationId, manager, managerId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnboardingEmployee {\n");
    sb.append("    onboardingEmployeeId: ").append(toIndentedString(onboardingEmployeeId)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    legalEntityId: ").append(toIndentedString(legalEntityId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    invitedDate: ").append(toIndentedString(invitedDate)).append("\n");
    sb.append("    hasOnboardingAccess: ").append(toIndentedString(hasOnboardingAccess)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    stepsTotal: ").append(toIndentedString(stepsTotal)).append("\n");
    sb.append("    stepsCompleted: ").append(toIndentedString(stepsCompleted)).append("\n");
    sb.append("    lastEmployeeStepCompleted: ").append(toIndentedString(lastEmployeeStepCompleted)).append("\n");
    sb.append("    lastEmployeeStepCompletedDate: ").append(toIndentedString(lastEmployeeStepCompletedDate)).append("\n");
    sb.append("    lastAdminStepCompleted: ").append(toIndentedString(lastAdminStepCompleted)).append("\n");
    sb.append("    lastAdminStepCompletedDate: ").append(toIndentedString(lastAdminStepCompletedDate)).append("\n");
    sb.append("    workLocation: ").append(toIndentedString(workLocation)).append("\n");
    sb.append("    workLocationId: ").append(toIndentedString(workLocationId)).append("\n");
    sb.append("    manager: ").append(toIndentedString(manager)).append("\n");
    sb.append("    managerId: ").append(toIndentedString(managerId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OnboardingEmployeeId");
    openapiFields.add("EmployeeNumber");
    openapiFields.add("LegalEntityId");
    openapiFields.add("FirstName");
    openapiFields.add("LastName");
    openapiFields.add("FullName");
    openapiFields.add("EmailAddress");
    openapiFields.add("InvitedDate");
    openapiFields.add("HasOnboardingAccess");
    openapiFields.add("HireDate");
    openapiFields.add("StepsTotal");
    openapiFields.add("StepsCompleted");
    openapiFields.add("LastEmployeeStepCompleted");
    openapiFields.add("LastEmployeeStepCompletedDate");
    openapiFields.add("LastAdminStepCompleted");
    openapiFields.add("LastAdminStepCompletedDate");
    openapiFields.add("WorkLocation");
    openapiFields.add("WorkLocationId");
    openapiFields.add("Manager");
    openapiFields.add("ManagerId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OnboardingEmployee
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OnboardingEmployee.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnboardingEmployee is not found in the empty JSON string", OnboardingEmployee.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("OnboardingEmployeeId") != null && !jsonObj.get("OnboardingEmployeeId").isJsonNull()) && !jsonObj.get("OnboardingEmployeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OnboardingEmployeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OnboardingEmployeeId").toString()));
      }
      if (!jsonObj.get("FirstName").isJsonNull() && (jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if (!jsonObj.get("LastName").isJsonNull() && (jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if (!jsonObj.get("FullName").isJsonNull() && (jsonObj.get("FullName") != null && !jsonObj.get("FullName").isJsonNull()) && !jsonObj.get("FullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FullName").toString()));
      }
      if (!jsonObj.get("EmailAddress").isJsonNull() && (jsonObj.get("EmailAddress") != null && !jsonObj.get("EmailAddress").isJsonNull()) && !jsonObj.get("EmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmailAddress").toString()));
      }
      if (!jsonObj.get("WorkLocation").isJsonNull() && (jsonObj.get("WorkLocation") != null && !jsonObj.get("WorkLocation").isJsonNull()) && !jsonObj.get("WorkLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkLocation").toString()));
      }
      if (!jsonObj.get("WorkLocationId").isJsonNull() && (jsonObj.get("WorkLocationId") != null && !jsonObj.get("WorkLocationId").isJsonNull()) && !jsonObj.get("WorkLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkLocationId").toString()));
      }
      if (!jsonObj.get("Manager").isJsonNull() && (jsonObj.get("Manager") != null && !jsonObj.get("Manager").isJsonNull()) && !jsonObj.get("Manager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Manager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Manager").toString()));
      }
      if (!jsonObj.get("ManagerId").isJsonNull() && (jsonObj.get("ManagerId") != null && !jsonObj.get("ManagerId").isJsonNull()) && !jsonObj.get("ManagerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ManagerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ManagerId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnboardingEmployee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnboardingEmployee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnboardingEmployee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnboardingEmployee.class));

       return (TypeAdapter<T>) new TypeAdapter<OnboardingEmployee>() {
           @Override
           public void write(JsonWriter out, OnboardingEmployee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OnboardingEmployee read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OnboardingEmployee instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OnboardingEmployee given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OnboardingEmployee
  * @throws IOException if the JSON string is invalid with respect to OnboardingEmployee
  */
  public static OnboardingEmployee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnboardingEmployee.class);
  }

 /**
  * Convert an instance of OnboardingEmployee to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

