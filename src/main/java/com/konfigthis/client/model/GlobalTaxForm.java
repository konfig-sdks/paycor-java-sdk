/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.FilingStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The Global Tax Form model represents required fields when creating/updating Employee tax. So that user can easily determine what data needs to be passed for each specific Tax Code.
 */
@ApiModel(description = "The Global Tax Form model represents required fields when creating/updating Employee tax. So that user can easily determine what data needs to be passed for each specific Tax Code.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GlobalTaxForm {
  public static final String SERIALIZED_NAME_EFFECTIVE_START_DATE = "EffectiveStartDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_START_DATE)
  private OffsetDateTime effectiveStartDate;

  public static final String SERIALIZED_NAME_EFFECTIVE_END_DATE = "EffectiveEndDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_END_DATE)
  private OffsetDateTime effectiveEndDate;

  public static final String SERIALIZED_NAME_HAS_FILING_STATUS = "HasFilingStatus";
  @SerializedName(SERIALIZED_NAME_HAS_FILING_STATUS)
  private Boolean hasFilingStatus;

  public static final String SERIALIZED_NAME_HAS_ADJUST_WITHHOLDING = "HasAdjustWithholding";
  @SerializedName(SERIALIZED_NAME_HAS_ADJUST_WITHHOLDING)
  private Boolean hasAdjustWithholding;

  public static final String SERIALIZED_NAME_HAS_OVERRIDE_WITHHOLDING_DATE = "HasOverrideWithholdingDate";
  @SerializedName(SERIALIZED_NAME_HAS_OVERRIDE_WITHHOLDING_DATE)
  private Boolean hasOverrideWithholdingDate;

  public static final String SERIALIZED_NAME_HAS_APPLICABLE_BIRTH_YEAR = "HasApplicableBirthYear";
  @SerializedName(SERIALIZED_NAME_HAS_APPLICABLE_BIRTH_YEAR)
  private Boolean hasApplicableBirthYear;

  public static final String SERIALIZED_NAME_HAS_AMOUNT = "HasAmount";
  @SerializedName(SERIALIZED_NAME_HAS_AMOUNT)
  private Boolean hasAmount;

  public static final String SERIALIZED_NAME_HAS_RATE = "HasRate";
  @SerializedName(SERIALIZED_NAME_HAS_RATE)
  private Boolean hasRate;

  public static final String SERIALIZED_NAME_HAS_EXEMPTION_AMOUNT = "HasExemptionAmount";
  @SerializedName(SERIALIZED_NAME_HAS_EXEMPTION_AMOUNT)
  private Boolean hasExemptionAmount;

  public static final String SERIALIZED_NAME_HAS_NON_RESIDENT_ALIEN = "HasNonResidentAlien";
  @SerializedName(SERIALIZED_NAME_HAS_NON_RESIDENT_ALIEN)
  private Boolean hasNonResidentAlien;

  public static final String SERIALIZED_NAME_HAS_NUMBER_OF_QUALIFIED_DEPENDENTS = "HasNumberOfQualifiedDependents";
  @SerializedName(SERIALIZED_NAME_HAS_NUMBER_OF_QUALIFIED_DEPENDENTS)
  private Boolean hasNumberOfQualifiedDependents;

  public static final String SERIALIZED_NAME_HAS_NUMBER_OF_OTHER_DEPENDENTS = "HasNumberOfOtherDependents";
  @SerializedName(SERIALIZED_NAME_HAS_NUMBER_OF_OTHER_DEPENDENTS)
  private Boolean hasNumberOfOtherDependents;

  public static final String SERIALIZED_NAME_HAS_NUMBER_OF_EXEMPTIONS = "HasNumberOfExemptions";
  @SerializedName(SERIALIZED_NAME_HAS_NUMBER_OF_EXEMPTIONS)
  private Boolean hasNumberOfExemptions;

  public static final String SERIALIZED_NAME_HAS_SPOUSE_WORKING = "HasSpouseWorking";
  @SerializedName(SERIALIZED_NAME_HAS_SPOUSE_WORKING)
  private Boolean hasSpouseWorking;

  public static final String SERIALIZED_NAME_HAS_TWO_INCOMES = "HasTwoIncomes";
  @SerializedName(SERIALIZED_NAME_HAS_TWO_INCOMES)
  private Boolean hasTwoIncomes;

  public static final String SERIALIZED_NAME_HAS_ADDITIONAL_INCOME = "HasAdditionalIncome";
  @SerializedName(SERIALIZED_NAME_HAS_ADDITIONAL_INCOME)
  private Boolean hasAdditionalIncome;

  public static final String SERIALIZED_NAME_HAS_ADDITIONAL_DEDUCTION = "HasAdditionalDeduction";
  @SerializedName(SERIALIZED_NAME_HAS_ADDITIONAL_DEDUCTION)
  private Boolean hasAdditionalDeduction;

  public static final String SERIALIZED_NAME_HAS_ACCURACY_CONFIRMATION = "HasAccuracyConfirmation";
  @SerializedName(SERIALIZED_NAME_HAS_ACCURACY_CONFIRMATION)
  private Boolean hasAccuracyConfirmation;

  public static final String SERIALIZED_NAME_HAS_QUALIFIED_DEPENDENT_CREDIT = "HasQualifiedDependentCredit";
  @SerializedName(SERIALIZED_NAME_HAS_QUALIFIED_DEPENDENT_CREDIT)
  private Boolean hasQualifiedDependentCredit;

  public static final String SERIALIZED_NAME_HAS_OTHER_DEPENDENT_CREDIT = "HasOtherDependentCredit";
  @SerializedName(SERIALIZED_NAME_HAS_OTHER_DEPENDENT_CREDIT)
  private Boolean hasOtherDependentCredit;

  public static final String SERIALIZED_NAME_HAS_TOTAL_CREDITS = "HasTotalCredits";
  @SerializedName(SERIALIZED_NAME_HAS_TOTAL_CREDITS)
  private Boolean hasTotalCredits;

  public static final String SERIALIZED_NAME_QUALIFIED_DEPENDENT_CREDIT = "QualifiedDependentCredit";
  @SerializedName(SERIALIZED_NAME_QUALIFIED_DEPENDENT_CREDIT)
  private Double qualifiedDependentCredit;

  public static final String SERIALIZED_NAME_OTHER_DEPENDENT_CREDIT = "OtherDependentCredit";
  @SerializedName(SERIALIZED_NAME_OTHER_DEPENDENT_CREDIT)
  private Double otherDependentCredit;

  public static final String SERIALIZED_NAME_FILING_STATUSES = "FilingStatuses";
  @SerializedName(SERIALIZED_NAME_FILING_STATUSES)
  private List<FilingStatus> filingStatuses = null;

  public static final String SERIALIZED_NAME_HAS_INCOME_TAX = "HasIncomeTax";
  @SerializedName(SERIALIZED_NAME_HAS_INCOME_TAX)
  private String hasIncomeTax;

  public GlobalTaxForm() {
  }

  public GlobalTaxForm effectiveStartDate(OffsetDateTime effectiveStartDate) {
    
    
    
    
    this.effectiveStartDate = effectiveStartDate;
    return this;
  }

   /**
   * Effective start date of withholding.
   * @return effectiveStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Effective start date of withholding.")

  public OffsetDateTime getEffectiveStartDate() {
    return effectiveStartDate;
  }


  public void setEffectiveStartDate(OffsetDateTime effectiveStartDate) {
    
    
    
    this.effectiveStartDate = effectiveStartDate;
  }


  public GlobalTaxForm effectiveEndDate(OffsetDateTime effectiveEndDate) {
    
    
    
    
    this.effectiveEndDate = effectiveEndDate;
    return this;
  }

   /**
   * Effective end date of withholding.
   * @return effectiveEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Effective end date of withholding.")

  public OffsetDateTime getEffectiveEndDate() {
    return effectiveEndDate;
  }


  public void setEffectiveEndDate(OffsetDateTime effectiveEndDate) {
    
    
    
    this.effectiveEndDate = effectiveEndDate;
  }


  public GlobalTaxForm hasFilingStatus(Boolean hasFilingStatus) {
    
    
    
    
    this.hasFilingStatus = hasFilingStatus;
    return this;
  }

   /**
   * Information whether global tax requires the Filing status.
   * @return hasFilingStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the Filing status.")

  public Boolean getHasFilingStatus() {
    return hasFilingStatus;
  }


  public void setHasFilingStatus(Boolean hasFilingStatus) {
    
    
    
    this.hasFilingStatus = hasFilingStatus;
  }


  public GlobalTaxForm hasAdjustWithholding(Boolean hasAdjustWithholding) {
    
    
    
    
    this.hasAdjustWithholding = hasAdjustWithholding;
    return this;
  }

   /**
   * Information whether global tax requires the adjust witholding field.
   * @return hasAdjustWithholding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the adjust witholding field.")

  public Boolean getHasAdjustWithholding() {
    return hasAdjustWithholding;
  }


  public void setHasAdjustWithholding(Boolean hasAdjustWithholding) {
    
    
    
    this.hasAdjustWithholding = hasAdjustWithholding;
  }


  public GlobalTaxForm hasOverrideWithholdingDate(Boolean hasOverrideWithholdingDate) {
    
    
    
    
    this.hasOverrideWithholdingDate = hasOverrideWithholdingDate;
    return this;
  }

   /**
   * Information whether global tax requires the override witholding date field.
   * @return hasOverrideWithholdingDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the override witholding date field.")

  public Boolean getHasOverrideWithholdingDate() {
    return hasOverrideWithholdingDate;
  }


  public void setHasOverrideWithholdingDate(Boolean hasOverrideWithholdingDate) {
    
    
    
    this.hasOverrideWithholdingDate = hasOverrideWithholdingDate;
  }


  public GlobalTaxForm hasApplicableBirthYear(Boolean hasApplicableBirthYear) {
    
    
    
    
    this.hasApplicableBirthYear = hasApplicableBirthYear;
    return this;
  }

   /**
   * Information whether global tax requires the applicable birth year field.
   * @return hasApplicableBirthYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the applicable birth year field.")

  public Boolean getHasApplicableBirthYear() {
    return hasApplicableBirthYear;
  }


  public void setHasApplicableBirthYear(Boolean hasApplicableBirthYear) {
    
    
    
    this.hasApplicableBirthYear = hasApplicableBirthYear;
  }


  public GlobalTaxForm hasAmount(Boolean hasAmount) {
    
    
    
    
    this.hasAmount = hasAmount;
    return this;
  }

   /**
   * Information whether global tax requires the amount field.
   * @return hasAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the amount field.")

  public Boolean getHasAmount() {
    return hasAmount;
  }


  public void setHasAmount(Boolean hasAmount) {
    
    
    
    this.hasAmount = hasAmount;
  }


  public GlobalTaxForm hasRate(Boolean hasRate) {
    
    
    
    
    this.hasRate = hasRate;
    return this;
  }

   /**
   * Information whether global tax requires the rate field.
   * @return hasRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the rate field.")

  public Boolean getHasRate() {
    return hasRate;
  }


  public void setHasRate(Boolean hasRate) {
    
    
    
    this.hasRate = hasRate;
  }


  public GlobalTaxForm hasExemptionAmount(Boolean hasExemptionAmount) {
    
    
    
    
    this.hasExemptionAmount = hasExemptionAmount;
    return this;
  }

   /**
   * Information whether global tax requires exemption amount field.
   * @return hasExemptionAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires exemption amount field.")

  public Boolean getHasExemptionAmount() {
    return hasExemptionAmount;
  }


  public void setHasExemptionAmount(Boolean hasExemptionAmount) {
    
    
    
    this.hasExemptionAmount = hasExemptionAmount;
  }


  public GlobalTaxForm hasNonResidentAlien(Boolean hasNonResidentAlien) {
    
    
    
    
    this.hasNonResidentAlien = hasNonResidentAlien;
    return this;
  }

   /**
   * Information whether global tax requires non resident alien field.
   * @return hasNonResidentAlien
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires non resident alien field.")

  public Boolean getHasNonResidentAlien() {
    return hasNonResidentAlien;
  }


  public void setHasNonResidentAlien(Boolean hasNonResidentAlien) {
    
    
    
    this.hasNonResidentAlien = hasNonResidentAlien;
  }


  public GlobalTaxForm hasNumberOfQualifiedDependents(Boolean hasNumberOfQualifiedDependents) {
    
    
    
    
    this.hasNumberOfQualifiedDependents = hasNumberOfQualifiedDependents;
    return this;
  }

   /**
   * Information whether global tax requires the number of qualified dependents field.
   * @return hasNumberOfQualifiedDependents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the number of qualified dependents field.")

  public Boolean getHasNumberOfQualifiedDependents() {
    return hasNumberOfQualifiedDependents;
  }


  public void setHasNumberOfQualifiedDependents(Boolean hasNumberOfQualifiedDependents) {
    
    
    
    this.hasNumberOfQualifiedDependents = hasNumberOfQualifiedDependents;
  }


  public GlobalTaxForm hasNumberOfOtherDependents(Boolean hasNumberOfOtherDependents) {
    
    
    
    
    this.hasNumberOfOtherDependents = hasNumberOfOtherDependents;
    return this;
  }

   /**
   * Information whether global tax requires the Number Of Other Dependents field.
   * @return hasNumberOfOtherDependents
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the Number Of Other Dependents field.")

  public Boolean getHasNumberOfOtherDependents() {
    return hasNumberOfOtherDependents;
  }


  public void setHasNumberOfOtherDependents(Boolean hasNumberOfOtherDependents) {
    
    
    
    this.hasNumberOfOtherDependents = hasNumberOfOtherDependents;
  }


  public GlobalTaxForm hasNumberOfExemptions(Boolean hasNumberOfExemptions) {
    
    
    
    
    this.hasNumberOfExemptions = hasNumberOfExemptions;
    return this;
  }

   /**
   * Information whether global tax requires the Number Of Exemptions field.
   * @return hasNumberOfExemptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the Number Of Exemptions field.")

  public Boolean getHasNumberOfExemptions() {
    return hasNumberOfExemptions;
  }


  public void setHasNumberOfExemptions(Boolean hasNumberOfExemptions) {
    
    
    
    this.hasNumberOfExemptions = hasNumberOfExemptions;
  }


  public GlobalTaxForm hasSpouseWorking(Boolean hasSpouseWorking) {
    
    
    
    
    this.hasSpouseWorking = hasSpouseWorking;
    return this;
  }

   /**
   * Information whether global tax requires the Spouse Working field.
   * @return hasSpouseWorking
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the Spouse Working field.")

  public Boolean getHasSpouseWorking() {
    return hasSpouseWorking;
  }


  public void setHasSpouseWorking(Boolean hasSpouseWorking) {
    
    
    
    this.hasSpouseWorking = hasSpouseWorking;
  }


  public GlobalTaxForm hasTwoIncomes(Boolean hasTwoIncomes) {
    
    
    
    
    this.hasTwoIncomes = hasTwoIncomes;
    return this;
  }

   /**
   * Information whether global tax requires the HasTwoIncomes field.
   * @return hasTwoIncomes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the HasTwoIncomes field.")

  public Boolean getHasTwoIncomes() {
    return hasTwoIncomes;
  }


  public void setHasTwoIncomes(Boolean hasTwoIncomes) {
    
    
    
    this.hasTwoIncomes = hasTwoIncomes;
  }


  public GlobalTaxForm hasAdditionalIncome(Boolean hasAdditionalIncome) {
    
    
    
    
    this.hasAdditionalIncome = hasAdditionalIncome;
    return this;
  }

   /**
   * Information whether global tax requires the AdditionalIncome field. Amount of employee&#39;s additional income as specified on employee&#39;s IRS Form W-4.
   * @return hasAdditionalIncome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the AdditionalIncome field. Amount of employee's additional income as specified on employee's IRS Form W-4.")

  public Boolean getHasAdditionalIncome() {
    return hasAdditionalIncome;
  }


  public void setHasAdditionalIncome(Boolean hasAdditionalIncome) {
    
    
    
    this.hasAdditionalIncome = hasAdditionalIncome;
  }


  public GlobalTaxForm hasAdditionalDeduction(Boolean hasAdditionalDeduction) {
    
    
    
    
    this.hasAdditionalDeduction = hasAdditionalDeduction;
    return this;
  }

   /**
   * Information whether global tax requires the Additional Deduction field.
   * @return hasAdditionalDeduction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the Additional Deduction field.")

  public Boolean getHasAdditionalDeduction() {
    return hasAdditionalDeduction;
  }


  public void setHasAdditionalDeduction(Boolean hasAdditionalDeduction) {
    
    
    
    this.hasAdditionalDeduction = hasAdditionalDeduction;
  }


  public GlobalTaxForm hasAccuracyConfirmation(Boolean hasAccuracyConfirmation) {
    
    
    
    
    this.hasAccuracyConfirmation = hasAccuracyConfirmation;
    return this;
  }

   /**
   * Information whether global tax requires the Accuracy Confirmation field.
   * @return hasAccuracyConfirmation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the Accuracy Confirmation field.")

  public Boolean getHasAccuracyConfirmation() {
    return hasAccuracyConfirmation;
  }


  public void setHasAccuracyConfirmation(Boolean hasAccuracyConfirmation) {
    
    
    
    this.hasAccuracyConfirmation = hasAccuracyConfirmation;
  }


  public GlobalTaxForm hasQualifiedDependentCredit(Boolean hasQualifiedDependentCredit) {
    
    
    
    
    this.hasQualifiedDependentCredit = hasQualifiedDependentCredit;
    return this;
  }

   /**
   * Information whether global tax requires the Qualified Dependent Credit field.
   * @return hasQualifiedDependentCredit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the Qualified Dependent Credit field.")

  public Boolean getHasQualifiedDependentCredit() {
    return hasQualifiedDependentCredit;
  }


  public void setHasQualifiedDependentCredit(Boolean hasQualifiedDependentCredit) {
    
    
    
    this.hasQualifiedDependentCredit = hasQualifiedDependentCredit;
  }


  public GlobalTaxForm hasOtherDependentCredit(Boolean hasOtherDependentCredit) {
    
    
    
    
    this.hasOtherDependentCredit = hasOtherDependentCredit;
    return this;
  }

   /**
   * Information whether global tax requires the Other Dependent Credit field.
   * @return hasOtherDependentCredit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires the Other Dependent Credit field.")

  public Boolean getHasOtherDependentCredit() {
    return hasOtherDependentCredit;
  }


  public void setHasOtherDependentCredit(Boolean hasOtherDependentCredit) {
    
    
    
    this.hasOtherDependentCredit = hasOtherDependentCredit;
  }


  public GlobalTaxForm hasTotalCredits(Boolean hasTotalCredits) {
    
    
    
    
    this.hasTotalCredits = hasTotalCredits;
    return this;
  }

   /**
   * Information whether global tax requires Total Credits field.
   * @return hasTotalCredits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Information whether global tax requires Total Credits field.")

  public Boolean getHasTotalCredits() {
    return hasTotalCredits;
  }


  public void setHasTotalCredits(Boolean hasTotalCredits) {
    
    
    
    this.hasTotalCredits = hasTotalCredits;
  }


  public GlobalTaxForm qualifiedDependentCredit(Double qualifiedDependentCredit) {
    
    
    
    
    this.qualifiedDependentCredit = qualifiedDependentCredit;
    return this;
  }

  public GlobalTaxForm qualifiedDependentCredit(Integer qualifiedDependentCredit) {
    
    
    
    
    this.qualifiedDependentCredit = qualifiedDependentCredit.doubleValue();
    return this;
  }

   /**
   * Information whether global tax requires Qualified Dependent Credit field.
   * @return qualifiedDependentCredit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information whether global tax requires Qualified Dependent Credit field.")

  public Double getQualifiedDependentCredit() {
    return qualifiedDependentCredit;
  }


  public void setQualifiedDependentCredit(Double qualifiedDependentCredit) {
    
    
    
    this.qualifiedDependentCredit = qualifiedDependentCredit;
  }


  public GlobalTaxForm otherDependentCredit(Double otherDependentCredit) {
    
    
    
    
    this.otherDependentCredit = otherDependentCredit;
    return this;
  }

  public GlobalTaxForm otherDependentCredit(Integer otherDependentCredit) {
    
    
    
    
    this.otherDependentCredit = otherDependentCredit.doubleValue();
    return this;
  }

   /**
   * Information whether global tax requires Other Dependent Credit field.
   * @return otherDependentCredit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Information whether global tax requires Other Dependent Credit field.")

  public Double getOtherDependentCredit() {
    return otherDependentCredit;
  }


  public void setOtherDependentCredit(Double otherDependentCredit) {
    
    
    
    this.otherDependentCredit = otherDependentCredit;
  }


  public GlobalTaxForm filingStatuses(List<FilingStatus> filingStatuses) {
    
    
    
    
    this.filingStatuses = filingStatuses;
    return this;
  }

  public GlobalTaxForm addFilingStatusesItem(FilingStatus filingStatusesItem) {
    if (this.filingStatuses == null) {
      this.filingStatuses = new ArrayList<>();
    }
    this.filingStatuses.add(filingStatusesItem);
    return this;
  }

   /**
   * Enumeration of valid filing status values for this tax code.
   * @return filingStatuses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "S", value = "Enumeration of valid filing status values for this tax code.")

  public List<FilingStatus> getFilingStatuses() {
    return filingStatuses;
  }


  public void setFilingStatuses(List<FilingStatus> filingStatuses) {
    
    
    
    this.filingStatuses = filingStatuses;
  }


  public GlobalTaxForm hasIncomeTax(String hasIncomeTax) {
    
    
    
    
    this.hasIncomeTax = hasIncomeTax;
    return this;
  }

   /**
   * Information whether global tax requires the Income Tax field.
   * @return hasIncomeTax
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Y", value = "Information whether global tax requires the Income Tax field.")

  public String getHasIncomeTax() {
    return hasIncomeTax;
  }


  public void setHasIncomeTax(String hasIncomeTax) {
    
    
    
    this.hasIncomeTax = hasIncomeTax;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GlobalTaxForm instance itself
   */
  public GlobalTaxForm putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GlobalTaxForm globalTaxForm = (GlobalTaxForm) o;
    return Objects.equals(this.effectiveStartDate, globalTaxForm.effectiveStartDate) &&
        Objects.equals(this.effectiveEndDate, globalTaxForm.effectiveEndDate) &&
        Objects.equals(this.hasFilingStatus, globalTaxForm.hasFilingStatus) &&
        Objects.equals(this.hasAdjustWithholding, globalTaxForm.hasAdjustWithholding) &&
        Objects.equals(this.hasOverrideWithholdingDate, globalTaxForm.hasOverrideWithholdingDate) &&
        Objects.equals(this.hasApplicableBirthYear, globalTaxForm.hasApplicableBirthYear) &&
        Objects.equals(this.hasAmount, globalTaxForm.hasAmount) &&
        Objects.equals(this.hasRate, globalTaxForm.hasRate) &&
        Objects.equals(this.hasExemptionAmount, globalTaxForm.hasExemptionAmount) &&
        Objects.equals(this.hasNonResidentAlien, globalTaxForm.hasNonResidentAlien) &&
        Objects.equals(this.hasNumberOfQualifiedDependents, globalTaxForm.hasNumberOfQualifiedDependents) &&
        Objects.equals(this.hasNumberOfOtherDependents, globalTaxForm.hasNumberOfOtherDependents) &&
        Objects.equals(this.hasNumberOfExemptions, globalTaxForm.hasNumberOfExemptions) &&
        Objects.equals(this.hasSpouseWorking, globalTaxForm.hasSpouseWorking) &&
        Objects.equals(this.hasTwoIncomes, globalTaxForm.hasTwoIncomes) &&
        Objects.equals(this.hasAdditionalIncome, globalTaxForm.hasAdditionalIncome) &&
        Objects.equals(this.hasAdditionalDeduction, globalTaxForm.hasAdditionalDeduction) &&
        Objects.equals(this.hasAccuracyConfirmation, globalTaxForm.hasAccuracyConfirmation) &&
        Objects.equals(this.hasQualifiedDependentCredit, globalTaxForm.hasQualifiedDependentCredit) &&
        Objects.equals(this.hasOtherDependentCredit, globalTaxForm.hasOtherDependentCredit) &&
        Objects.equals(this.hasTotalCredits, globalTaxForm.hasTotalCredits) &&
        Objects.equals(this.qualifiedDependentCredit, globalTaxForm.qualifiedDependentCredit) &&
        Objects.equals(this.otherDependentCredit, globalTaxForm.otherDependentCredit) &&
        Objects.equals(this.filingStatuses, globalTaxForm.filingStatuses) &&
        Objects.equals(this.hasIncomeTax, globalTaxForm.hasIncomeTax)&&
        Objects.equals(this.additionalProperties, globalTaxForm.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveStartDate, effectiveEndDate, hasFilingStatus, hasAdjustWithholding, hasOverrideWithholdingDate, hasApplicableBirthYear, hasAmount, hasRate, hasExemptionAmount, hasNonResidentAlien, hasNumberOfQualifiedDependents, hasNumberOfOtherDependents, hasNumberOfExemptions, hasSpouseWorking, hasTwoIncomes, hasAdditionalIncome, hasAdditionalDeduction, hasAccuracyConfirmation, hasQualifiedDependentCredit, hasOtherDependentCredit, hasTotalCredits, qualifiedDependentCredit, otherDependentCredit, filingStatuses, hasIncomeTax, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GlobalTaxForm {\n");
    sb.append("    effectiveStartDate: ").append(toIndentedString(effectiveStartDate)).append("\n");
    sb.append("    effectiveEndDate: ").append(toIndentedString(effectiveEndDate)).append("\n");
    sb.append("    hasFilingStatus: ").append(toIndentedString(hasFilingStatus)).append("\n");
    sb.append("    hasAdjustWithholding: ").append(toIndentedString(hasAdjustWithholding)).append("\n");
    sb.append("    hasOverrideWithholdingDate: ").append(toIndentedString(hasOverrideWithholdingDate)).append("\n");
    sb.append("    hasApplicableBirthYear: ").append(toIndentedString(hasApplicableBirthYear)).append("\n");
    sb.append("    hasAmount: ").append(toIndentedString(hasAmount)).append("\n");
    sb.append("    hasRate: ").append(toIndentedString(hasRate)).append("\n");
    sb.append("    hasExemptionAmount: ").append(toIndentedString(hasExemptionAmount)).append("\n");
    sb.append("    hasNonResidentAlien: ").append(toIndentedString(hasNonResidentAlien)).append("\n");
    sb.append("    hasNumberOfQualifiedDependents: ").append(toIndentedString(hasNumberOfQualifiedDependents)).append("\n");
    sb.append("    hasNumberOfOtherDependents: ").append(toIndentedString(hasNumberOfOtherDependents)).append("\n");
    sb.append("    hasNumberOfExemptions: ").append(toIndentedString(hasNumberOfExemptions)).append("\n");
    sb.append("    hasSpouseWorking: ").append(toIndentedString(hasSpouseWorking)).append("\n");
    sb.append("    hasTwoIncomes: ").append(toIndentedString(hasTwoIncomes)).append("\n");
    sb.append("    hasAdditionalIncome: ").append(toIndentedString(hasAdditionalIncome)).append("\n");
    sb.append("    hasAdditionalDeduction: ").append(toIndentedString(hasAdditionalDeduction)).append("\n");
    sb.append("    hasAccuracyConfirmation: ").append(toIndentedString(hasAccuracyConfirmation)).append("\n");
    sb.append("    hasQualifiedDependentCredit: ").append(toIndentedString(hasQualifiedDependentCredit)).append("\n");
    sb.append("    hasOtherDependentCredit: ").append(toIndentedString(hasOtherDependentCredit)).append("\n");
    sb.append("    hasTotalCredits: ").append(toIndentedString(hasTotalCredits)).append("\n");
    sb.append("    qualifiedDependentCredit: ").append(toIndentedString(qualifiedDependentCredit)).append("\n");
    sb.append("    otherDependentCredit: ").append(toIndentedString(otherDependentCredit)).append("\n");
    sb.append("    filingStatuses: ").append(toIndentedString(filingStatuses)).append("\n");
    sb.append("    hasIncomeTax: ").append(toIndentedString(hasIncomeTax)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EffectiveStartDate");
    openapiFields.add("EffectiveEndDate");
    openapiFields.add("HasFilingStatus");
    openapiFields.add("HasAdjustWithholding");
    openapiFields.add("HasOverrideWithholdingDate");
    openapiFields.add("HasApplicableBirthYear");
    openapiFields.add("HasAmount");
    openapiFields.add("HasRate");
    openapiFields.add("HasExemptionAmount");
    openapiFields.add("HasNonResidentAlien");
    openapiFields.add("HasNumberOfQualifiedDependents");
    openapiFields.add("HasNumberOfOtherDependents");
    openapiFields.add("HasNumberOfExemptions");
    openapiFields.add("HasSpouseWorking");
    openapiFields.add("HasTwoIncomes");
    openapiFields.add("HasAdditionalIncome");
    openapiFields.add("HasAdditionalDeduction");
    openapiFields.add("HasAccuracyConfirmation");
    openapiFields.add("HasQualifiedDependentCredit");
    openapiFields.add("HasOtherDependentCredit");
    openapiFields.add("HasTotalCredits");
    openapiFields.add("QualifiedDependentCredit");
    openapiFields.add("OtherDependentCredit");
    openapiFields.add("FilingStatuses");
    openapiFields.add("HasIncomeTax");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GlobalTaxForm
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GlobalTaxForm.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GlobalTaxForm is not found in the empty JSON string", GlobalTaxForm.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("FilingStatuses") != null && !jsonObj.get("FilingStatuses").isJsonNull()) {
        JsonArray jsonArrayfilingStatuses = jsonObj.getAsJsonArray("FilingStatuses");
        if (jsonArrayfilingStatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("FilingStatuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `FilingStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("FilingStatuses").toString()));
          }

          // validate the optional field `FilingStatuses` (array)
          for (int i = 0; i < jsonArrayfilingStatuses.size(); i++) {
            FilingStatus.validateJsonObject(jsonArrayfilingStatuses.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("HasIncomeTax").isJsonNull() && (jsonObj.get("HasIncomeTax") != null && !jsonObj.get("HasIncomeTax").isJsonNull()) && !jsonObj.get("HasIncomeTax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HasIncomeTax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HasIncomeTax").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GlobalTaxForm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GlobalTaxForm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GlobalTaxForm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GlobalTaxForm.class));

       return (TypeAdapter<T>) new TypeAdapter<GlobalTaxForm>() {
           @Override
           public void write(JsonWriter out, GlobalTaxForm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GlobalTaxForm read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GlobalTaxForm instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GlobalTaxForm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GlobalTaxForm
  * @throws IOException if the JSON string is invalid with respect to GlobalTaxForm
  */
  public static GlobalTaxForm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GlobalTaxForm.class);
  }

 /**
  * Convert an instance of GlobalTaxForm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

