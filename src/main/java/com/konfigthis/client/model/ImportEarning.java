/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.LaborCode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Employee-specific Payroll Import row for a specific working date range. Includes all Pay-related info. 
 */
@ApiModel(description = "Employee-specific Payroll Import row for a specific working date range. Includes all Pay-related info. ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ImportEarning {
  public static final String SERIALIZED_NAME_DEPARTMENT_CODE = "DepartmentCode";
  @SerializedName(SERIALIZED_NAME_DEPARTMENT_CODE)
  private Long departmentCode;

  public static final String SERIALIZED_NAME_EARNING_CODE = "EarningCode";
  @SerializedName(SERIALIZED_NAME_EARNING_CODE)
  private String earningCode;

  public static final String SERIALIZED_NAME_EARNING_HOURS = "EarningHours";
  @SerializedName(SERIALIZED_NAME_EARNING_HOURS)
  private Double earningHours;

  public static final String SERIALIZED_NAME_EARNING_AMOUNT = "EarningAmount";
  @SerializedName(SERIALIZED_NAME_EARNING_AMOUNT)
  private Double earningAmount;

  public static final String SERIALIZED_NAME_EARNING_RATE = "EarningRate";
  @SerializedName(SERIALIZED_NAME_EARNING_RATE)
  private Double earningRate;

  public static final String SERIALIZED_NAME_BUSINESS_START_DATE = "BusinessStartDate";
  @SerializedName(SERIALIZED_NAME_BUSINESS_START_DATE)
  private OffsetDateTime businessStartDate;

  public static final String SERIALIZED_NAME_BUSINESS_END_DATE = "BusinessEndDate";
  @SerializedName(SERIALIZED_NAME_BUSINESS_END_DATE)
  private OffsetDateTime businessEndDate;

  public static final String SERIALIZED_NAME_DATE_WORKED = "DateWorked";
  @SerializedName(SERIALIZED_NAME_DATE_WORKED)
  private OffsetDateTime dateWorked;

  public static final String SERIALIZED_NAME_LABOR_CODES = "LaborCodes";
  @SerializedName(SERIALIZED_NAME_LABOR_CODES)
  private List<LaborCode> laborCodes = null;

  public static final String SERIALIZED_NAME_PAY_GROUP_ID = "PayGroupId";
  @SerializedName(SERIALIZED_NAME_PAY_GROUP_ID)
  private String payGroupId;

  public static final String SERIALIZED_NAME_PAY_NUMBER = "PayNumber";
  @SerializedName(SERIALIZED_NAME_PAY_NUMBER)
  private Integer payNumber;

  public static final String SERIALIZED_NAME_CLIENT_DEFINED_VALUE = "ClientDefinedValue";
  @SerializedName(SERIALIZED_NAME_CLIENT_DEFINED_VALUE)
  private String clientDefinedValue;

  public ImportEarning() {
  }

  public ImportEarning departmentCode(Long departmentCode) {
    
    
    
    
    this.departmentCode = departmentCode;
    return this;
  }

   /**
   * Department code that the Hours should be paid under. You can use GET Legal Entity Departments to retrieve valid Code values. 
   * @return departmentCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "334", required = true, value = "Department code that the Hours should be paid under. You can use GET Legal Entity Departments to retrieve valid Code values. ")

  public Long getDepartmentCode() {
    return departmentCode;
  }


  public void setDepartmentCode(Long departmentCode) {
    
    
    
    this.departmentCode = departmentCode;
  }


  public ImportEarning earningCode(String earningCode) {
    
    
    if (earningCode != null && earningCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for earningCode. Length must be greater than or equal to 1.");
    }
    
    this.earningCode = earningCode;
    return this;
  }

   /**
   * Employee&#39;s earning Code. You can retrieve via Get Employee Earnings endpoints.
   * @return earningCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ERC300", required = true, value = "Employee's earning Code. You can retrieve via Get Employee Earnings endpoints.")

  public String getEarningCode() {
    return earningCode;
  }


  public void setEarningCode(String earningCode) {
    
    
    if (earningCode != null && earningCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for earningCode. Length must be greater than or equal to 1.");
    }
    this.earningCode = earningCode;
  }


  public ImportEarning earningHours(Double earningHours) {
    
    
    
    
    this.earningHours = earningHours;
    return this;
  }

  public ImportEarning earningHours(Integer earningHours) {
    
    
    
    
    this.earningHours = earningHours.doubleValue();
    return this;
  }

   /**
   * Number of hours that Employee worked.
   * @return earningHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3.5", value = "Number of hours that Employee worked.")

  public Double getEarningHours() {
    return earningHours;
  }


  public void setEarningHours(Double earningHours) {
    
    
    
    this.earningHours = earningHours;
  }


  public ImportEarning earningAmount(Double earningAmount) {
    
    
    
    
    this.earningAmount = earningAmount;
    return this;
  }

  public ImportEarning earningAmount(Integer earningAmount) {
    
    
    
    
    this.earningAmount = earningAmount.doubleValue();
    return this;
  }

   /**
   * Dollar amount that Employee earned.
   * @return earningAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "150.57", value = "Dollar amount that Employee earned.")

  public Double getEarningAmount() {
    return earningAmount;
  }


  public void setEarningAmount(Double earningAmount) {
    
    
    
    this.earningAmount = earningAmount;
  }


  public ImportEarning earningRate(Double earningRate) {
    
    
    
    
    this.earningRate = earningRate;
    return this;
  }

  public ImportEarning earningRate(Integer earningRate) {
    
    
    
    
    this.earningRate = earningRate.doubleValue();
    return this;
  }

   /**
   * Dollar rate to assign to the earning. 
   * @return earningRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "15.09", value = "Dollar rate to assign to the earning. ")

  public Double getEarningRate() {
    return earningRate;
  }


  public void setEarningRate(Double earningRate) {
    
    
    
    this.earningRate = earningRate;
  }


  public ImportEarning businessStartDate(OffsetDateTime businessStartDate) {
    
    
    if (businessStartDate != null && businessStartDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for businessStartDate. Length must be greater than or equal to 1.");
    }
    
    this.businessStartDate = businessStartDate;
    return this;
  }

   /**
   * Start date of TimeCard
   * @return businessStartDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-11-17T12:00Z", required = true, value = "Start date of TimeCard")

  public OffsetDateTime getBusinessStartDate() {
    return businessStartDate;
  }


  public void setBusinessStartDate(OffsetDateTime businessStartDate) {
    
    
    if (businessStartDate != null && businessStartDate.length() < 1) {
      throw new IllegalArgumentException("Invalid value for businessStartDate. Length must be greater than or equal to 1.");
    }
    this.businessStartDate = businessStartDate;
  }


  public ImportEarning businessEndDate(OffsetDateTime businessEndDate) {
    
    
    
    
    this.businessEndDate = businessEndDate;
    return this;
  }

   /**
   * End date of TimeCard
   * @return businessEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-11-22T12:00Z", value = "End date of TimeCard")

  public OffsetDateTime getBusinessEndDate() {
    return businessEndDate;
  }


  public void setBusinessEndDate(OffsetDateTime businessEndDate) {
    
    
    
    this.businessEndDate = businessEndDate;
  }


  public ImportEarning dateWorked(OffsetDateTime dateWorked) {
    
    
    
    
    this.dateWorked = dateWorked;
    return this;
  }

   /**
   * The date worked (associated with this earning).  Optional. May be used by clients who have Workweek calculation feature enabled or by specific partner integrations.
   * @return dateWorked
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-01-22T12:00Z", value = "The date worked (associated with this earning).  Optional. May be used by clients who have Workweek calculation feature enabled or by specific partner integrations.")

  public OffsetDateTime getDateWorked() {
    return dateWorked;
  }


  public void setDateWorked(OffsetDateTime dateWorked) {
    
    
    
    this.dateWorked = dateWorked;
  }


  public ImportEarning laborCodes(List<LaborCode> laborCodes) {
    
    
    
    
    this.laborCodes = laborCodes;
    return this;
  }

  public ImportEarning addLaborCodesItem(LaborCode laborCodesItem) {
    if (this.laborCodes == null) {
      this.laborCodes = new ArrayList<>();
    }
    this.laborCodes.add(laborCodesItem);
    return this;
  }

   /**
   * Optional. This allows supplying Labor Codes tied to this earning, used for Job Costing and other functionality. 
   * @return laborCodes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional. This allows supplying Labor Codes tied to this earning, used for Job Costing and other functionality. ")

  public List<LaborCode> getLaborCodes() {
    return laborCodes;
  }


  public void setLaborCodes(List<LaborCode> laborCodes) {
    
    
    
    this.laborCodes = laborCodes;
  }


  public ImportEarning payGroupId(String payGroupId) {
    
    
    if (payGroupId != null && payGroupId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for payGroupId. Length must be greater than or equal to 1.");
    }
    
    this.payGroupId = payGroupId;
    return this;
  }

   /**
   * Unique identifier of the pay group in Paycor&#39;s system. You can retrieve by calling &#39;Get Pay Groups by Legal Entity ID&#39;
   * @return payGroupId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "71c9338a-4c28-0000-0000-0000712f0300", required = true, value = "Unique identifier of the pay group in Paycor's system. You can retrieve by calling 'Get Pay Groups by Legal Entity ID'")

  public String getPayGroupId() {
    return payGroupId;
  }


  public void setPayGroupId(String payGroupId) {
    
    
    if (payGroupId != null && payGroupId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for payGroupId. Length must be greater than or equal to 1.");
    }
    this.payGroupId = payGroupId;
  }


  public ImportEarning payNumber(Integer payNumber) {
    
    
    
    
    this.payNumber = payNumber;
    return this;
  }

   /**
   * Optional, defaults to 1.  Indicates which paycheck for this employee the earning will appear on (essentially a sort order for the particular Employee).  Use sequential values such as 1, 2, 3...
   * @return payNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional, defaults to 1.  Indicates which paycheck for this employee the earning will appear on (essentially a sort order for the particular Employee).  Use sequential values such as 1, 2, 3...")

  public Integer getPayNumber() {
    return payNumber;
  }


  public void setPayNumber(Integer payNumber) {
    
    
    
    this.payNumber = payNumber;
  }


  public ImportEarning clientDefinedValue(String clientDefinedValue) {
    
    
    
    
    this.clientDefinedValue = clientDefinedValue;
    return this;
  }

   /**
   * Optional. This field allows passing in additional information used by specific partner integrations.
   * @return clientDefinedValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional. This field allows passing in additional information used by specific partner integrations.")

  public String getClientDefinedValue() {
    return clientDefinedValue;
  }


  public void setClientDefinedValue(String clientDefinedValue) {
    
    
    
    this.clientDefinedValue = clientDefinedValue;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ImportEarning instance itself
   */
  public ImportEarning putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportEarning importEarning = (ImportEarning) o;
    return Objects.equals(this.departmentCode, importEarning.departmentCode) &&
        Objects.equals(this.earningCode, importEarning.earningCode) &&
        Objects.equals(this.earningHours, importEarning.earningHours) &&
        Objects.equals(this.earningAmount, importEarning.earningAmount) &&
        Objects.equals(this.earningRate, importEarning.earningRate) &&
        Objects.equals(this.businessStartDate, importEarning.businessStartDate) &&
        Objects.equals(this.businessEndDate, importEarning.businessEndDate) &&
        Objects.equals(this.dateWorked, importEarning.dateWorked) &&
        Objects.equals(this.laborCodes, importEarning.laborCodes) &&
        Objects.equals(this.payGroupId, importEarning.payGroupId) &&
        Objects.equals(this.payNumber, importEarning.payNumber) &&
        Objects.equals(this.clientDefinedValue, importEarning.clientDefinedValue)&&
        Objects.equals(this.additionalProperties, importEarning.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(departmentCode, earningCode, earningHours, earningAmount, earningRate, businessStartDate, businessEndDate, dateWorked, laborCodes, payGroupId, payNumber, clientDefinedValue, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportEarning {\n");
    sb.append("    departmentCode: ").append(toIndentedString(departmentCode)).append("\n");
    sb.append("    earningCode: ").append(toIndentedString(earningCode)).append("\n");
    sb.append("    earningHours: ").append(toIndentedString(earningHours)).append("\n");
    sb.append("    earningAmount: ").append(toIndentedString(earningAmount)).append("\n");
    sb.append("    earningRate: ").append(toIndentedString(earningRate)).append("\n");
    sb.append("    businessStartDate: ").append(toIndentedString(businessStartDate)).append("\n");
    sb.append("    businessEndDate: ").append(toIndentedString(businessEndDate)).append("\n");
    sb.append("    dateWorked: ").append(toIndentedString(dateWorked)).append("\n");
    sb.append("    laborCodes: ").append(toIndentedString(laborCodes)).append("\n");
    sb.append("    payGroupId: ").append(toIndentedString(payGroupId)).append("\n");
    sb.append("    payNumber: ").append(toIndentedString(payNumber)).append("\n");
    sb.append("    clientDefinedValue: ").append(toIndentedString(clientDefinedValue)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DepartmentCode");
    openapiFields.add("EarningCode");
    openapiFields.add("EarningHours");
    openapiFields.add("EarningAmount");
    openapiFields.add("EarningRate");
    openapiFields.add("BusinessStartDate");
    openapiFields.add("BusinessEndDate");
    openapiFields.add("DateWorked");
    openapiFields.add("LaborCodes");
    openapiFields.add("PayGroupId");
    openapiFields.add("PayNumber");
    openapiFields.add("ClientDefinedValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DepartmentCode");
    openapiRequiredFields.add("EarningCode");
    openapiRequiredFields.add("BusinessStartDate");
    openapiRequiredFields.add("PayGroupId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ImportEarning
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ImportEarning.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportEarning is not found in the empty JSON string", ImportEarning.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportEarning.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("EarningCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EarningCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EarningCode").toString()));
      }
      if (jsonObj.get("LaborCodes") != null && !jsonObj.get("LaborCodes").isJsonNull()) {
        JsonArray jsonArraylaborCodes = jsonObj.getAsJsonArray("LaborCodes");
        if (jsonArraylaborCodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LaborCodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LaborCodes` to be an array in the JSON string but got `%s`", jsonObj.get("LaborCodes").toString()));
          }

          // validate the optional field `LaborCodes` (array)
          for (int i = 0; i < jsonArraylaborCodes.size(); i++) {
            LaborCode.validateJsonObject(jsonArraylaborCodes.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("PayGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayGroupId").toString()));
      }
      if (!jsonObj.get("ClientDefinedValue").isJsonNull() && (jsonObj.get("ClientDefinedValue") != null && !jsonObj.get("ClientDefinedValue").isJsonNull()) && !jsonObj.get("ClientDefinedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientDefinedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientDefinedValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportEarning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportEarning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportEarning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportEarning.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportEarning>() {
           @Override
           public void write(JsonWriter out, ImportEarning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportEarning read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ImportEarning instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImportEarning given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImportEarning
  * @throws IOException if the JSON string is invalid with respect to ImportEarning
  */
  public static ImportEarning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportEarning.class);
  }

 /**
  * Convert an instance of ImportEarning to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

