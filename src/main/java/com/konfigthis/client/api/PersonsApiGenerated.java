/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Includes20;
import com.konfigthis.client.model.Includes21;
import com.konfigthis.client.model.IncludesList;
import com.konfigthis.client.model.PagedResultOfPerson;
import com.konfigthis.client.model.PagedResultOfPersonList;
import com.konfigthis.client.model.Person;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PersonsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PersonsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByEmployeeIdPersonCall(String employeeId, List<Includes21> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/person"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdPersonValidateBeforeCall(String employeeId, List<Includes21> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeIdPerson(Async)");
        }

        return getByEmployeeIdPersonCall(employeeId, include, _callback);

    }


    private ApiResponse<Person> getByEmployeeIdPersonWithHttpInfo(String employeeId, List<Includes21> include) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdPersonValidateBeforeCall(employeeId, include, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdPersonAsync(String employeeId, List<Includes21> include, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdPersonValidateBeforeCall(employeeId, include, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdPersonRequestBuilder {
        private final String employeeId;
        private List<Includes21> include;

        private GetByEmployeeIdPersonRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, Demographic, Benefit, Military, SocialMedia, Addresses, EmployeeAssignments, EmergencyContact, SocialSecurityNumber, Phones (optional)
         * @return GetByEmployeeIdPersonRequestBuilder
         */
        public GetByEmployeeIdPersonRequestBuilder include(List<Includes21> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Build call for getByEmployeeIdPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Person based on the EmployeeID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdPersonCall(employeeId, include, _callback);
        }


        /**
         * Execute getByEmployeeIdPerson request
         * @return Person
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Person based on the EmployeeID provided. </td><td>  -  </td></tr>
         </table>
         */
        public Person execute() throws ApiException {
            ApiResponse<Person> localVarResp = getByEmployeeIdPersonWithHttpInfo(employeeId, include);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeIdPerson request with HTTP info returned
         * @return ApiResponse&lt;Person&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Person based on the EmployeeID provided. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Person> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdPersonWithHttpInfo(employeeId, include);
        }

        /**
         * Execute getByEmployeeIdPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Person based on the EmployeeID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Person> _callback) throws ApiException {
            return getByEmployeeIdPersonAsync(employeeId, include, _callback);
        }
    }

    /**
     * Get Person by EmployeeID
     * Data Access: View Employee Person
     * @param employeeId EmployeeID linked to the Person you want to get (required)
     * @return GetByEmployeeIdPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Person based on the EmployeeID provided. </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdPersonRequestBuilder getByEmployeeIdPerson(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdPersonRequestBuilder(employeeId);
    }
    private okhttp3.Call getByTenantAndPersonCall(Integer tenantId, String personId, List<Includes20> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tenants/{tenantId}/persons/{personId}"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "personId" + "}", localVarApiClient.escapeString(personId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByTenantAndPersonValidateBeforeCall(Integer tenantId, String personId, List<Includes20> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getByTenantAndPerson(Async)");
        }

        // verify the required parameter 'personId' is set
        if (personId == null) {
            throw new ApiException("Missing the required parameter 'personId' when calling getByTenantAndPerson(Async)");
        }

        return getByTenantAndPersonCall(tenantId, personId, include, _callback);

    }


    private ApiResponse<Person> getByTenantAndPersonWithHttpInfo(Integer tenantId, String personId, List<Includes20> include) throws ApiException {
        okhttp3.Call localVarCall = getByTenantAndPersonValidateBeforeCall(tenantId, personId, include, null);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByTenantAndPersonAsync(Integer tenantId, String personId, List<Includes20> include, final ApiCallback<Person> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByTenantAndPersonValidateBeforeCall(tenantId, personId, include, _callback);
        Type localVarReturnType = new TypeToken<Person>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByTenantAndPersonRequestBuilder {
        private final Integer tenantId;
        private final String personId;
        private List<Includes20> include;

        private GetByTenantAndPersonRequestBuilder(Integer tenantId, String personId) {
            this.tenantId = tenantId;
            this.personId = personId;
        }

        /**
         * Set include
         * @param include Options to include more data:  All, Demographic, Benefit, Military, SocialMedia, Addresses, EmployeeAssignments, EmergencyContact, SocialSecurityNumber, Phones  Demographic &#x3D; View Person Demographic Information  Benefit &#x3D; View Person Disability and Tobacco Status  Military &#x3D; View Person Military  SocialMedia &#x3D; View Person Social Media  Addresses &#x3D; View Person Addresses  EmployeeAssignments &#x3D; View Employee Records  EmergencyContact &#x3D; View Person Emergency Contacts  SocialSecurityNumber &#x3D; View Person SSN  Phones &#x3D; View Person Phone (optional)
         * @return GetByTenantAndPersonRequestBuilder
         */
        public GetByTenantAndPersonRequestBuilder include(List<Includes20> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Build call for getByTenantAndPerson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Person Details based on the TenantID and PersonID provided, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByTenantAndPersonCall(tenantId, personId, include, _callback);
        }


        /**
         * Execute getByTenantAndPerson request
         * @return Person
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Person Details based on the TenantID and PersonID provided, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
         </table>
         */
        public Person execute() throws ApiException {
            ApiResponse<Person> localVarResp = getByTenantAndPersonWithHttpInfo(tenantId, personId, include);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByTenantAndPerson request with HTTP info returned
         * @return ApiResponse&lt;Person&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Person Details based on the TenantID and PersonID provided, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Person> executeWithHttpInfo() throws ApiException {
            return getByTenantAndPersonWithHttpInfo(tenantId, personId, include);
        }

        /**
         * Execute getByTenantAndPerson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Person Details based on the TenantID and PersonID provided, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Person> _callback) throws ApiException {
            return getByTenantAndPersonAsync(tenantId, personId, include, _callback);
        }
    }

    /**
     * Get Person By TenantID And PersonID
     * Note that PersonID and TenantID must always be passed together.  Data Access: View Person Information
     * @param tenantId ID of the Tenant that the Person is in (required)
     * @param personId ID of the Person you want to get (required)
     * @return GetByTenantAndPersonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Person Details based on the TenantID and PersonID provided, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
     </table>
     */
    public GetByTenantAndPersonRequestBuilder getByTenantAndPerson(Integer tenantId, String personId) throws IllegalArgumentException {
        if (tenantId == null) throw new IllegalArgumentException("\"tenantId\" is required but got null");
        if (personId == null) throw new IllegalArgumentException("\"personId\" is required but got null");
            

        return new GetByTenantAndPersonRequestBuilder(tenantId, personId);
    }
    private okhttp3.Call listByLegalEntityIdCall(Integer legalEntityId, List<IncludesList> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalEntities/{legalEntityId}/persons"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByLegalEntityIdValidateBeforeCall(Integer legalEntityId, List<IncludesList> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling listByLegalEntityId(Async)");
        }

        return listByLegalEntityIdCall(legalEntityId, include, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfPerson> listByLegalEntityIdWithHttpInfo(Integer legalEntityId, List<IncludesList> include, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listByLegalEntityIdValidateBeforeCall(legalEntityId, include, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfPerson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByLegalEntityIdAsync(Integer legalEntityId, List<IncludesList> include, String continuationToken, final ApiCallback<PagedResultOfPerson> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByLegalEntityIdValidateBeforeCall(legalEntityId, include, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfPerson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByLegalEntityIdRequestBuilder {
        private final Integer legalEntityId;
        private List<IncludesList> include;
        private String continuationToken;

        private ListByLegalEntityIdRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, Demographic, Benefit, Military, SocialMedia, Addresses, EmployeeAssignments, SocialSecurityNumber, Phones  Data Access required  Demographic &#x3D; View Person Demographic Information  Benefit &#x3D; View Person Disability and Tobacco Status  Military &#x3D; View Person Military  SocialMedia &#x3D; View Person Social Media  Addresses &#x3D; View Person Addresses  EmployeeAssignments &#x3D; View Employee Records (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder include(List<IncludesList> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of persons (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listByLegalEntityId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Person objects, based on the Legal Entity ID &amp; Include provided.  This endpoint returns all Person details (based on Include parameter) except for Emergency Contact. Those fields are not currently available in bulk. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByLegalEntityIdCall(legalEntityId, include, continuationToken, _callback);
        }


        /**
         * Execute listByLegalEntityId request
         * @return PagedResultOfPerson
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Person objects, based on the Legal Entity ID &amp; Include provided.  This endpoint returns all Person details (based on Include parameter) except for Emergency Contact. Those fields are not currently available in bulk. </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfPerson execute() throws ApiException {
            ApiResponse<PagedResultOfPerson> localVarResp = listByLegalEntityIdWithHttpInfo(legalEntityId, include, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByLegalEntityId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfPerson&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Person objects, based on the Legal Entity ID &amp; Include provided.  This endpoint returns all Person details (based on Include parameter) except for Emergency Contact. Those fields are not currently available in bulk. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfPerson> executeWithHttpInfo() throws ApiException {
            return listByLegalEntityIdWithHttpInfo(legalEntityId, include, continuationToken);
        }

        /**
         * Execute listByLegalEntityId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Person objects, based on the Legal Entity ID &amp; Include provided.  This endpoint returns all Person details (based on Include parameter) except for Emergency Contact. Those fields are not currently available in bulk. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfPerson> _callback) throws ApiException {
            return listByLegalEntityIdAsync(legalEntityId, include, continuationToken, _callback);
        }
    }

    /**
     * Get Persons by Legal Entity ID
     * Data Access: View Legal Entity Persons
     * @param legalEntityId ID of the Legal Entity for which you want to get the persons (required)
     * @return ListByLegalEntityIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Person objects, based on the Legal Entity ID &amp; Include provided.  This endpoint returns all Person details (based on Include parameter) except for Emergency Contact. Those fields are not currently available in bulk. </td><td>  -  </td></tr>
     </table>
     */
    public ListByLegalEntityIdRequestBuilder listByLegalEntityId(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new ListByLegalEntityIdRequestBuilder(legalEntityId);
    }
    private okhttp3.Call listByTenantIdCall(Integer tenantId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tenants/{tenantId}/persons"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByTenantIdValidateBeforeCall(Integer tenantId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling listByTenantId(Async)");
        }

        return listByTenantIdCall(tenantId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfPersonList> listByTenantIdWithHttpInfo(Integer tenantId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listByTenantIdValidateBeforeCall(tenantId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfPersonList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByTenantIdAsync(Integer tenantId, String continuationToken, final ApiCallback<PagedResultOfPersonList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByTenantIdValidateBeforeCall(tenantId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfPersonList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByTenantIdRequestBuilder {
        private final Integer tenantId;
        private String continuationToken;

        private ListByTenantIdRequestBuilder(Integer tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of persons (optional)
         * @return ListByTenantIdRequestBuilder
         */
        public ListByTenantIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listByTenantId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of PersonList (a subset of Person fields) objects, based on the TenantID provided.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByTenantIdCall(tenantId, continuationToken, _callback);
        }


        /**
         * Execute listByTenantId request
         * @return PagedResultOfPersonList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of PersonList (a subset of Person fields) objects, based on the TenantID provided.  </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfPersonList execute() throws ApiException {
            ApiResponse<PagedResultOfPersonList> localVarResp = listByTenantIdWithHttpInfo(tenantId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByTenantId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfPersonList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of PersonList (a subset of Person fields) objects, based on the TenantID provided.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfPersonList> executeWithHttpInfo() throws ApiException {
            return listByTenantIdWithHttpInfo(tenantId, continuationToken);
        }

        /**
         * Execute listByTenantId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of PersonList (a subset of Person fields) objects, based on the TenantID provided.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfPersonList> _callback) throws ApiException {
            return listByTenantIdAsync(tenantId, continuationToken, _callback);
        }
    }

    /**
     * Get Persons By TenantID
     * PersonList provides a subset of the full Person fields.  Data Access: View Tenant Persons
     * @param tenantId ID of the Tenant for which you want to get persons (required)
     * @return ListByTenantIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of PersonList (a subset of Person fields) objects, based on the TenantID provided.  </td><td>  -  </td></tr>
     </table>
     */
    public ListByTenantIdRequestBuilder listByTenantId(Integer tenantId) throws IllegalArgumentException {
        if (tenantId == null) throw new IllegalArgumentException("\"tenantId\" is required but got null");
        return new ListByTenantIdRequestBuilder(tenantId);
    }
}
