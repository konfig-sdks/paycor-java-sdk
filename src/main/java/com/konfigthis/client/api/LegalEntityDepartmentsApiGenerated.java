/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.Department;
import com.konfigthis.client.model.Department2;
import com.konfigthis.client.model.Department3;
import com.konfigthis.client.model.PagedResultOfDepartment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LegalEntityDepartmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LegalEntityDepartmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LegalEntityDepartmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewDepartmentCall(Integer legalEntityId, Department2 department2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = department2;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/departments"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDepartmentValidateBeforeCall(Integer legalEntityId, Department2 department2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling createNewDepartment(Async)");
        }

        // verify the required parameter 'department2' is set
        if (department2 == null) {
            throw new ApiException("Missing the required parameter 'department2' when calling createNewDepartment(Async)");
        }

        return createNewDepartmentCall(legalEntityId, department2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> createNewDepartmentWithHttpInfo(Integer legalEntityId, Department2 department2) throws ApiException {
        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(legalEntityId, department2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDepartmentAsync(Integer legalEntityId, Department2 department2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDepartmentValidateBeforeCall(legalEntityId, department2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDepartmentRequestBuilder {
        private final String code;
        private final String parentId;
        private final String description;
        private final String workLocationId;
        private final Integer legalEntityId;

        private CreateNewDepartmentRequestBuilder(String code, String parentId, String description, String workLocationId, Integer legalEntityId) {
            this.code = code;
            this.parentId = parentId;
            this.description = description;
            this.workLocationId = workLocationId;
            this.legalEntityId = legalEntityId;
        }

        /**
         * Build call for createNewDepartment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Department2 department2 = buildBodyParams();
            return createNewDepartmentCall(legalEntityId, department2, _callback);
        }

        private Department2 buildBodyParams() {
            Department2 department2 = new Department2();
            department2.code(this.code);
            department2.parentId(this.parentId);
            department2.description(this.description);
            department2.workLocationId(this.workLocationId);
            return department2;
        }

        /**
         * Execute createNewDepartment request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            Department2 department2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = createNewDepartmentWithHttpInfo(legalEntityId, department2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDepartment request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            Department2 department2 = buildBodyParams();
            return createNewDepartmentWithHttpInfo(legalEntityId, department2);
        }

        /**
         * Execute createNewDepartment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            Department2 department2 = buildBodyParams();
            return createNewDepartmentAsync(legalEntityId, department2, _callback);
        }
    }

    /**
     * Create Departments by Legal Entity Id
     * Creates new Department for a Legal Entity. * the newly created Department will take at least 60 seconds to propagate through the system  Data Access: Create and Update Legal Entity Departments
     * @param legalEntityId ID of the Legal Entity for which you want to create the Departments (required)
     * @param department2 Create department model (required)
     * @return CreateNewDepartmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDepartmentRequestBuilder createNewDepartment(String code, String parentId, String description, String workLocationId, Integer legalEntityId) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            if (code != null && code.length() < 1) {
              throw new IllegalArgumentException("Invalid value for code. Length must be greater than or equal to 1.");
            }

        if (parentId == null) throw new IllegalArgumentException("\"parentId\" is required but got null");
            if (parentId != null && parentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for parentId. Length must be greater than or equal to 1.");
            }

        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            if (description != null && description.length() < 1) {
              throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
            }

        if (workLocationId == null) throw new IllegalArgumentException("\"workLocationId\" is required but got null");
            if (workLocationId != null && workLocationId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for workLocationId. Length must be greater than or equal to 1.");
            }

        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new CreateNewDepartmentRequestBuilder(code, parentId, description, workLocationId, legalEntityId);
    }
    private okhttp3.Call getByIdCall(Integer legalEntityId, String departmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/departments/{departmentId}"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()))
            .replace("{" + "departmentId" + "}", localVarApiClient.escapeString(departmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(Integer legalEntityId, String departmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getById(Async)");
        }

        // verify the required parameter 'departmentId' is set
        if (departmentId == null) {
            throw new ApiException("Missing the required parameter 'departmentId' when calling getById(Async)");
        }

        return getByIdCall(legalEntityId, departmentId, _callback);

    }


    private ApiResponse<Department> getByIdWithHttpInfo(Integer legalEntityId, String departmentId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(legalEntityId, departmentId, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(Integer legalEntityId, String departmentId, final ApiCallback<Department> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(legalEntityId, departmentId, _callback);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final Integer legalEntityId;
        private final String departmentId;

        private GetByIdRequestBuilder(Integer legalEntityId, String departmentId) {
            this.legalEntityId = legalEntityId;
            this.departmentId = departmentId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Legal Entity Department based on the Legal Entity ID and Department ID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(legalEntityId, departmentId, _callback);
        }


        /**
         * Execute getById request
         * @return Department
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Legal Entity Department based on the Legal Entity ID and Department ID provided. </td><td>  -  </td></tr>
         </table>
         */
        public Department execute() throws ApiException {
            ApiResponse<Department> localVarResp = getByIdWithHttpInfo(legalEntityId, departmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Department&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Legal Entity Department based on the Legal Entity ID and Department ID provided. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Department> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(legalEntityId, departmentId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Legal Entity Department based on the Legal Entity ID and Department ID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Department> _callback) throws ApiException {
            return getByIdAsync(legalEntityId, departmentId, _callback);
        }
    }

    /**
     * Get Legal Entity Department by Legal Entity ID and Department ID
     * Data Access: View Legal Entity Departments by Department Id
     * @param legalEntityId ID of the Legal Entity for which you want to get the Departments (required)
     * @param departmentId ID of the Department (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Legal Entity Department based on the Legal Entity ID and Department ID provided. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(Integer legalEntityId, String departmentId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
            

        return new GetByIdRequestBuilder(legalEntityId, departmentId);
    }
    private okhttp3.Call listByLegalEntityIdCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/departments"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByLegalEntityIdValidateBeforeCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling listByLegalEntityId(Async)");
        }

        return listByLegalEntityIdCall(legalEntityId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfDepartment> listByLegalEntityIdWithHttpInfo(Integer legalEntityId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listByLegalEntityIdValidateBeforeCall(legalEntityId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfDepartment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByLegalEntityIdAsync(Integer legalEntityId, String continuationToken, final ApiCallback<PagedResultOfDepartment> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByLegalEntityIdValidateBeforeCall(legalEntityId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfDepartment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByLegalEntityIdRequestBuilder {
        private final Integer legalEntityId;
        private String continuationToken;

        private ListByLegalEntityIdRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of Legal Entity Departments (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listByLegalEntityId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Legal Entity Departments based on the Legal Entity ID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByLegalEntityIdCall(legalEntityId, continuationToken, _callback);
        }


        /**
         * Execute listByLegalEntityId request
         * @return PagedResultOfDepartment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Legal Entity Departments based on the Legal Entity ID provided. </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfDepartment execute() throws ApiException {
            ApiResponse<PagedResultOfDepartment> localVarResp = listByLegalEntityIdWithHttpInfo(legalEntityId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByLegalEntityId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfDepartment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Legal Entity Departments based on the Legal Entity ID provided. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfDepartment> executeWithHttpInfo() throws ApiException {
            return listByLegalEntityIdWithHttpInfo(legalEntityId, continuationToken);
        }

        /**
         * Execute listByLegalEntityId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Legal Entity Departments based on the Legal Entity ID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfDepartment> _callback) throws ApiException {
            return listByLegalEntityIdAsync(legalEntityId, continuationToken, _callback);
        }
    }

    /**
     * Get Legal Entity Departments by Legal Entity ID
     * Data Access: View Legal Entity Departments Information
     * @param legalEntityId ID of the Legal Entity for which you want to get the Departments (required)
     * @return ListByLegalEntityIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Legal Entity Departments based on the Legal Entity ID provided. </td><td>  -  </td></tr>
     </table>
     */
    public ListByLegalEntityIdRequestBuilder listByLegalEntityId(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new ListByLegalEntityIdRequestBuilder(legalEntityId);
    }
    private okhttp3.Call updateByLegalEntityIdCall(Integer legalEntityId, Department3 department3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = department3;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/departments"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByLegalEntityIdValidateBeforeCall(Integer legalEntityId, Department3 department3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling updateByLegalEntityId(Async)");
        }

        // verify the required parameter 'department3' is set
        if (department3 == null) {
            throw new ApiException("Missing the required parameter 'department3' when calling updateByLegalEntityId(Async)");
        }

        return updateByLegalEntityIdCall(legalEntityId, department3, _callback);

    }


    private ApiResponse<PagedResultOfDepartment> updateByLegalEntityIdWithHttpInfo(Integer legalEntityId, Department3 department3) throws ApiException {
        okhttp3.Call localVarCall = updateByLegalEntityIdValidateBeforeCall(legalEntityId, department3, null);
        Type localVarReturnType = new TypeToken<PagedResultOfDepartment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByLegalEntityIdAsync(Integer legalEntityId, Department3 department3, final ApiCallback<PagedResultOfDepartment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByLegalEntityIdValidateBeforeCall(legalEntityId, department3, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfDepartment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByLegalEntityIdRequestBuilder {
        private final String departmentId;
        private final String code;
        private final String parentId;
        private final String description;
        private final String workLocationId;
        private final Integer legalEntityId;

        private UpdateByLegalEntityIdRequestBuilder(String departmentId, String code, String parentId, String description, String workLocationId, Integer legalEntityId) {
            this.departmentId = departmentId;
            this.code = code;
            this.parentId = parentId;
            this.description = description;
            this.workLocationId = workLocationId;
            this.legalEntityId = legalEntityId;
        }

        /**
         * Build call for updateByLegalEntityId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a resource reference of work location </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Department3 department3 = buildBodyParams();
            return updateByLegalEntityIdCall(legalEntityId, department3, _callback);
        }

        private Department3 buildBodyParams() {
            Department3 department3 = new Department3();
            department3.departmentId(this.departmentId);
            department3.code(this.code);
            department3.parentId(this.parentId);
            department3.description(this.description);
            department3.workLocationId(this.workLocationId);
            return department3;
        }

        /**
         * Execute updateByLegalEntityId request
         * @return PagedResultOfDepartment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a resource reference of work location </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfDepartment execute() throws ApiException {
            Department3 department3 = buildBodyParams();
            ApiResponse<PagedResultOfDepartment> localVarResp = updateByLegalEntityIdWithHttpInfo(legalEntityId, department3);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByLegalEntityId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfDepartment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a resource reference of work location </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfDepartment> executeWithHttpInfo() throws ApiException {
            Department3 department3 = buildBodyParams();
            return updateByLegalEntityIdWithHttpInfo(legalEntityId, department3);
        }

        /**
         * Execute updateByLegalEntityId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a resource reference of work location </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfDepartment> _callback) throws ApiException {
            Department3 department3 = buildBodyParams();
            return updateByLegalEntityIdAsync(legalEntityId, department3, _callback);
        }
    }

    /**
     * Update Legal Entity Department by Legal Entity ID
     * Updates existing Department for a Legal Entity. * The update of the Department will take at least 60 seconds to propagate through the system * When updating top level departments, payroll id should be used as parent id  Data Access: Create and Update Legal Entity Departments
     * @param legalEntityId ID of the Legal Entity for which you want to update the Department (required)
     * @param department3 Update Department model (required)
     * @return UpdateByLegalEntityIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a resource reference of work location </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByLegalEntityIdRequestBuilder updateByLegalEntityId(String departmentId, String code, String parentId, String description, String workLocationId, Integer legalEntityId) throws IllegalArgumentException {
        if (departmentId == null) throw new IllegalArgumentException("\"departmentId\" is required but got null");
            if (departmentId != null && departmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for departmentId. Length must be greater than or equal to 1.");
            }

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            if (code != null && code.length() < 1) {
              throw new IllegalArgumentException("Invalid value for code. Length must be greater than or equal to 1.");
            }

        if (parentId == null) throw new IllegalArgumentException("\"parentId\" is required but got null");
            if (parentId != null && parentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for parentId. Length must be greater than or equal to 1.");
            }

        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            if (description != null && description.length() < 1) {
              throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
            }

        if (workLocationId == null) throw new IllegalArgumentException("\"workLocationId\" is required but got null");
            if (workLocationId != null && workLocationId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for workLocationId. Length must be greater than or equal to 1.");
            }

        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new UpdateByLegalEntityIdRequestBuilder(departmentId, code, parentId, description, workLocationId, legalEntityId);
    }
}
