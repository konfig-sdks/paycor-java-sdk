/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.DisabilityStatus;
import com.konfigthis.client.model.EligibleForRehire;
import com.konfigthis.client.model.EmailTypeOptions;
import com.konfigthis.client.model.EmailTypeOptions2;
import com.konfigthis.client.model.Employee2;
import com.konfigthis.client.model.EmployeeContact;
import com.konfigthis.client.model.EmployeeIdentifyingData;
import com.konfigthis.client.model.EmployeePosition;
import com.konfigthis.client.model.EmployeePositionAndStatus;
import com.konfigthis.client.model.EmployeeReturnItem;
import com.konfigthis.client.model.EmployeeStatusUpdate;
import com.konfigthis.client.model.EmploymentStatus;
import com.konfigthis.client.model.EmploymentStatus2;
import com.konfigthis.client.model.EmploymentType;
import com.konfigthis.client.model.EthnicityType;
import com.konfigthis.client.model.FlsaType;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.GenericAddress;
import com.konfigthis.client.model.Includes13;
import com.konfigthis.client.model.Includes14;
import com.konfigthis.client.model.Includes15;
import com.konfigthis.client.model.MaritalStatus;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedResultOfEmployeeList;
import com.konfigthis.client.model.PagedResultOfEmployeeReturnItem;
import com.konfigthis.client.model.PagedResultOfEmployeesIdentifyingData;
import com.konfigthis.client.model.Phone;
import com.konfigthis.client.model.Prefix;
import com.konfigthis.client.model.Suffix;
import com.konfigthis.client.model.VeteranStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEmployeeCall(Employee2 employee2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employee2;

        // create path and map variables
        String localVarPath = "/v1/employees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEmployeeValidateBeforeCall(Employee2 employee2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employee2' is set
        if (employee2 == null) {
            throw new ApiException("Missing the required parameter 'employee2' when calling createNewEmployee(Async)");
        }

        return createNewEmployeeCall(employee2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> createNewEmployeeWithHttpInfo(Employee2 employee2) throws ApiException {
        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(employee2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewEmployeeAsync(Employee2 employee2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEmployeeValidateBeforeCall(employee2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewEmployeeRequestBuilder {
        private final Integer legalEntityId;
        private final String firstName;
        private final String lastName;
        private final OffsetDateTime hireDate;
        private final EmploymentStatus status;
        private final String paygroupDescription;
        private final Long departmentCode;
        private final GenericAddress primaryAddress;
        private Integer employeeNumber;
        private String alternateEmployeeNumber;
        private Prefix prefix;
        private String middleName;
        private Suffix suffix;
        private String homeEmail;
        private String workEmail;
        private List<Phone> phones;
        private String socialSecurityNumber;
        private OffsetDateTime birthDate;
        private Gender gender;
        private EthnicityType ethnicity;
        private MaritalStatus maritalStatus;
        private String workLocation;
        private String jobTitle;
        private OffsetDateTime reHireDate;
        private FlsaType flsa;
        private EmploymentType type;
        private String managerEmpId;
        private VeteranStatus veteran;
        private DisabilityStatus disability;

        private CreateNewEmployeeRequestBuilder(Integer legalEntityId, String firstName, String lastName, OffsetDateTime hireDate, EmploymentStatus status, String paygroupDescription, Long departmentCode, GenericAddress primaryAddress) {
            this.legalEntityId = legalEntityId;
            this.firstName = firstName;
            this.lastName = lastName;
            this.hireDate = hireDate;
            this.status = status;
            this.paygroupDescription = paygroupDescription;
            this.departmentCode = departmentCode;
            this.primaryAddress = primaryAddress;
        }

        /**
         * Set employeeNumber
         * @param employeeNumber Unique number of the employee in the tenant. Generated by Paycor if not provided.              (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder employeeNumber(Integer employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set alternateEmployeeNumber
         * @param alternateEmployeeNumber Can be up to 9 characters, Requires Alternate Employee Number product offering. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder alternateEmployeeNumber(String alternateEmployeeNumber) {
            this.alternateEmployeeNumber = alternateEmployeeNumber;
            return this;
        }
        
        /**
         * Set prefix
         * @param prefix  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder prefix(Prefix prefix) {
            this.prefix = prefix;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName Middle name of the employee. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set suffix
         * @param suffix  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder suffix(Suffix suffix) {
            this.suffix = suffix;
            return this;
        }
        
        /**
         * Set homeEmail
         * @param homeEmail Home Email Information of an employee.              (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder homeEmail(String homeEmail) {
            this.homeEmail = homeEmail;
            return this;
        }
        
        /**
         * Set workEmail
         * @param workEmail Work Email Information of an employee.              (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder workEmail(String workEmail) {
            this.workEmail = workEmail;
            return this;
        }
        
        /**
         * Set phones
         * @param phones List of type Phone containing phone numbers of the employee. Accepts home,mobile and work phone numbers, upto 1 of each type. Mobile phone is accepted only if home contact is provided.               (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder phones(List<Phone> phones) {
            this.phones = phones;
            return this;
        }
        
        /**
         * Set socialSecurityNumber
         * @param socialSecurityNumber Social security number of the employee. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder socialSecurityNumber(String socialSecurityNumber) {
            this.socialSecurityNumber = socialSecurityNumber;
            return this;
        }
        
        /**
         * Set birthDate
         * @param birthDate Date of birth of the employee following the ISO 8601 standard. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder birthDate(OffsetDateTime birthDate) {
            this.birthDate = birthDate;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder gender(Gender gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set ethnicity
         * @param ethnicity  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder ethnicity(EthnicityType ethnicity) {
            this.ethnicity = ethnicity;
            return this;
        }
        
        /**
         * Set maritalStatus
         * @param maritalStatus  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder maritalStatus(MaritalStatus maritalStatus) {
            this.maritalStatus = maritalStatus;
            return this;
        }
        
        /**
         * Set workLocation
         * @param workLocation The name of the Work Location to associate with new hire.  * Must be an existing Work Location. Use API &#39;GET Legal Entity Work Location by Legal Entity ID&#39; to retrieve a list of valid names.              (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder workLocation(String workLocation) {
            this.workLocation = workLocation;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle Name of the Job Title to associate with new hire.  * Must be an existing Job setup on the Tenant. Use API &#39;GET Tenant Job Titles by TenantId&#39; to retrieve a list of valid names.              (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set reHireDate
         * @param reHireDate Re-hire date of the employee. Terminated employees can be rehired.  Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder reHireDate(OffsetDateTime reHireDate) {
            this.reHireDate = reHireDate;
            return this;
        }
        
        /**
         * Set flsa
         * @param flsa  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder flsa(FlsaType flsa) {
            this.flsa = flsa;
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder type(EmploymentType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set managerEmpId
         * @param managerEmpId Unique identifier of the manager in Paycor&#39;s system. Generated by Paycor. (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder managerEmpId(String managerEmpId) {
            this.managerEmpId = managerEmpId;
            return this;
        }
        
        /**
         * Set veteran
         * @param veteran  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder veteran(VeteranStatus veteran) {
            this.veteran = veteran;
            return this;
        }
        
        /**
         * Set disability
         * @param disability  (optional)
         * @return CreateNewEmployeeRequestBuilder
         */
        public CreateNewEmployeeRequestBuilder disability(DisabilityStatus disability) {
            this.disability = disability;
            return this;
        }
        
        /**
         * Build call for createNewEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Employee2 employee2 = buildBodyParams();
            return createNewEmployeeCall(employee2, _callback);
        }

        private Employee2 buildBodyParams() {
            Employee2 employee2 = new Employee2();
            employee2.legalEntityId(this.legalEntityId);
            employee2.employeeNumber(this.employeeNumber);
            employee2.alternateEmployeeNumber(this.alternateEmployeeNumber);
            employee2.prefix(this.prefix);
            employee2.firstName(this.firstName);
            employee2.middleName(this.middleName);
            employee2.lastName(this.lastName);
            employee2.suffix(this.suffix);
            employee2.homeEmail(this.homeEmail);
            employee2.workEmail(this.workEmail);
            employee2.phones(this.phones);
            employee2.socialSecurityNumber(this.socialSecurityNumber);
            employee2.birthDate(this.birthDate);
            employee2.gender(this.gender);
            employee2.ethnicity(this.ethnicity);
            employee2.maritalStatus(this.maritalStatus);
            employee2.workLocation(this.workLocation);
            employee2.jobTitle(this.jobTitle);
            employee2.hireDate(this.hireDate);
            employee2.reHireDate(this.reHireDate);
            employee2.status(this.status);
            employee2.flsa(this.flsa);
            employee2.type(this.type);
            employee2.managerEmpId(this.managerEmpId);
            employee2.paygroupDescription(this.paygroupDescription);
            employee2.departmentCode(this.departmentCode);
            employee2.veteran(this.veteran);
            employee2.disability(this.disability);
            employee2.primaryAddress(this.primaryAddress);
            return employee2;
        }

        /**
         * Execute createNewEmployee request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            Employee2 employee2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = createNewEmployeeWithHttpInfo(employee2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewEmployee request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            Employee2 employee2 = buildBodyParams();
            return createNewEmployeeWithHttpInfo(employee2);
        }

        /**
         * Execute createNewEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            Employee2 employee2 = buildBodyParams();
            return createNewEmployeeAsync(employee2, _callback);
        }
    }

    /**
     * Create Employee
     * This immediately \&quot;hires\&quot; a new employee and associated Person in Paycor&#39;s system. There is no way to undo or reverse this operation. After creating an employee, please wait sixty seconds before using employeeId to call other endpoints.              Data Access: Create Employee
     * @param employee2 Create Employee model (required)
     * @return CreateNewEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEmployeeRequestBuilder createNewEmployee(Integer legalEntityId, String firstName, String lastName, OffsetDateTime hireDate, EmploymentStatus status, String paygroupDescription, Long departmentCode, GenericAddress primaryAddress) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            if (firstName != null && firstName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
            }

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            if (lastName != null && lastName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
            }

        if (hireDate == null) throw new IllegalArgumentException("\"hireDate\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
        if (paygroupDescription == null) throw new IllegalArgumentException("\"paygroupDescription\" is required but got null");
            if (paygroupDescription != null && paygroupDescription.length() < 1) {
              throw new IllegalArgumentException("Invalid value for paygroupDescription. Length must be greater than or equal to 1.");
            }

        if (departmentCode == null) throw new IllegalArgumentException("\"departmentCode\" is required but got null");
        if (primaryAddress == null) throw new IllegalArgumentException("\"primaryAddress\" is required but got null");
        return new CreateNewEmployeeRequestBuilder(legalEntityId, firstName, lastName, hireDate, status, paygroupDescription, departmentCode, primaryAddress);
    }
    private okhttp3.Call getByEmployeeIdCall(String employeeId, List<Includes13> include, EmailTypeOptions emailType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (emailType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailType", emailType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(String employeeId, List<Includes13> include, EmailTypeOptions emailType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, include, emailType, _callback);

    }


    private ApiResponse<EmployeeReturnItem> getByEmployeeIdWithHttpInfo(String employeeId, List<Includes13> include, EmailTypeOptions emailType) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, emailType, null);
        Type localVarReturnType = new TypeToken<EmployeeReturnItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(String employeeId, List<Includes13> include, EmailTypeOptions emailType, final ApiCallback<EmployeeReturnItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, emailType, _callback);
        Type localVarReturnType = new TypeToken<EmployeeReturnItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final String employeeId;
        private List<Includes13> include;
        private EmailTypeOptions emailType;

        private GetByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, EmploymentDates, Status, Position, WorkLocation              Data Access required              EmploymentDates &#x3D; View Employee Employment Dates              Status &#x3D; View Employee Status              Position &#x3D; View Employee Position              WorkLocation &#x3D; View Employee Work Location (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder include(List<Includes13> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set emailType
         * @param emailType Options to specify which emaill address to return. Work email type will be returned if none are specified: Home, Work (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder emailType(EmailTypeOptions emailType) {
            this.emailType = emailType;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee object based on the EmployeeID, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, include, emailType, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return EmployeeReturnItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee object based on the EmployeeID, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeReturnItem execute() throws ApiException {
            ApiResponse<EmployeeReturnItem> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, include, emailType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;EmployeeReturnItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee object based on the EmployeeID, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeReturnItem> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, include, emailType);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee object based on the EmployeeID, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeReturnItem> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, include, emailType, _callback);
        }
    }

    /**
     * Get Employee by EmployeeID
     * Tip: you can retrieve a valid EmployeeID guid via endpoints like &#39;Get Employees by Legal Entity ID&#39;              Data Access: View Employee Information
     * @param employeeId ID of the Employee you want to get (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an Employee object based on the EmployeeID, with some fields populated based on the Include parameter. </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call getIdentifyingDataCall(Integer legalEntityId, List<Includes15> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/employeesIdentifyingData"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdentifyingDataValidateBeforeCall(Integer legalEntityId, List<Includes15> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getIdentifyingData(Async)");
        }

        return getIdentifyingDataCall(legalEntityId, include, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeesIdentifyingData> getIdentifyingDataWithHttpInfo(Integer legalEntityId, List<Includes15> include, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getIdentifyingDataValidateBeforeCall(legalEntityId, include, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeesIdentifyingData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIdentifyingDataAsync(Integer legalEntityId, List<Includes15> include, String continuationToken, final ApiCallback<PagedResultOfEmployeesIdentifyingData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdentifyingDataValidateBeforeCall(legalEntityId, include, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeesIdentifyingData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIdentifyingDataRequestBuilder {
        private final Integer legalEntityId;
        private List<Includes15> include;
        private String continuationToken;

        private GetIdentifyingDataRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set include
         * @param include Options to filter employees by employment status: Active, Inactive (optional)
         * @return GetIdentifyingDataRequestBuilder
         */
        public GetIdentifyingDataRequestBuilder include(List<Includes15> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of data (optional)
         * @return GetIdentifyingDataRequestBuilder
         */
        public GetIdentifyingDataRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getIdentifyingData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Employee Identifying data objects for the Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIdentifyingDataCall(legalEntityId, include, continuationToken, _callback);
        }


        /**
         * Execute getIdentifyingData request
         * @return PagedResultOfEmployeesIdentifyingData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Employee Identifying data objects for the Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeesIdentifyingData execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeesIdentifyingData> localVarResp = getIdentifyingDataWithHttpInfo(legalEntityId, include, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIdentifyingData request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeesIdentifyingData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Employee Identifying data objects for the Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeesIdentifyingData> executeWithHttpInfo() throws ApiException {
            return getIdentifyingDataWithHttpInfo(legalEntityId, include, continuationToken);
        }

        /**
         * Execute getIdentifyingData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Employee Identifying data objects for the Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeesIdentifyingData> _callback) throws ApiException {
            return getIdentifyingDataAsync(legalEntityId, include, continuationToken, _callback);
        }
    }

    /**
     * GET Identifying Employee Data by Legal Entity Id
     * Data Access: View Legal Entity Employees Identifying Data              Optional Data Access: View Legal Entity Employees SSN and BirthDate
     * @param legalEntityId ID of the legal entity for which you want to get employees (required)
     * @return GetIdentifyingDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Employee Identifying data objects for the Legal Entity </td><td>  -  </td></tr>
     </table>
     */
    public GetIdentifyingDataRequestBuilder getIdentifyingData(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new GetIdentifyingDataRequestBuilder(legalEntityId);
    }
    private okhttp3.Call listByLegalEntityIdCall(Integer legalEntityId, List<Includes14> include, EmailTypeOptions2 emailType, EmploymentStatus statusFilter, Integer employeeNumber, String lastName, Long departmentCode, String workLocationName, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/employees"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (emailType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailType", emailType));
        }

        if (statusFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusFilter", statusFilter));
        }

        if (employeeNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeNumber", employeeNumber));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (departmentCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departmentCode", departmentCode));
        }

        if (workLocationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workLocationName", workLocationName));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByLegalEntityIdValidateBeforeCall(Integer legalEntityId, List<Includes14> include, EmailTypeOptions2 emailType, EmploymentStatus statusFilter, Integer employeeNumber, String lastName, Long departmentCode, String workLocationName, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling listByLegalEntityId(Async)");
        }

        return listByLegalEntityIdCall(legalEntityId, include, emailType, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeeReturnItem> listByLegalEntityIdWithHttpInfo(Integer legalEntityId, List<Includes14> include, EmailTypeOptions2 emailType, EmploymentStatus statusFilter, Integer employeeNumber, String lastName, Long departmentCode, String workLocationName, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listByLegalEntityIdValidateBeforeCall(legalEntityId, include, emailType, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeReturnItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByLegalEntityIdAsync(Integer legalEntityId, List<Includes14> include, EmailTypeOptions2 emailType, EmploymentStatus statusFilter, Integer employeeNumber, String lastName, Long departmentCode, String workLocationName, String continuationToken, final ApiCallback<PagedResultOfEmployeeReturnItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByLegalEntityIdValidateBeforeCall(legalEntityId, include, emailType, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeReturnItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByLegalEntityIdRequestBuilder {
        private final Integer legalEntityId;
        private List<Includes14> include;
        private EmailTypeOptions2 emailType;
        private EmploymentStatus statusFilter;
        private Integer employeeNumber;
        private String lastName;
        private Long departmentCode;
        private String workLocationName;
        private String continuationToken;

        private ListByLegalEntityIdRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, EmploymentDates, Status, Position, WorkLocation              Data Access required              EmploymentDates &#x3D; View Legal Entity Employees Employment Dates              Status &#x3D; View Legal Entity Employees Status              Position &#x3D; View Legal Entity Employees Position              WorkLocation &#x3D; View Legal Entity Employees Work Location (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder include(List<Includes14> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set emailType
         * @param emailType Options to specify which email address to return. Work email type will be returned if none are specified: Home, Work (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder emailType(EmailTypeOptions2 emailType) {
            this.emailType = emailType;
            return this;
        }
        
        /**
         * Set statusFilter
         * @param statusFilter Option to filter by employment status. (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder statusFilter(EmploymentStatus statusFilter) {
            this.statusFilter = statusFilter;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber Option to filter by Employee Number. (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder employeeNumber(Integer employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Option to filter by Employee Last Name. (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set departmentCode
         * @param departmentCode Option to filter by Department Code. (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder departmentCode(Long departmentCode) {
            this.departmentCode = departmentCode;
            return this;
        }
        
        /**
         * Set workLocationName
         * @param workLocationName Option to filter by Work Location Name. (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder workLocationName(String workLocationName) {
            this.workLocationName = workLocationName;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of employees (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listByLegalEntityId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Employee objects based on the Legal Entity ID &amp; Include parameter provided.              This endpoint returns all Employee details (based on the Include parameter) except for SSN, DOB, and Emergency Contact. Those fields are not currently available in bulk. Returns 200 records per page to allow for ease of use for larger clients. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByLegalEntityIdCall(legalEntityId, include, emailType, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, continuationToken, _callback);
        }


        /**
         * Execute listByLegalEntityId request
         * @return PagedResultOfEmployeeReturnItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Employee objects based on the Legal Entity ID &amp; Include parameter provided.              This endpoint returns all Employee details (based on the Include parameter) except for SSN, DOB, and Emergency Contact. Those fields are not currently available in bulk. Returns 200 records per page to allow for ease of use for larger clients. </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeeReturnItem execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeeReturnItem> localVarResp = listByLegalEntityIdWithHttpInfo(legalEntityId, include, emailType, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByLegalEntityId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeeReturnItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Employee objects based on the Legal Entity ID &amp; Include parameter provided.              This endpoint returns all Employee details (based on the Include parameter) except for SSN, DOB, and Emergency Contact. Those fields are not currently available in bulk. Returns 200 records per page to allow for ease of use for larger clients. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeeReturnItem> executeWithHttpInfo() throws ApiException {
            return listByLegalEntityIdWithHttpInfo(legalEntityId, include, emailType, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, continuationToken);
        }

        /**
         * Execute listByLegalEntityId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Employee objects based on the Legal Entity ID &amp; Include parameter provided.              This endpoint returns all Employee details (based on the Include parameter) except for SSN, DOB, and Emergency Contact. Those fields are not currently available in bulk. Returns 200 records per page to allow for ease of use for larger clients. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeeReturnItem> _callback) throws ApiException {
            return listByLegalEntityIdAsync(legalEntityId, include, emailType, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, continuationToken, _callback);
        }
    }

    /**
     * Get Employees by Legal Entity ID
     * Data Access: View Legal Entity Employees
     * @param legalEntityId ID of the legal entity for which you want to get employees (required)
     * @return ListByLegalEntityIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Employee objects based on the Legal Entity ID &amp; Include parameter provided.              This endpoint returns all Employee details (based on the Include parameter) except for SSN, DOB, and Emergency Contact. Those fields are not currently available in bulk. Returns 200 records per page to allow for ease of use for larger clients. </td><td>  -  </td></tr>
     </table>
     */
    public ListByLegalEntityIdRequestBuilder listByLegalEntityId(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new ListByLegalEntityIdRequestBuilder(legalEntityId);
    }
    private okhttp3.Call listByTenantIdCall(Integer tenantId, EmploymentStatus statusFilter, Integer employeeNumber, String lastName, Long departmentCode, String workLocationName, String jobCode, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tenants/{tenantId}/employees"
            .replace("{" + "tenantId" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statusFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusFilter", statusFilter));
        }

        if (employeeNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeNumber", employeeNumber));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (departmentCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departmentCode", departmentCode));
        }

        if (workLocationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workLocationName", workLocationName));
        }

        if (jobCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobCode", jobCode));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByTenantIdValidateBeforeCall(Integer tenantId, EmploymentStatus statusFilter, Integer employeeNumber, String lastName, Long departmentCode, String workLocationName, String jobCode, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling listByTenantId(Async)");
        }

        return listByTenantIdCall(tenantId, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, jobCode, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeeList> listByTenantIdWithHttpInfo(Integer tenantId, EmploymentStatus statusFilter, Integer employeeNumber, String lastName, Long departmentCode, String workLocationName, String jobCode, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listByTenantIdValidateBeforeCall(tenantId, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, jobCode, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByTenantIdAsync(Integer tenantId, EmploymentStatus statusFilter, Integer employeeNumber, String lastName, Long departmentCode, String workLocationName, String jobCode, String continuationToken, final ApiCallback<PagedResultOfEmployeeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByTenantIdValidateBeforeCall(tenantId, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, jobCode, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByTenantIdRequestBuilder {
        private final Integer tenantId;
        private EmploymentStatus statusFilter;
        private Integer employeeNumber;
        private String lastName;
        private Long departmentCode;
        private String workLocationName;
        private String jobCode;
        private String continuationToken;

        private ListByTenantIdRequestBuilder(Integer tenantId) {
            this.tenantId = tenantId;
        }

        /**
         * Set statusFilter
         * @param statusFilter Option to filter by employment status (optional)
         * @return ListByTenantIdRequestBuilder
         */
        public ListByTenantIdRequestBuilder statusFilter(EmploymentStatus statusFilter) {
            this.statusFilter = statusFilter;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber Option to filter by Employee Number. (optional)
         * @return ListByTenantIdRequestBuilder
         */
        public ListByTenantIdRequestBuilder employeeNumber(Integer employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName Option to filter by Employee Last Name. (optional)
         * @return ListByTenantIdRequestBuilder
         */
        public ListByTenantIdRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set departmentCode
         * @param departmentCode Option to filter by Department Code. (optional)
         * @return ListByTenantIdRequestBuilder
         */
        public ListByTenantIdRequestBuilder departmentCode(Long departmentCode) {
            this.departmentCode = departmentCode;
            return this;
        }
        
        /**
         * Set workLocationName
         * @param workLocationName Option to filter by Work Location Name. (optional)
         * @return ListByTenantIdRequestBuilder
         */
        public ListByTenantIdRequestBuilder workLocationName(String workLocationName) {
            this.workLocationName = workLocationName;
            return this;
        }
        
        /**
         * Set jobCode
         * @param jobCode Option to filter by Job Code. (optional)
         * @return ListByTenantIdRequestBuilder
         */
        public ListByTenantIdRequestBuilder jobCode(String jobCode) {
            this.jobCode = jobCode;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of employees (optional)
         * @return ListByTenantIdRequestBuilder
         */
        public ListByTenantIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listByTenantId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of EmployeeList (with a subset of Employee fields) objects based on the TenantID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByTenantIdCall(tenantId, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, jobCode, continuationToken, _callback);
        }


        /**
         * Execute listByTenantId request
         * @return PagedResultOfEmployeeList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of EmployeeList (with a subset of Employee fields) objects based on the TenantID provided. </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeeList execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeeList> localVarResp = listByTenantIdWithHttpInfo(tenantId, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, jobCode, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByTenantId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeeList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of EmployeeList (with a subset of Employee fields) objects based on the TenantID provided. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeeList> executeWithHttpInfo() throws ApiException {
            return listByTenantIdWithHttpInfo(tenantId, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, jobCode, continuationToken);
        }

        /**
         * Execute listByTenantId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of EmployeeList (with a subset of Employee fields) objects based on the TenantID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeeList> _callback) throws ApiException {
            return listByTenantIdAsync(tenantId, statusFilter, employeeNumber, lastName, departmentCode, workLocationName, jobCode, continuationToken, _callback);
        }
    }

    /**
     * Get Employees By TenantID
     * Data Access: View Tenant Employees
     * @param tenantId ID of the tenant for which you want to get employees (required)
     * @return ListByTenantIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of EmployeeList (with a subset of Employee fields) objects based on the TenantID provided. </td><td>  -  </td></tr>
     </table>
     */
    public ListByTenantIdRequestBuilder listByTenantId(Integer tenantId) throws IllegalArgumentException {
        if (tenantId == null) throw new IllegalArgumentException("\"tenantId\" is required but got null");
        return new ListByTenantIdRequestBuilder(tenantId);
    }
    private okhttp3.Call updateContactCall(String employeeId, EmployeeContact employeeContact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeContact;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactValidateBeforeCall(String employeeId, EmployeeContact employeeContact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateContact(Async)");
        }

        // verify the required parameter 'employeeContact' is set
        if (employeeContact == null) {
            throw new ApiException("Missing the required parameter 'employeeContact' when calling updateContact(Async)");
        }

        return updateContactCall(employeeId, employeeContact, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateContactWithHttpInfo(String employeeId, EmployeeContact employeeContact) throws ApiException {
        okhttp3.Call localVarCall = updateContactValidateBeforeCall(employeeId, employeeContact, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateContactAsync(String employeeId, EmployeeContact employeeContact, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactValidateBeforeCall(employeeId, employeeContact, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateContactRequestBuilder {
        private final String employeeId;
        private String homeEmail;
        private String workEmail;
        private List<Phone> phones;
        private GenericAddress primaryAddress;

        private UpdateContactRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set homeEmail
         * @param homeEmail Home Email Address of an employee.              (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder homeEmail(String homeEmail) {
            this.homeEmail = homeEmail;
            return this;
        }
        
        /**
         * Set workEmail
         * @param workEmail Work Email Address of an employee.              (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder workEmail(String workEmail) {
            this.workEmail = workEmail;
            return this;
        }
        
        /**
         * Set phones
         * @param phones List of type Phone containing phone numbers of the employee. Accepts Home, Mobile and Work phone numbers, upto 1 of each type. Only the specific number types passed in will be updated, existing phone numbers will remain unchanged.              (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder phones(List<Phone> phones) {
            this.phones = phones;
            return this;
        }
        
        /**
         * Set primaryAddress
         * @param primaryAddress  (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder primaryAddress(GenericAddress primaryAddress) {
            this.primaryAddress = primaryAddress;
            return this;
        }
        
        /**
         * Build call for updateContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeContact employeeContact = buildBodyParams();
            return updateContactCall(employeeId, employeeContact, _callback);
        }

        private EmployeeContact buildBodyParams() {
            EmployeeContact employeeContact = new EmployeeContact();
            employeeContact.homeEmail(this.homeEmail);
            employeeContact.workEmail(this.workEmail);
            employeeContact.phones(this.phones);
            employeeContact.primaryAddress(this.primaryAddress);
            return employeeContact;
        }

        /**
         * Execute updateContact request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeContact employeeContact = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateContactWithHttpInfo(employeeId, employeeContact);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateContact request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeContact employeeContact = buildBodyParams();
            return updateContactWithHttpInfo(employeeId, employeeContact);
        }

        /**
         * Execute updateContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeContact employeeContact = buildBodyParams();
            return updateContactAsync(employeeId, employeeContact, _callback);
        }
    }

    /**
     * Update Employee Contact
     * This immediately updates an employee&#39;s contact information and associated Person&#39;s in Paycor&#39;s system.              Data Access: Update Employee Contact
     * @param employeeId Id of the employee (required)
     * @param employeeContact Put Employee Contact model (required)
     * @return UpdateContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContactRequestBuilder updateContact(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateContactRequestBuilder(employeeId);
    }
    private okhttp3.Call updatePaygroupCall(String employeeId, String payGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/Paygroup"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (payGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroupId", payGroupId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePaygroupValidateBeforeCall(String employeeId, String payGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updatePaygroup(Async)");
        }

        return updatePaygroupCall(employeeId, payGroupId, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updatePaygroupWithHttpInfo(String employeeId, String payGroupId) throws ApiException {
        okhttp3.Call localVarCall = updatePaygroupValidateBeforeCall(employeeId, payGroupId, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePaygroupAsync(String employeeId, String payGroupId, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePaygroupValidateBeforeCall(employeeId, payGroupId, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePaygroupRequestBuilder {
        private final String employeeId;
        private String payGroupId;

        private UpdatePaygroupRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set payGroupId
         * @param payGroupId ID of the Paygroup for whom you want to get the Pay Schedule. Available via &#39;GET Legal Entity Pay Groups&#39; (optional)
         * @return UpdatePaygroupRequestBuilder
         */
        public UpdatePaygroupRequestBuilder payGroupId(String payGroupId) {
            this.payGroupId = payGroupId;
            return this;
        }
        
        /**
         * Build call for updatePaygroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePaygroupCall(employeeId, payGroupId, _callback);
        }


        /**
         * Execute updatePaygroup request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            ApiResponse<CreateOrUpdateResponse> localVarResp = updatePaygroupWithHttpInfo(employeeId, payGroupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePaygroup request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            return updatePaygroupWithHttpInfo(employeeId, payGroupId);
        }

        /**
         * Execute updatePaygroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            return updatePaygroupAsync(employeeId, payGroupId, _callback);
        }
    }

    /**
     * Update Employee Paygroup
     * This endpoint updates an employee&#39;s paygroup.              Data Access: Update Employee Paygroup
     * @param employeeId Id of the employee (required)
     * @return UpdatePaygroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePaygroupRequestBuilder updatePaygroup(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdatePaygroupRequestBuilder(employeeId);
    }
    private okhttp3.Call updatePersonalDataCall(String employeeId, EmployeeIdentifyingData employeeIdentifyingData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeIdentifyingData;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/identifyingdata"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePersonalDataValidateBeforeCall(String employeeId, EmployeeIdentifyingData employeeIdentifyingData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updatePersonalData(Async)");
        }

        // verify the required parameter 'employeeIdentifyingData' is set
        if (employeeIdentifyingData == null) {
            throw new ApiException("Missing the required parameter 'employeeIdentifyingData' when calling updatePersonalData(Async)");
        }

        return updatePersonalDataCall(employeeId, employeeIdentifyingData, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updatePersonalDataWithHttpInfo(String employeeId, EmployeeIdentifyingData employeeIdentifyingData) throws ApiException {
        okhttp3.Call localVarCall = updatePersonalDataValidateBeforeCall(employeeId, employeeIdentifyingData, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePersonalDataAsync(String employeeId, EmployeeIdentifyingData employeeIdentifyingData, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePersonalDataValidateBeforeCall(employeeId, employeeIdentifyingData, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePersonalDataRequestBuilder {
        private final String firstName;
        private final String lastName;
        private final Suffix suffix;
        private final String socialSecurityNumber;
        private final OffsetDateTime birthDate;
        private final String employeeId;
        private String middleName;

        private UpdatePersonalDataRequestBuilder(String firstName, String lastName, Suffix suffix, String socialSecurityNumber, OffsetDateTime birthDate, String employeeId) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.suffix = suffix;
            this.socialSecurityNumber = socialSecurityNumber;
            this.birthDate = birthDate;
            this.employeeId = employeeId;
        }

        /**
         * Set middleName
         * @param middleName Middle name of the employee. (optional)
         * @return UpdatePersonalDataRequestBuilder
         */
        public UpdatePersonalDataRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Build call for updatePersonalData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeIdentifyingData employeeIdentifyingData = buildBodyParams();
            return updatePersonalDataCall(employeeId, employeeIdentifyingData, _callback);
        }

        private EmployeeIdentifyingData buildBodyParams() {
            EmployeeIdentifyingData employeeIdentifyingData = new EmployeeIdentifyingData();
            employeeIdentifyingData.firstName(this.firstName);
            employeeIdentifyingData.lastName(this.lastName);
            employeeIdentifyingData.middleName(this.middleName);
            employeeIdentifyingData.suffix(this.suffix);
            employeeIdentifyingData.socialSecurityNumber(this.socialSecurityNumber);
            employeeIdentifyingData.birthDate(this.birthDate);
            return employeeIdentifyingData;
        }

        /**
         * Execute updatePersonalData request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeIdentifyingData employeeIdentifyingData = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updatePersonalDataWithHttpInfo(employeeId, employeeIdentifyingData);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePersonalData request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeIdentifyingData employeeIdentifyingData = buildBodyParams();
            return updatePersonalDataWithHttpInfo(employeeId, employeeIdentifyingData);
        }

        /**
         * Execute updatePersonalData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeIdentifyingData employeeIdentifyingData = buildBodyParams();
            return updatePersonalDataAsync(employeeId, employeeIdentifyingData, _callback);
        }
    }

    /**
     * Update Employee Personal data
     * This endpoint updates an employee&#39;s personal information.              Data Access: Update Employee Identifying Data
     * @param employeeId Id of the employee (required)
     * @param employeeIdentifyingData Put Employee Identifying data model (required)
     * @return UpdatePersonalDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePersonalDataRequestBuilder updatePersonalData(String firstName, String lastName, Suffix suffix, String socialSecurityNumber, OffsetDateTime birthDate, String employeeId) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            if (firstName != null && firstName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
            }

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            if (lastName != null && lastName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
            }

        if (suffix == null) throw new IllegalArgumentException("\"suffix\" is required but got null");
        if (socialSecurityNumber == null) throw new IllegalArgumentException("\"socialSecurityNumber\" is required but got null");
            if (socialSecurityNumber != null && socialSecurityNumber.length() < 1) {
              throw new IllegalArgumentException("Invalid value for socialSecurityNumber. Length must be greater than or equal to 1.");
            }

        if (birthDate == null) throw new IllegalArgumentException("\"birthDate\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdatePersonalDataRequestBuilder(firstName, lastName, suffix, socialSecurityNumber, birthDate, employeeId);
    }
    private okhttp3.Call updatePositionAndStatusDataCall(String employeeId, EmployeePositionAndStatus employeePositionAndStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePositionAndStatus;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/positionandstatus"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePositionAndStatusDataValidateBeforeCall(String employeeId, EmployeePositionAndStatus employeePositionAndStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updatePositionAndStatusData(Async)");
        }

        // verify the required parameter 'employeePositionAndStatus' is set
        if (employeePositionAndStatus == null) {
            throw new ApiException("Missing the required parameter 'employeePositionAndStatus' when calling updatePositionAndStatusData(Async)");
        }

        return updatePositionAndStatusDataCall(employeeId, employeePositionAndStatus, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updatePositionAndStatusDataWithHttpInfo(String employeeId, EmployeePositionAndStatus employeePositionAndStatus) throws ApiException {
        okhttp3.Call localVarCall = updatePositionAndStatusDataValidateBeforeCall(employeeId, employeePositionAndStatus, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePositionAndStatusDataAsync(String employeeId, EmployeePositionAndStatus employeePositionAndStatus, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePositionAndStatusDataValidateBeforeCall(employeeId, employeePositionAndStatus, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePositionAndStatusDataRequestBuilder {
        private final EmploymentStatus2 employmentStatus;
        private final OffsetDateTime rehireDate;
        private final EmploymentType employmentType;
        private final String workLocation;
        private final String employeeId;
        private String jobTitle;
        private FlsaType flsa;
        private String managerId;
        private String departmentId;

        private UpdatePositionAndStatusDataRequestBuilder(EmploymentStatus2 employmentStatus, OffsetDateTime rehireDate, EmploymentType employmentType, String workLocation, String employeeId) {
            this.employmentStatus = employmentStatus;
            this.rehireDate = rehireDate;
            this.employmentType = employmentType;
            this.workLocation = workLocation;
            this.employeeId = employeeId;
        }

        /**
         * Set jobTitle
         * @param jobTitle Name of the Job Title to associate with Employee.  * Must be an existing Job setup on the Tenant. Use API &#39;GET Tenant Job Titles by TenantId&#39; to retrieve a list of valid names.              (optional)
         * @return UpdatePositionAndStatusDataRequestBuilder
         */
        public UpdatePositionAndStatusDataRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set flsa
         * @param flsa  (optional)
         * @return UpdatePositionAndStatusDataRequestBuilder
         */
        public UpdatePositionAndStatusDataRequestBuilder flsa(FlsaType flsa) {
            this.flsa = flsa;
            return this;
        }
        
        /**
         * Set managerId
         * @param managerId Unique identifier of Employee in Paycor&#39;s system.  * Must be an existing Employee, use the EmployeeID provided from other GET Employee endpoints  (optional)
         * @return UpdatePositionAndStatusDataRequestBuilder
         */
        public UpdatePositionAndStatusDataRequestBuilder managerId(String managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Identifier of Department. * Use API &#39;GET Legal Entity Departments by Legal Entity id&#39; to retrieve a list of valid departments.              (optional)
         * @return UpdatePositionAndStatusDataRequestBuilder
         */
        public UpdatePositionAndStatusDataRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Build call for updatePositionAndStatusData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePositionAndStatus employeePositionAndStatus = buildBodyParams();
            return updatePositionAndStatusDataCall(employeeId, employeePositionAndStatus, _callback);
        }

        private EmployeePositionAndStatus buildBodyParams() {
            EmployeePositionAndStatus employeePositionAndStatus = new EmployeePositionAndStatus();
            employeePositionAndStatus.employmentStatus(this.employmentStatus);
            employeePositionAndStatus.rehireDate(this.rehireDate);
            employeePositionAndStatus.employmentType(this.employmentType);
            employeePositionAndStatus.workLocation(this.workLocation);
            employeePositionAndStatus.jobTitle(this.jobTitle);
            employeePositionAndStatus.flsa(this.flsa);
            employeePositionAndStatus.managerId(this.managerId);
            employeePositionAndStatus.departmentId(this.departmentId);
            return employeePositionAndStatus;
        }

        /**
         * Execute updatePositionAndStatusData request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeePositionAndStatus employeePositionAndStatus = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updatePositionAndStatusDataWithHttpInfo(employeeId, employeePositionAndStatus);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePositionAndStatusData request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeePositionAndStatus employeePositionAndStatus = buildBodyParams();
            return updatePositionAndStatusDataWithHttpInfo(employeeId, employeePositionAndStatus);
        }

        /**
         * Execute updatePositionAndStatusData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeePositionAndStatus employeePositionAndStatus = buildBodyParams();
            return updatePositionAndStatusDataAsync(employeeId, employeePositionAndStatus, _callback);
        }
    }

    /**
     * Update Employee Position and Status data
     * This endpoint updates an employee&#39;s status and position information.              Data Access: Update Employee Position And Status
     * @param employeeId Id of the employee (required)
     * @param employeePositionAndStatus Put Employee Position and Status model (required)
     * @return UpdatePositionAndStatusDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePositionAndStatusDataRequestBuilder updatePositionAndStatusData(EmploymentStatus2 employmentStatus, OffsetDateTime rehireDate, EmploymentType employmentType, String workLocation, String employeeId) throws IllegalArgumentException {
        if (employmentStatus == null) throw new IllegalArgumentException("\"employmentStatus\" is required but got null");
        if (rehireDate == null) throw new IllegalArgumentException("\"rehireDate\" is required but got null");
        if (employmentType == null) throw new IllegalArgumentException("\"employmentType\" is required but got null");
        if (workLocation == null) throw new IllegalArgumentException("\"workLocation\" is required but got null");
            if (workLocation != null && workLocation.length() < 1) {
              throw new IllegalArgumentException("Invalid value for workLocation. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdatePositionAndStatusDataRequestBuilder(employmentStatus, rehireDate, employmentType, workLocation, employeeId);
    }
    private okhttp3.Call updatePositionDataCall(String employeeId, EmployeePosition employeePosition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePosition;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/position"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePositionDataValidateBeforeCall(String employeeId, EmployeePosition employeePosition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updatePositionData(Async)");
        }

        // verify the required parameter 'employeePosition' is set
        if (employeePosition == null) {
            throw new ApiException("Missing the required parameter 'employeePosition' when calling updatePositionData(Async)");
        }

        return updatePositionDataCall(employeeId, employeePosition, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updatePositionDataWithHttpInfo(String employeeId, EmployeePosition employeePosition) throws ApiException {
        okhttp3.Call localVarCall = updatePositionDataValidateBeforeCall(employeeId, employeePosition, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePositionDataAsync(String employeeId, EmployeePosition employeePosition, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePositionDataValidateBeforeCall(employeeId, employeePosition, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePositionDataRequestBuilder {
        private final EmploymentType employmentType;
        private final String workLocation;
        private final String employeeId;
        private String jobTitle;
        private FlsaType flsa;
        private String managerId;
        private String departmentId;

        private UpdatePositionDataRequestBuilder(EmploymentType employmentType, String workLocation, String employeeId) {
            this.employmentType = employmentType;
            this.workLocation = workLocation;
            this.employeeId = employeeId;
        }

        /**
         * Set jobTitle
         * @param jobTitle Name of the Job Title to associate with Employee.  * Must be an existing Job setup on the Tenant. Use API &#39;GET Tenant Job Titles by TenantId&#39; to retrieve a list of valid names.              (optional)
         * @return UpdatePositionDataRequestBuilder
         */
        public UpdatePositionDataRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set flsa
         * @param flsa  (optional)
         * @return UpdatePositionDataRequestBuilder
         */
        public UpdatePositionDataRequestBuilder flsa(FlsaType flsa) {
            this.flsa = flsa;
            return this;
        }
        
        /**
         * Set managerId
         * @param managerId Unique identifier of Employee in Paycor&#39;s system.  (optional)
         * @return UpdatePositionDataRequestBuilder
         */
        public UpdatePositionDataRequestBuilder managerId(String managerId) {
            this.managerId = managerId;
            return this;
        }
        
        /**
         * Set departmentId
         * @param departmentId Identifier of Department.              (optional)
         * @return UpdatePositionDataRequestBuilder
         */
        public UpdatePositionDataRequestBuilder departmentId(String departmentId) {
            this.departmentId = departmentId;
            return this;
        }
        
        /**
         * Build call for updatePositionData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePosition employeePosition = buildBodyParams();
            return updatePositionDataCall(employeeId, employeePosition, _callback);
        }

        private EmployeePosition buildBodyParams() {
            EmployeePosition employeePosition = new EmployeePosition();
            employeePosition.employmentType(this.employmentType);
            employeePosition.workLocation(this.workLocation);
            employeePosition.jobTitle(this.jobTitle);
            employeePosition.flsa(this.flsa);
            employeePosition.managerId(this.managerId);
            employeePosition.departmentId(this.departmentId);
            return employeePosition;
        }

        /**
         * Execute updatePositionData request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeePosition employeePosition = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updatePositionDataWithHttpInfo(employeeId, employeePosition);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updatePositionData request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeePosition employeePosition = buildBodyParams();
            return updatePositionDataWithHttpInfo(employeeId, employeePosition);
        }

        /**
         * Execute updatePositionData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeePosition employeePosition = buildBodyParams();
            return updatePositionDataAsync(employeeId, employeePosition, _callback);
        }
    }

    /**
     * Update Employee Position data
     * This endpoint updates an employee&#39;s position information.              Data Access: Update Employee Position
     * @param employeeId Id of the employee (required)
     * @param employeePosition Put Employee Position model (required)
     * @return UpdatePositionDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePositionDataRequestBuilder updatePositionData(EmploymentType employmentType, String workLocation, String employeeId) throws IllegalArgumentException {
        if (employmentType == null) throw new IllegalArgumentException("\"employmentType\" is required but got null");
        if (workLocation == null) throw new IllegalArgumentException("\"workLocation\" is required but got null");
            if (workLocation != null && workLocation.length() < 1) {
              throw new IllegalArgumentException("Invalid value for workLocation. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdatePositionDataRequestBuilder(employmentType, workLocation, employeeId);
    }
    private okhttp3.Call updateStatusDataCall(String employeeId, EmployeeStatusUpdate employeeStatusUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeStatusUpdate;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/status"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusDataValidateBeforeCall(String employeeId, EmployeeStatusUpdate employeeStatusUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateStatusData(Async)");
        }

        // verify the required parameter 'employeeStatusUpdate' is set
        if (employeeStatusUpdate == null) {
            throw new ApiException("Missing the required parameter 'employeeStatusUpdate' when calling updateStatusData(Async)");
        }

        return updateStatusDataCall(employeeId, employeeStatusUpdate, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateStatusDataWithHttpInfo(String employeeId, EmployeeStatusUpdate employeeStatusUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateStatusDataValidateBeforeCall(employeeId, employeeStatusUpdate, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStatusDataAsync(String employeeId, EmployeeStatusUpdate employeeStatusUpdate, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusDataValidateBeforeCall(employeeId, employeeStatusUpdate, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStatusDataRequestBuilder {
        private final OffsetDateTime effectiveDate;
        private final EmploymentStatus employeeStatus;
        private final String employeeId;
        private String employeeStatusReasonId;
        private EligibleForRehire eligibleForRehire;
        private Boolean isVoluntaryByEmployee;
        private String notes;

        private UpdateStatusDataRequestBuilder(OffsetDateTime effectiveDate, EmploymentStatus employeeStatus, String employeeId) {
            this.effectiveDate = effectiveDate;
            this.employeeStatus = employeeStatus;
            this.employeeId = employeeId;
        }

        /**
         * Set employeeStatusReasonId
         * @param employeeStatusReasonId Unique Identifier for Employee Status Reason. All possible Status Reason Values can be found using Get Legal Entity Status Reason values endpoint.              (optional)
         * @return UpdateStatusDataRequestBuilder
         */
        public UpdateStatusDataRequestBuilder employeeStatusReasonId(String employeeStatusReasonId) {
            this.employeeStatusReasonId = employeeStatusReasonId;
            return this;
        }
        
        /**
         * Set eligibleForRehire
         * @param eligibleForRehire  (optional)
         * @return UpdateStatusDataRequestBuilder
         */
        public UpdateStatusDataRequestBuilder eligibleForRehire(EligibleForRehire eligibleForRehire) {
            this.eligibleForRehire = eligibleForRehire;
            return this;
        }
        
        /**
         * Set isVoluntaryByEmployee
         * @param isVoluntaryByEmployee Determines if an employee termination is voluntary or not.  This is required when EmployeeStatus is updated to one of these values: Deceased, LaidOff, Resigned, Retired, Terminated. Otherwise optional.              (optional)
         * @return UpdateStatusDataRequestBuilder
         */
        public UpdateStatusDataRequestBuilder isVoluntaryByEmployee(Boolean isVoluntaryByEmployee) {
            this.isVoluntaryByEmployee = isVoluntaryByEmployee;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes associated with the employee&#39;s status update, which will be stored in Employee&#39;s Status History.              (optional)
         * @return UpdateStatusDataRequestBuilder
         */
        public UpdateStatusDataRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for updateStatusData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeStatusUpdate employeeStatusUpdate = buildBodyParams();
            return updateStatusDataCall(employeeId, employeeStatusUpdate, _callback);
        }

        private EmployeeStatusUpdate buildBodyParams() {
            EmployeeStatusUpdate employeeStatusUpdate = new EmployeeStatusUpdate();
            employeeStatusUpdate.effectiveDate(this.effectiveDate);
            employeeStatusUpdate.employeeStatus(this.employeeStatus);
            employeeStatusUpdate.employeeStatusReasonId(this.employeeStatusReasonId);
            employeeStatusUpdate.eligibleForRehire(this.eligibleForRehire);
            employeeStatusUpdate.isVoluntaryByEmployee(this.isVoluntaryByEmployee);
            employeeStatusUpdate.notes(this.notes);
            return employeeStatusUpdate;
        }

        /**
         * Execute updateStatusData request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeStatusUpdate employeeStatusUpdate = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateStatusDataWithHttpInfo(employeeId, employeeStatusUpdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStatusData request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeStatusUpdate employeeStatusUpdate = buildBodyParams();
            return updateStatusDataWithHttpInfo(employeeId, employeeStatusUpdate);
        }

        /**
         * Execute updateStatusData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeStatusUpdate employeeStatusUpdate = buildBodyParams();
            return updateStatusDataAsync(employeeId, employeeStatusUpdate, _callback);
        }
    }

    /**
     * Update Employee Status data
     * This endpoint updates an employee status information.              Data Access: Update Employee Status Data
     * @param employeeId Id of the employee (required)
     * @param employeeStatusUpdate Put Employee Status model (required)
     * @return UpdateStatusDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusDataRequestBuilder updateStatusData(OffsetDateTime effectiveDate, EmploymentStatus employeeStatus, String employeeId) throws IllegalArgumentException {
        if (effectiveDate == null) throw new IllegalArgumentException("\"effectiveDate\" is required but got null");
        if (employeeStatus == null) throw new IllegalArgumentException("\"employeeStatus\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateStatusDataRequestBuilder(effectiveDate, employeeStatus, employeeId);
    }
}
