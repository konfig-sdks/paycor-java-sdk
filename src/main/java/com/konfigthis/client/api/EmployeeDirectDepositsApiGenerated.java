/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountType;
import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.DirectDepositType;
import com.konfigthis.client.model.EmployeeDirectDeposit;
import com.konfigthis.client.model.EmployeeDirectDeposit2;
import com.konfigthis.client.model.EmployeeDirectDeposit3;
import com.konfigthis.client.model.EmployeeHsaDirectDeposit;
import com.konfigthis.client.model.EmployeeHsaDirectDeposit2;
import com.konfigthis.client.model.PagedResultOfEmployeeDirectDeposit;
import com.konfigthis.client.model.PayFrequency;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeDirectDepositsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeDirectDepositsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeDirectDepositsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addByEmployeeIdCall(String employeeId, EmployeeDirectDeposit2 employeeDirectDeposit2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDirectDeposit2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/DirectDeposits"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addByEmployeeIdValidateBeforeCall(String employeeId, EmployeeDirectDeposit2 employeeDirectDeposit2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addByEmployeeId(Async)");
        }

        // verify the required parameter 'employeeDirectDeposit2' is set
        if (employeeDirectDeposit2 == null) {
            throw new ApiException("Missing the required parameter 'employeeDirectDeposit2' when calling addByEmployeeId(Async)");
        }

        return addByEmployeeIdCall(employeeId, employeeDirectDeposit2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> addByEmployeeIdWithHttpInfo(String employeeId, EmployeeDirectDeposit2 employeeDirectDeposit2) throws ApiException {
        okhttp3.Call localVarCall = addByEmployeeIdValidateBeforeCall(employeeId, employeeDirectDeposit2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addByEmployeeIdAsync(String employeeId, EmployeeDirectDeposit2 employeeDirectDeposit2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addByEmployeeIdValidateBeforeCall(employeeId, employeeDirectDeposit2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddByEmployeeIdRequestBuilder {
        private final AccountType accountType;
        private final PayFrequency frequency;
        private final Boolean onHold;
        private final String employeeId;
        private String accountNumber;
        private String routingNumber;
        private String deductionCode;
        private DirectDepositType directDepositType;
        private Double amount;
        private Double rate;

        private AddByEmployeeIdRequestBuilder(AccountType accountType, PayFrequency frequency, Boolean onHold, String employeeId) {
            this.accountType = accountType;
            this.frequency = frequency;
            this.onHold = onHold;
            this.employeeId = employeeId;
        }

        /**
         * Set accountNumber
         * @param accountNumber The bank account number where the direct deposit is directed.              (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set routingNumber
         * @param routingNumber The bank routing number where the direct deposit is directed.               (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder routingNumber(String routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }
        
        /**
         * Set deductionCode
         * @param deductionCode  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder deductionCode(String deductionCode) {
            this.deductionCode = deductionCode;
            return this;
        }
        
        /**
         * Set directDepositType
         * @param directDepositType  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder directDepositType(DirectDepositType directDepositType) {
            this.directDepositType = directDepositType;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Fixed, recurring dollar amount.              (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        

        /**
         * Set amount
         * @param amount Fixed, recurring dollar amount.              (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder amount(Integer amount) {
            this.amount = amount.doubleValue();
            return this;
        }
        
        /**
         * Set rate
         * @param rate Percentage of the paycheck to be deposited into the direct deposit account              (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder rate(Double rate) {
            this.rate = rate;
            return this;
        }
        

        /**
         * Set rate
         * @param rate Percentage of the paycheck to be deposited into the direct deposit account              (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder rate(Integer rate) {
            this.rate = rate.doubleValue();
            return this;
        }
        
        /**
         * Build call for addByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDirectDeposit2 employeeDirectDeposit2 = buildBodyParams();
            return addByEmployeeIdCall(employeeId, employeeDirectDeposit2, _callback);
        }

        private EmployeeDirectDeposit2 buildBodyParams() {
            EmployeeDirectDeposit2 employeeDirectDeposit2 = new EmployeeDirectDeposit2();
            employeeDirectDeposit2.accountType(this.accountType);
            employeeDirectDeposit2.accountNumber(this.accountNumber);
            employeeDirectDeposit2.routingNumber(this.routingNumber);
            employeeDirectDeposit2.frequency(this.frequency);
            employeeDirectDeposit2.deductionCode(this.deductionCode);
            employeeDirectDeposit2.directDepositType(this.directDepositType);
            employeeDirectDeposit2.onHold(this.onHold);
            employeeDirectDeposit2.amount(this.amount);
            employeeDirectDeposit2.rate(this.rate);
            return employeeDirectDeposit2;
        }

        /**
         * Execute addByEmployeeId request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeDirectDeposit2 employeeDirectDeposit2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = addByEmployeeIdWithHttpInfo(employeeId, employeeDirectDeposit2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeDirectDeposit2 employeeDirectDeposit2 = buildBodyParams();
            return addByEmployeeIdWithHttpInfo(employeeId, employeeDirectDeposit2);
        }

        /**
         * Execute addByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeDirectDeposit2 employeeDirectDeposit2 = buildBodyParams();
            return addByEmployeeIdAsync(employeeId, employeeDirectDeposit2, _callback);
        }
    }

    /**
     * Add Employee Direct Deposits by EmployeeID
     * Data Access: Add Employee Direct Deposit
     * @param employeeId Id of employee for which you want to add Direct Deposits (required)
     * @param employeeDirectDeposit2 Direct Deposit object to insert (required)
     * @return AddByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddByEmployeeIdRequestBuilder addByEmployeeId(AccountType accountType, PayFrequency frequency, Boolean onHold, String employeeId) throws IllegalArgumentException {
        if (accountType == null) throw new IllegalArgumentException("\"accountType\" is required but got null");
        if (frequency == null) throw new IllegalArgumentException("\"frequency\" is required but got null");
        if (onHold == null) throw new IllegalArgumentException("\"onHold\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddByEmployeeIdRequestBuilder(accountType, frequency, onHold, employeeId);
    }
    private okhttp3.Call addByEmployeeIdHsaCall(String employeeId, EmployeeHsaDirectDeposit employeeHsaDirectDeposit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeHsaDirectDeposit;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/HSAaccounts"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addByEmployeeIdHsaValidateBeforeCall(String employeeId, EmployeeHsaDirectDeposit employeeHsaDirectDeposit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addByEmployeeIdHsa(Async)");
        }

        // verify the required parameter 'employeeHsaDirectDeposit' is set
        if (employeeHsaDirectDeposit == null) {
            throw new ApiException("Missing the required parameter 'employeeHsaDirectDeposit' when calling addByEmployeeIdHsa(Async)");
        }

        return addByEmployeeIdHsaCall(employeeId, employeeHsaDirectDeposit, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> addByEmployeeIdHsaWithHttpInfo(String employeeId, EmployeeHsaDirectDeposit employeeHsaDirectDeposit) throws ApiException {
        okhttp3.Call localVarCall = addByEmployeeIdHsaValidateBeforeCall(employeeId, employeeHsaDirectDeposit, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addByEmployeeIdHsaAsync(String employeeId, EmployeeHsaDirectDeposit employeeHsaDirectDeposit, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addByEmployeeIdHsaValidateBeforeCall(employeeId, employeeHsaDirectDeposit, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddByEmployeeIdHsaRequestBuilder {
        private final AccountType accountType;
        private final PayFrequency frequency;
        private final String deductionCode;
        private final Boolean onHold;
        private final String employeeId;
        private String accountNumber;
        private String routingNumber;
        private Double amount;
        private Double rate;

        private AddByEmployeeIdHsaRequestBuilder(AccountType accountType, PayFrequency frequency, String deductionCode, Boolean onHold, String employeeId) {
            this.accountType = accountType;
            this.frequency = frequency;
            this.deductionCode = deductionCode;
            this.onHold = onHold;
            this.employeeId = employeeId;
        }

        /**
         * Set accountNumber
         * @param accountNumber The bank account number where the HSA direct deposit is directed.              (optional)
         * @return AddByEmployeeIdHsaRequestBuilder
         */
        public AddByEmployeeIdHsaRequestBuilder accountNumber(String accountNumber) {
            this.accountNumber = accountNumber;
            return this;
        }
        
        /**
         * Set routingNumber
         * @param routingNumber The bank routing number where the HSA direct deposit is directed.               (optional)
         * @return AddByEmployeeIdHsaRequestBuilder
         */
        public AddByEmployeeIdHsaRequestBuilder routingNumber(String routingNumber) {
            this.routingNumber = routingNumber;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Fixed, recurring dollar amount.              (optional)
         * @return AddByEmployeeIdHsaRequestBuilder
         */
        public AddByEmployeeIdHsaRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        

        /**
         * Set amount
         * @param amount Fixed, recurring dollar amount.              (optional)
         * @return AddByEmployeeIdHsaRequestBuilder
         */
        public AddByEmployeeIdHsaRequestBuilder amount(Integer amount) {
            this.amount = amount.doubleValue();
            return this;
        }
        
        /**
         * Set rate
         * @param rate Percentage of the paycheck to be deposited into the HSA direct deposit account              (optional)
         * @return AddByEmployeeIdHsaRequestBuilder
         */
        public AddByEmployeeIdHsaRequestBuilder rate(Double rate) {
            this.rate = rate;
            return this;
        }
        

        /**
         * Set rate
         * @param rate Percentage of the paycheck to be deposited into the HSA direct deposit account              (optional)
         * @return AddByEmployeeIdHsaRequestBuilder
         */
        public AddByEmployeeIdHsaRequestBuilder rate(Integer rate) {
            this.rate = rate.doubleValue();
            return this;
        }
        
        /**
         * Build call for addByEmployeeIdHsa
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeHsaDirectDeposit employeeHsaDirectDeposit = buildBodyParams();
            return addByEmployeeIdHsaCall(employeeId, employeeHsaDirectDeposit, _callback);
        }

        private EmployeeHsaDirectDeposit buildBodyParams() {
            EmployeeHsaDirectDeposit employeeHsaDirectDeposit = new EmployeeHsaDirectDeposit();
            employeeHsaDirectDeposit.accountType(this.accountType);
            employeeHsaDirectDeposit.accountNumber(this.accountNumber);
            employeeHsaDirectDeposit.routingNumber(this.routingNumber);
            employeeHsaDirectDeposit.frequency(this.frequency);
            employeeHsaDirectDeposit.deductionCode(this.deductionCode);
            employeeHsaDirectDeposit.onHold(this.onHold);
            employeeHsaDirectDeposit.amount(this.amount);
            employeeHsaDirectDeposit.rate(this.rate);
            return employeeHsaDirectDeposit;
        }

        /**
         * Execute addByEmployeeIdHsa request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeHsaDirectDeposit employeeHsaDirectDeposit = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = addByEmployeeIdHsaWithHttpInfo(employeeId, employeeHsaDirectDeposit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addByEmployeeIdHsa request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeHsaDirectDeposit employeeHsaDirectDeposit = buildBodyParams();
            return addByEmployeeIdHsaWithHttpInfo(employeeId, employeeHsaDirectDeposit);
        }

        /**
         * Execute addByEmployeeIdHsa request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeHsaDirectDeposit employeeHsaDirectDeposit = buildBodyParams();
            return addByEmployeeIdHsaAsync(employeeId, employeeHsaDirectDeposit, _callback);
        }
    }

    /**
     * Add Employee HSA Direct Deposits by EmployeeID
     * Data Access: Add Employee HSA Account
     * @param employeeId ID of employee for which you want to add HSA Direct Deposits (required)
     * @param employeeHsaDirectDeposit HSA Direct Deposit object to insert (required)
     * @return AddByEmployeeIdHsaRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddByEmployeeIdHsaRequestBuilder addByEmployeeIdHsa(AccountType accountType, PayFrequency frequency, String deductionCode, Boolean onHold, String employeeId) throws IllegalArgumentException {
        if (accountType == null) throw new IllegalArgumentException("\"accountType\" is required but got null");
        if (frequency == null) throw new IllegalArgumentException("\"frequency\" is required but got null");
        if (deductionCode == null) throw new IllegalArgumentException("\"deductionCode\" is required but got null");
            if (deductionCode != null && deductionCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for deductionCode. Length must be greater than or equal to 1.");
            }

        if (onHold == null) throw new IllegalArgumentException("\"onHold\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddByEmployeeIdHsaRequestBuilder(accountType, frequency, deductionCode, onHold, employeeId);
    }
    private okhttp3.Call getByEmployeeAndDepositIdCall(String employeeId, String directDepositId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/DirectDeposits/{directDepositId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "directDepositId" + "}", localVarApiClient.escapeString(directDepositId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeAndDepositIdValidateBeforeCall(String employeeId, String directDepositId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeAndDepositId(Async)");
        }

        // verify the required parameter 'directDepositId' is set
        if (directDepositId == null) {
            throw new ApiException("Missing the required parameter 'directDepositId' when calling getByEmployeeAndDepositId(Async)");
        }

        return getByEmployeeAndDepositIdCall(employeeId, directDepositId, _callback);

    }


    private ApiResponse<EmployeeDirectDeposit> getByEmployeeAndDepositIdWithHttpInfo(String employeeId, String directDepositId) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeAndDepositIdValidateBeforeCall(employeeId, directDepositId, null);
        Type localVarReturnType = new TypeToken<EmployeeDirectDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeAndDepositIdAsync(String employeeId, String directDepositId, final ApiCallback<EmployeeDirectDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeAndDepositIdValidateBeforeCall(employeeId, directDepositId, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDirectDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeAndDepositIdRequestBuilder {
        private final String employeeId;
        private final String directDepositId;

        private GetByEmployeeAndDepositIdRequestBuilder(String employeeId, String directDepositId) {
            this.employeeId = employeeId;
            this.directDepositId = directDepositId;
        }

        /**
         * Build call for getByEmployeeAndDepositId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeAndDepositIdCall(employeeId, directDepositId, _callback);
        }


        /**
         * Execute getByEmployeeAndDepositId request
         * @return EmployeeDirectDeposit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeDirectDeposit execute() throws ApiException {
            ApiResponse<EmployeeDirectDeposit> localVarResp = getByEmployeeAndDepositIdWithHttpInfo(employeeId, directDepositId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeAndDepositId request with HTTP info returned
         * @return ApiResponse&lt;EmployeeDirectDeposit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeDirectDeposit> executeWithHttpInfo() throws ApiException {
            return getByEmployeeAndDepositIdWithHttpInfo(employeeId, directDepositId);
        }

        /**
         * Execute getByEmployeeAndDepositId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeDirectDeposit> _callback) throws ApiException {
            return getByEmployeeAndDepositIdAsync(employeeId, directDepositId, _callback);
        }
    }

    /**
     * Get Employee Direct Deposit by EmployeeID and DirectDepositID
     * Data Access: View Employee Direct Deposit Information by Direct Deposit Id
     * @param employeeId ID of employee for which you want to get Direct Deposits (required)
     * @param directDepositId ID of an employee direct deposit which you want to retrieve (required)
     * @return GetByEmployeeAndDepositIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeAndDepositIdRequestBuilder getByEmployeeAndDepositId(String employeeId, String directDepositId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (directDepositId == null) throw new IllegalArgumentException("\"directDepositId\" is required but got null");
            

        return new GetByEmployeeAndDepositIdRequestBuilder(employeeId, directDepositId);
    }
    private okhttp3.Call getByEmployeeIdCall(String employeeId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/DirectDeposits"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(String employeeId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeeDirectDeposit> getByEmployeeIdWithHttpInfo(String employeeId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeDirectDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(String employeeId, String continuationToken, final ApiCallback<PagedResultOfEmployeeDirectDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeDirectDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final String employeeId;
        private String continuationToken;

        private GetByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set continuationToken
         * @param continuationToken Token to get next set of direct deposits (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, continuationToken, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return PagedResultOfEmployeeDirectDeposit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeeDirectDeposit execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeeDirectDeposit> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeeDirectDeposit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeeDirectDeposit> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, continuationToken);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeeDirectDeposit> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, continuationToken, _callback);
        }
    }

    /**
     * Get Employee Direct Deposits by EmployeeID
     * Data Access: View Employee Direct Deposit Information by Employee Id
     * @param employeeId ID of employee for which you want to get Direct Deposits (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call getByEmployeeIdHSACall(String employeeId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/HSAaccounts"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdHSAValidateBeforeCall(String employeeId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeIdHSA(Async)");
        }

        return getByEmployeeIdHSACall(employeeId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeeDirectDeposit> getByEmployeeIdHSAWithHttpInfo(String employeeId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdHSAValidateBeforeCall(employeeId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeDirectDeposit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdHSAAsync(String employeeId, String continuationToken, final ApiCallback<PagedResultOfEmployeeDirectDeposit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdHSAValidateBeforeCall(employeeId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeDirectDeposit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdHSARequestBuilder {
        private final String employeeId;
        private String continuationToken;

        private GetByEmployeeIdHSARequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set continuationToken
         * @param continuationToken Token to get next set of HSA Direct Deposits (optional)
         * @return GetByEmployeeIdHSARequestBuilder
         */
        public GetByEmployeeIdHSARequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getByEmployeeIdHSA
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns HSA Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdHSACall(employeeId, continuationToken, _callback);
        }


        /**
         * Execute getByEmployeeIdHSA request
         * @return PagedResultOfEmployeeDirectDeposit
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns HSA Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeeDirectDeposit execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeeDirectDeposit> localVarResp = getByEmployeeIdHSAWithHttpInfo(employeeId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeIdHSA request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeeDirectDeposit&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns HSA Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeeDirectDeposit> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdHSAWithHttpInfo(employeeId, continuationToken);
        }

        /**
         * Execute getByEmployeeIdHSA request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns HSA Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeeDirectDeposit> _callback) throws ApiException {
            return getByEmployeeIdHSAAsync(employeeId, continuationToken, _callback);
        }
    }

    /**
     * Get Employee HSA Direct Deposits by EmployeeID
     * Data Access: View Employee HSA Account Information
     * @param employeeId ID of employee for whom you want to get HSA Direct Deposits (required)
     * @return GetByEmployeeIdHSARequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns HSA Direct Deposits based on EmployeeID </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdHSARequestBuilder getByEmployeeIdHSA(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdHSARequestBuilder(employeeId);
    }
    private okhttp3.Call updateByEmployeeIdDDDCall(String employeeId, EmployeeDirectDeposit3 employeeDirectDeposit3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDirectDeposit3;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/DirectDeposits"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByEmployeeIdDDDValidateBeforeCall(String employeeId, EmployeeDirectDeposit3 employeeDirectDeposit3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateByEmployeeIdDDD(Async)");
        }

        // verify the required parameter 'employeeDirectDeposit3' is set
        if (employeeDirectDeposit3 == null) {
            throw new ApiException("Missing the required parameter 'employeeDirectDeposit3' when calling updateByEmployeeIdDDD(Async)");
        }

        return updateByEmployeeIdDDDCall(employeeId, employeeDirectDeposit3, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateByEmployeeIdDDDWithHttpInfo(String employeeId, EmployeeDirectDeposit3 employeeDirectDeposit3) throws ApiException {
        okhttp3.Call localVarCall = updateByEmployeeIdDDDValidateBeforeCall(employeeId, employeeDirectDeposit3, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByEmployeeIdDDDAsync(String employeeId, EmployeeDirectDeposit3 employeeDirectDeposit3, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByEmployeeIdDDDValidateBeforeCall(employeeId, employeeDirectDeposit3, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByEmployeeIdDDDRequestBuilder {
        private final String id;
        private final AccountType accountType;
        private final String accountNumber;
        private final String routingNumber;
        private final PayFrequency frequency;
        private final Boolean onHold;
        private final String employeeId;
        private DirectDepositType directDepositType;
        private Double amount;
        private Double rate;

        private UpdateByEmployeeIdDDDRequestBuilder(String id, AccountType accountType, String accountNumber, String routingNumber, PayFrequency frequency, Boolean onHold, String employeeId) {
            this.id = id;
            this.accountType = accountType;
            this.accountNumber = accountNumber;
            this.routingNumber = routingNumber;
            this.frequency = frequency;
            this.onHold = onHold;
            this.employeeId = employeeId;
        }

        /**
         * Set directDepositType
         * @param directDepositType  (optional)
         * @return UpdateByEmployeeIdDDDRequestBuilder
         */
        public UpdateByEmployeeIdDDDRequestBuilder directDepositType(DirectDepositType directDepositType) {
            this.directDepositType = directDepositType;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Fixed, recurring dollar amount.              (optional)
         * @return UpdateByEmployeeIdDDDRequestBuilder
         */
        public UpdateByEmployeeIdDDDRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        

        /**
         * Set amount
         * @param amount Fixed, recurring dollar amount.              (optional)
         * @return UpdateByEmployeeIdDDDRequestBuilder
         */
        public UpdateByEmployeeIdDDDRequestBuilder amount(Integer amount) {
            this.amount = amount.doubleValue();
            return this;
        }
        
        /**
         * Set rate
         * @param rate Percentage of the paycheck to be deposited into the direct deposit account              (optional)
         * @return UpdateByEmployeeIdDDDRequestBuilder
         */
        public UpdateByEmployeeIdDDDRequestBuilder rate(Double rate) {
            this.rate = rate;
            return this;
        }
        

        /**
         * Set rate
         * @param rate Percentage of the paycheck to be deposited into the direct deposit account              (optional)
         * @return UpdateByEmployeeIdDDDRequestBuilder
         */
        public UpdateByEmployeeIdDDDRequestBuilder rate(Integer rate) {
            this.rate = rate.doubleValue();
            return this;
        }
        
        /**
         * Build call for updateByEmployeeIdDDD
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDirectDeposit3 employeeDirectDeposit3 = buildBodyParams();
            return updateByEmployeeIdDDDCall(employeeId, employeeDirectDeposit3, _callback);
        }

        private EmployeeDirectDeposit3 buildBodyParams() {
            EmployeeDirectDeposit3 employeeDirectDeposit3 = new EmployeeDirectDeposit3();
            employeeDirectDeposit3.id(this.id);
            employeeDirectDeposit3.accountType(this.accountType);
            employeeDirectDeposit3.accountNumber(this.accountNumber);
            employeeDirectDeposit3.routingNumber(this.routingNumber);
            employeeDirectDeposit3.frequency(this.frequency);
            employeeDirectDeposit3.directDepositType(this.directDepositType);
            employeeDirectDeposit3.onHold(this.onHold);
            employeeDirectDeposit3.amount(this.amount);
            employeeDirectDeposit3.rate(this.rate);
            return employeeDirectDeposit3;
        }

        /**
         * Execute updateByEmployeeIdDDD request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeDirectDeposit3 employeeDirectDeposit3 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateByEmployeeIdDDDWithHttpInfo(employeeId, employeeDirectDeposit3);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByEmployeeIdDDD request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeDirectDeposit3 employeeDirectDeposit3 = buildBodyParams();
            return updateByEmployeeIdDDDWithHttpInfo(employeeId, employeeDirectDeposit3);
        }

        /**
         * Execute updateByEmployeeIdDDD request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeDirectDeposit3 employeeDirectDeposit3 = buildBodyParams();
            return updateByEmployeeIdDDDAsync(employeeId, employeeDirectDeposit3, _callback);
        }
    }

    /**
     * Update Employee Direct Deposits by EmployeeID
     * Data Access: Update Employee Direct Deposit Information
     * @param employeeId ID of employee for which you want to update Direct Deposit (required)
     * @param employeeDirectDeposit3 Employee Direct Deposit object with updated fields (required)
     * @return UpdateByEmployeeIdDDDRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByEmployeeIdDDDRequestBuilder updateByEmployeeIdDDD(String id, AccountType accountType, String accountNumber, String routingNumber, PayFrequency frequency, Boolean onHold, String employeeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        if (accountType == null) throw new IllegalArgumentException("\"accountType\" is required but got null");
        if (accountNumber == null) throw new IllegalArgumentException("\"accountNumber\" is required but got null");
            if (accountNumber != null && accountNumber.length() < 1) {
              throw new IllegalArgumentException("Invalid value for accountNumber. Length must be greater than or equal to 1.");
            }

        if (routingNumber == null) throw new IllegalArgumentException("\"routingNumber\" is required but got null");
            if (routingNumber != null && routingNumber.length() < 1) {
              throw new IllegalArgumentException("Invalid value for routingNumber. Length must be greater than or equal to 1.");
            }

        if (frequency == null) throw new IllegalArgumentException("\"frequency\" is required but got null");
        if (onHold == null) throw new IllegalArgumentException("\"onHold\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateByEmployeeIdDDDRequestBuilder(id, accountType, accountNumber, routingNumber, frequency, onHold, employeeId);
    }
    private okhttp3.Call updateHsaDirectDepositsByEmployeeIdCall(String employeeId, EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeHsaDirectDeposit2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/HSAaccounts"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHsaDirectDepositsByEmployeeIdValidateBeforeCall(String employeeId, EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateHsaDirectDepositsByEmployeeId(Async)");
        }

        // verify the required parameter 'employeeHsaDirectDeposit2' is set
        if (employeeHsaDirectDeposit2 == null) {
            throw new ApiException("Missing the required parameter 'employeeHsaDirectDeposit2' when calling updateHsaDirectDepositsByEmployeeId(Async)");
        }

        return updateHsaDirectDepositsByEmployeeIdCall(employeeId, employeeHsaDirectDeposit2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateHsaDirectDepositsByEmployeeIdWithHttpInfo(String employeeId, EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2) throws ApiException {
        okhttp3.Call localVarCall = updateHsaDirectDepositsByEmployeeIdValidateBeforeCall(employeeId, employeeHsaDirectDeposit2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateHsaDirectDepositsByEmployeeIdAsync(String employeeId, EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHsaDirectDepositsByEmployeeIdValidateBeforeCall(employeeId, employeeHsaDirectDeposit2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateHsaDirectDepositsByEmployeeIdRequestBuilder {
        private final String id;
        private final AccountType accountType;
        private final String accountNumber;
        private final String routingNumber;
        private final PayFrequency frequency;
        private final Boolean onHold;
        private final String employeeId;
        private Double amount;
        private Double rate;

        private UpdateHsaDirectDepositsByEmployeeIdRequestBuilder(String id, AccountType accountType, String accountNumber, String routingNumber, PayFrequency frequency, Boolean onHold, String employeeId) {
            this.id = id;
            this.accountType = accountType;
            this.accountNumber = accountNumber;
            this.routingNumber = routingNumber;
            this.frequency = frequency;
            this.onHold = onHold;
            this.employeeId = employeeId;
        }

        /**
         * Set amount
         * @param amount Fixed, recurring dollar amount.              (optional)
         * @return UpdateHsaDirectDepositsByEmployeeIdRequestBuilder
         */
        public UpdateHsaDirectDepositsByEmployeeIdRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        

        /**
         * Set amount
         * @param amount Fixed, recurring dollar amount.              (optional)
         * @return UpdateHsaDirectDepositsByEmployeeIdRequestBuilder
         */
        public UpdateHsaDirectDepositsByEmployeeIdRequestBuilder amount(Integer amount) {
            this.amount = amount.doubleValue();
            return this;
        }
        
        /**
         * Set rate
         * @param rate Percentage of the paycheck to be deposited into the HSA direct deposit account              (optional)
         * @return UpdateHsaDirectDepositsByEmployeeIdRequestBuilder
         */
        public UpdateHsaDirectDepositsByEmployeeIdRequestBuilder rate(Double rate) {
            this.rate = rate;
            return this;
        }
        

        /**
         * Set rate
         * @param rate Percentage of the paycheck to be deposited into the HSA direct deposit account              (optional)
         * @return UpdateHsaDirectDepositsByEmployeeIdRequestBuilder
         */
        public UpdateHsaDirectDepositsByEmployeeIdRequestBuilder rate(Integer rate) {
            this.rate = rate.doubleValue();
            return this;
        }
        
        /**
         * Build call for updateHsaDirectDepositsByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2 = buildBodyParams();
            return updateHsaDirectDepositsByEmployeeIdCall(employeeId, employeeHsaDirectDeposit2, _callback);
        }

        private EmployeeHsaDirectDeposit2 buildBodyParams() {
            EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2 = new EmployeeHsaDirectDeposit2();
            employeeHsaDirectDeposit2.id(this.id);
            employeeHsaDirectDeposit2.accountType(this.accountType);
            employeeHsaDirectDeposit2.accountNumber(this.accountNumber);
            employeeHsaDirectDeposit2.routingNumber(this.routingNumber);
            employeeHsaDirectDeposit2.frequency(this.frequency);
            employeeHsaDirectDeposit2.onHold(this.onHold);
            employeeHsaDirectDeposit2.amount(this.amount);
            employeeHsaDirectDeposit2.rate(this.rate);
            return employeeHsaDirectDeposit2;
        }

        /**
         * Execute updateHsaDirectDepositsByEmployeeId request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateHsaDirectDepositsByEmployeeIdWithHttpInfo(employeeId, employeeHsaDirectDeposit2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateHsaDirectDepositsByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2 = buildBodyParams();
            return updateHsaDirectDepositsByEmployeeIdWithHttpInfo(employeeId, employeeHsaDirectDeposit2);
        }

        /**
         * Execute updateHsaDirectDepositsByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeHsaDirectDeposit2 employeeHsaDirectDeposit2 = buildBodyParams();
            return updateHsaDirectDepositsByEmployeeIdAsync(employeeId, employeeHsaDirectDeposit2, _callback);
        }
    }

    /**
     * Update Employee HSA Direct Deposits by EmployeeID
     * Data Access: Update Employee HSA Account Information
     * @param employeeId ID of employee for which you want to update HSA Direct Deposits (required)
     * @param employeeHsaDirectDeposit2 HSA Employee Direct Deposit object with updated fields (required)
     * @return UpdateHsaDirectDepositsByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateHsaDirectDepositsByEmployeeIdRequestBuilder updateHsaDirectDepositsByEmployeeId(String id, AccountType accountType, String accountNumber, String routingNumber, PayFrequency frequency, Boolean onHold, String employeeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        if (accountType == null) throw new IllegalArgumentException("\"accountType\" is required but got null");
        if (accountNumber == null) throw new IllegalArgumentException("\"accountNumber\" is required but got null");
            if (accountNumber != null && accountNumber.length() < 1) {
              throw new IllegalArgumentException("Invalid value for accountNumber. Length must be greater than or equal to 1.");
            }

        if (routingNumber == null) throw new IllegalArgumentException("\"routingNumber\" is required but got null");
            if (routingNumber != null && routingNumber.length() < 1) {
              throw new IllegalArgumentException("Invalid value for routingNumber. Length must be greater than or equal to 1.");
            }

        if (frequency == null) throw new IllegalArgumentException("\"frequency\" is required but got null");
        if (onHold == null) throw new IllegalArgumentException("\"onHold\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateHsaDirectDepositsByEmployeeIdRequestBuilder(id, accountType, accountNumber, routingNumber, frequency, onHold, employeeId);
    }
}
