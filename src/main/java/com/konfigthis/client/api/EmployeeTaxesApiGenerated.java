/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdjustWithholdingType;
import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.EmployeeExemptions;
import com.konfigthis.client.model.EmployeeTax;
import com.konfigthis.client.model.EmployeeTax2;
import com.konfigthis.client.model.EmployeeTax3;
import com.konfigthis.client.model.EmployeeTaxCredit;
import com.konfigthis.client.model.FilingStatus;
import com.konfigthis.client.model.FilingStatus2;
import com.konfigthis.client.model.GlobalTaxForm;
import com.konfigthis.client.model.Includes16;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ReciprocityType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeTaxesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeTaxesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeTaxesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addByEmployeeIdCall(String employeeId, EmployeeTax2 employeeTax2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeTax2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/taxes"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addByEmployeeIdValidateBeforeCall(String employeeId, EmployeeTax2 employeeTax2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addByEmployeeId(Async)");
        }

        // verify the required parameter 'employeeTax2' is set
        if (employeeTax2 == null) {
            throw new ApiException("Missing the required parameter 'employeeTax2' when calling addByEmployeeId(Async)");
        }

        return addByEmployeeIdCall(employeeId, employeeTax2, _callback);

    }


    private ApiResponse<List<CreateOrUpdateResponse>> addByEmployeeIdWithHttpInfo(String employeeId, EmployeeTax2 employeeTax2) throws ApiException {
        okhttp3.Call localVarCall = addByEmployeeIdValidateBeforeCall(employeeId, employeeTax2, null);
        Type localVarReturnType = new TypeToken<List<CreateOrUpdateResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addByEmployeeIdAsync(String employeeId, EmployeeTax2 employeeTax2, final ApiCallback<List<CreateOrUpdateResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addByEmployeeIdValidateBeforeCall(employeeId, employeeTax2, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrUpdateResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddByEmployeeIdRequestBuilder {
        private final String legalEntityTaxId;
        private final ReciprocityType reciprocityType;
        private final OffsetDateTime withholdingEffectiveStartDate;
        private final String employeeId;
        private FilingStatus2 filingStatus;
        private OffsetDateTime blockDate;
        private String nonResidentAlien;
        private Boolean isProbationaryEmployee;
        private String occupationalCode;
        private String geographicCode;
        private String soCCode;
        private String seasonalCode;
        private String countyCode;
        private String spouseWork;
        private String dependentInsuranceEligible;
        private OffsetDateTime dependentInsuranceEligibleDate;
        private Integer applicableBirthyear;
        private AdjustWithholdingType adjustWithholding;
        private Double amount;
        private Double percentage;
        private String ncCICode;
        private String psdCode;
        private Double psdRate;
        private Boolean onHold;
        private EmployeeExemptions exemptions;
        private EmployeeTaxCredit taxCredit;

        private AddByEmployeeIdRequestBuilder(String legalEntityTaxId, ReciprocityType reciprocityType, OffsetDateTime withholdingEffectiveStartDate, String employeeId) {
            this.legalEntityTaxId = legalEntityTaxId;
            this.reciprocityType = reciprocityType;
            this.withholdingEffectiveStartDate = withholdingEffectiveStartDate;
            this.employeeId = employeeId;
        }

        /**
         * Set filingStatus
         * @param filingStatus  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder filingStatus(FilingStatus2 filingStatus) {
            this.filingStatus = filingStatus;
            return this;
        }
        
        /**
         * Set blockDate
         * @param blockDate Withholding block date (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder blockDate(OffsetDateTime blockDate) {
            this.blockDate = blockDate;
            return this;
        }
        
        /**
         * Set nonResidentAlien
         * @param nonResidentAlien Specifies whether an employee is NonResidentAlien (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder nonResidentAlien(String nonResidentAlien) {
            this.nonResidentAlien = nonResidentAlien;
            return this;
        }
        
        /**
         * Set isProbationaryEmployee
         * @param isProbationaryEmployee Specifies whether an employee is a probationary employee (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder isProbationaryEmployee(Boolean isProbationaryEmployee) {
            this.isProbationaryEmployee = isProbationaryEmployee;
            return this;
        }
        
        /**
         * Set occupationalCode
         * @param occupationalCode Occupational code (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder occupationalCode(String occupationalCode) {
            this.occupationalCode = occupationalCode;
            return this;
        }
        
        /**
         * Set geographicCode
         * @param geographicCode Geographic code Required only for UNEAK tax (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder geographicCode(String geographicCode) {
            this.geographicCode = geographicCode;
            return this;
        }
        
        /**
         * Set soCCode
         * @param soCCode Standard occupational classification Code (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder soCCode(String soCCode) {
            this.soCCode = soCCode;
            return this;
        }
        
        /**
         * Set seasonalCode
         * @param seasonalCode Seasonal Code (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder seasonalCode(String seasonalCode) {
            this.seasonalCode = seasonalCode;
            return this;
        }
        
        /**
         * Set countyCode
         * @param countyCode County Code (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder countyCode(String countyCode) {
            this.countyCode = countyCode;
            return this;
        }
        
        /**
         * Set spouseWork
         * @param spouseWork Specifies  whether an employee&#39;s spouse is employed (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder spouseWork(String spouseWork) {
            this.spouseWork = spouseWork;
            return this;
        }
        
        /**
         * Set dependentInsuranceEligible
         * @param dependentInsuranceEligible Dependent insurance eligibility status (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder dependentInsuranceEligible(String dependentInsuranceEligible) {
            this.dependentInsuranceEligible = dependentInsuranceEligible;
            return this;
        }
        
        /**
         * Set dependentInsuranceEligibleDate
         * @param dependentInsuranceEligibleDate Dependent insurance eligibility date (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder dependentInsuranceEligibleDate(OffsetDateTime dependentInsuranceEligibleDate) {
            this.dependentInsuranceEligibleDate = dependentInsuranceEligibleDate;
            return this;
        }
        
        /**
         * Set applicableBirthyear
         * @param applicableBirthyear Birth year (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder applicableBirthyear(Integer applicableBirthyear) {
            this.applicableBirthyear = applicableBirthyear;
            return this;
        }
        
        /**
         * Set adjustWithholding
         * @param adjustWithholding  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder adjustWithholding(AdjustWithholdingType adjustWithholding) {
            this.adjustWithholding = adjustWithholding;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Fixed, recurring deduction dollar amount.              (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        

        /**
         * Set amount
         * @param amount Fixed, recurring deduction dollar amount.              (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder amount(Integer amount) {
            this.amount = amount.doubleValue();
            return this;
        }
        
        /**
         * Set percentage
         * @param percentage Percentage value used in tax calculation.  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder percentage(Double percentage) {
            this.percentage = percentage;
            return this;
        }
        

        /**
         * Set percentage
         * @param percentage Percentage value used in tax calculation.  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder percentage(Integer percentage) {
            this.percentage = percentage.doubleValue();
            return this;
        }
        
        /**
         * Set ncCICode
         * @param ncCICode National Council on Compensation Insurance (NCCI) Code  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder ncCICode(String ncCICode) {
            this.ncCICode = ncCICode;
            return this;
        }
        
        /**
         * Set psdCode
         * @param psdCode PA Residence PSD code- political subdivision code (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder psdCode(String psdCode) {
            this.psdCode = psdCode;
            return this;
        }
        
        /**
         * Set psdRate
         * @param psdRate PA Residence PSD rate (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder psdRate(Double psdRate) {
            this.psdRate = psdRate;
            return this;
        }
        

        /**
         * Set psdRate
         * @param psdRate PA Residence PSD rate (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder psdRate(Integer psdRate) {
            this.psdRate = psdRate.doubleValue();
            return this;
        }
        
        /**
         * Set onHold
         * @param onHold Whether employee tax should appear on paychecks.              (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder onHold(Boolean onHold) {
            this.onHold = onHold;
            return this;
        }
        
        /**
         * Set exemptions
         * @param exemptions  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder exemptions(EmployeeExemptions exemptions) {
            this.exemptions = exemptions;
            return this;
        }
        
        /**
         * Set taxCredit
         * @param taxCredit  (optional)
         * @return AddByEmployeeIdRequestBuilder
         */
        public AddByEmployeeIdRequestBuilder taxCredit(EmployeeTaxCredit taxCredit) {
            this.taxCredit = taxCredit;
            return this;
        }
        
        /**
         * Build call for addByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeTax2 employeeTax2 = buildBodyParams();
            return addByEmployeeIdCall(employeeId, employeeTax2, _callback);
        }

        private EmployeeTax2 buildBodyParams() {
            EmployeeTax2 employeeTax2 = new EmployeeTax2();
            employeeTax2.legalEntityTaxId(this.legalEntityTaxId);
            employeeTax2.reciprocityType(this.reciprocityType);
            employeeTax2.filingStatus(this.filingStatus);
            employeeTax2.withholdingEffectiveStartDate(this.withholdingEffectiveStartDate);
            employeeTax2.blockDate(this.blockDate);
            employeeTax2.nonResidentAlien(this.nonResidentAlien);
            employeeTax2.isProbationaryEmployee(this.isProbationaryEmployee);
            employeeTax2.occupationalCode(this.occupationalCode);
            employeeTax2.geographicCode(this.geographicCode);
            employeeTax2.soCCode(this.soCCode);
            employeeTax2.seasonalCode(this.seasonalCode);
            employeeTax2.countyCode(this.countyCode);
            employeeTax2.spouseWork(this.spouseWork);
            employeeTax2.dependentInsuranceEligible(this.dependentInsuranceEligible);
            employeeTax2.dependentInsuranceEligibleDate(this.dependentInsuranceEligibleDate);
            employeeTax2.applicableBirthyear(this.applicableBirthyear);
            employeeTax2.adjustWithholding(this.adjustWithholding);
            employeeTax2.amount(this.amount);
            employeeTax2.percentage(this.percentage);
            employeeTax2.ncCICode(this.ncCICode);
            employeeTax2.psdCode(this.psdCode);
            employeeTax2.psdRate(this.psdRate);
            employeeTax2.onHold(this.onHold);
            employeeTax2.exemptions(this.exemptions);
            employeeTax2.taxCredit(this.taxCredit);
            return employeeTax2;
        }

        /**
         * Execute addByEmployeeId request
         * @return List&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public List<CreateOrUpdateResponse> execute() throws ApiException {
            EmployeeTax2 employeeTax2 = buildBodyParams();
            ApiResponse<List<CreateOrUpdateResponse>> localVarResp = addByEmployeeIdWithHttpInfo(employeeId, employeeTax2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CreateOrUpdateResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CreateOrUpdateResponse>> executeWithHttpInfo() throws ApiException {
            EmployeeTax2 employeeTax2 = buildBodyParams();
            return addByEmployeeIdWithHttpInfo(employeeId, employeeTax2);
        }

        /**
         * Execute addByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CreateOrUpdateResponse>> _callback) throws ApiException {
            EmployeeTax2 employeeTax2 = buildBodyParams();
            return addByEmployeeIdAsync(employeeId, employeeTax2, _callback);
        }
    }

    /**
     * Add Tax by EmployeeID
     * * Use GET Tax Fields by Tax Code to determine payload needed to complete this call  Data Access: Create Employee Tax
     * @param employeeId ID of an Employee for whom you want to add the tax (required)
     * @param employeeTax2 EmployeeTax object (required)
     * @return AddByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddByEmployeeIdRequestBuilder addByEmployeeId(String legalEntityTaxId, ReciprocityType reciprocityType, OffsetDateTime withholdingEffectiveStartDate, String employeeId) throws IllegalArgumentException {
        if (legalEntityTaxId == null) throw new IllegalArgumentException("\"legalEntityTaxId\" is required but got null");
            if (legalEntityTaxId != null && legalEntityTaxId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for legalEntityTaxId. Length must be greater than or equal to 1.");
            }

        if (reciprocityType == null) throw new IllegalArgumentException("\"reciprocityType\" is required but got null");
        if (withholdingEffectiveStartDate == null) throw new IllegalArgumentException("\"withholdingEffectiveStartDate\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddByEmployeeIdRequestBuilder(legalEntityTaxId, reciprocityType, withholdingEffectiveStartDate, employeeId);
    }
    private okhttp3.Call getByEmployeeIdCall(String employeeId, List<Includes16> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/taxes"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(String employeeId, List<Includes16> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, include, continuationToken, _callback);

    }


    private ApiResponse<List<EmployeeTax>> getByEmployeeIdWithHttpInfo(String employeeId, List<Includes16> include, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, continuationToken, null);
        Type localVarReturnType = new TypeToken<List<EmployeeTax>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(String employeeId, List<Includes16> include, String continuationToken, final ApiCallback<List<EmployeeTax>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeTax>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final String employeeId;
        private List<Includes16> include;
        private String continuationToken;

        private GetByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, TaxCredits  Data Access required  TaxCredits &#x3D; View Employee Tax Credits (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder include(List<Includes16> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of employee taxes (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of employee taxes based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, include, continuationToken, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return List&lt;EmployeeTax&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of employee taxes based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeTax> execute() throws ApiException {
            ApiResponse<List<EmployeeTax>> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, include, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeTax&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of employee taxes based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeTax>> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, include, continuationToken);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of employee taxes based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeTax>> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, include, continuationToken, _callback);
        }
    }

    /**
     * Get Employee Taxes by EmployeeID
     * Data Access: View Employee Taxes
     * @param employeeId ID of the employee for whom you want to get the taxes (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of employee taxes based on EmployeeID provided </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call getFilingStatusByTaxCodeCall(String taxCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/taxes/filingStatus/{taxCode}"
            .replace("{" + "taxCode" + "}", localVarApiClient.escapeString(taxCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilingStatusByTaxCodeValidateBeforeCall(String taxCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxCode' is set
        if (taxCode == null) {
            throw new ApiException("Missing the required parameter 'taxCode' when calling getFilingStatusByTaxCode(Async)");
        }

        return getFilingStatusByTaxCodeCall(taxCode, _callback);

    }


    private ApiResponse<FilingStatus> getFilingStatusByTaxCodeWithHttpInfo(String taxCode) throws ApiException {
        okhttp3.Call localVarCall = getFilingStatusByTaxCodeValidateBeforeCall(taxCode, null);
        Type localVarReturnType = new TypeToken<FilingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFilingStatusByTaxCodeAsync(String taxCode, final ApiCallback<FilingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilingStatusByTaxCodeValidateBeforeCall(taxCode, _callback);
        Type localVarReturnType = new TypeToken<FilingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFilingStatusByTaxCodeRequestBuilder {
        private final String taxCode;

        private GetFilingStatusByTaxCodeRequestBuilder(String taxCode) {
            this.taxCode = taxCode;
        }

        /**
         * Build call for getFilingStatusByTaxCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFilingStatusByTaxCodeCall(taxCode, _callback);
        }


        /**
         * Execute getFilingStatusByTaxCode request
         * @return FilingStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public FilingStatus execute() throws ApiException {
            ApiResponse<FilingStatus> localVarResp = getFilingStatusByTaxCodeWithHttpInfo(taxCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFilingStatusByTaxCode request with HTTP info returned
         * @return ApiResponse&lt;FilingStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilingStatus> executeWithHttpInfo() throws ApiException {
            return getFilingStatusByTaxCodeWithHttpInfo(taxCode);
        }

        /**
         * Execute getFilingStatusByTaxCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilingStatus> _callback) throws ApiException {
            return getFilingStatusByTaxCodeAsync(taxCode, _callback);
        }
    }

    /**
     * Get Filing Status by Tax Code
     * Data Access: View Filing Status by Tax Code
     * @param taxCode You can retrieve a valid Tax Code via Get Legal Entity Taxes by Legal Entity ID (required)
     * @return GetFilingStatusByTaxCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetFilingStatusByTaxCodeRequestBuilder getFilingStatusByTaxCode(String taxCode) throws IllegalArgumentException {
        
            

        return new GetFilingStatusByTaxCodeRequestBuilder(taxCode);
    }
    private okhttp3.Call getTaxFieldsByTaxCodeCall(String taxCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/taxes/taxFields/{taxCode}"
            .replace("{" + "taxCode" + "}", localVarApiClient.escapeString(taxCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaxFieldsByTaxCodeValidateBeforeCall(String taxCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxCode' is set
        if (taxCode == null) {
            throw new ApiException("Missing the required parameter 'taxCode' when calling getTaxFieldsByTaxCode(Async)");
        }

        return getTaxFieldsByTaxCodeCall(taxCode, _callback);

    }


    private ApiResponse<GlobalTaxForm> getTaxFieldsByTaxCodeWithHttpInfo(String taxCode) throws ApiException {
        okhttp3.Call localVarCall = getTaxFieldsByTaxCodeValidateBeforeCall(taxCode, null);
        Type localVarReturnType = new TypeToken<GlobalTaxForm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTaxFieldsByTaxCodeAsync(String taxCode, final ApiCallback<GlobalTaxForm> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaxFieldsByTaxCodeValidateBeforeCall(taxCode, _callback);
        Type localVarReturnType = new TypeToken<GlobalTaxForm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTaxFieldsByTaxCodeRequestBuilder {
        private final String taxCode;

        private GetTaxFieldsByTaxCodeRequestBuilder(String taxCode) {
            this.taxCode = taxCode;
        }

        /**
         * Build call for getTaxFieldsByTaxCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTaxFieldsByTaxCodeCall(taxCode, _callback);
        }


        /**
         * Execute getTaxFieldsByTaxCode request
         * @return GlobalTaxForm
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public GlobalTaxForm execute() throws ApiException {
            ApiResponse<GlobalTaxForm> localVarResp = getTaxFieldsByTaxCodeWithHttpInfo(taxCode);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTaxFieldsByTaxCode request with HTTP info returned
         * @return ApiResponse&lt;GlobalTaxForm&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GlobalTaxForm> executeWithHttpInfo() throws ApiException {
            return getTaxFieldsByTaxCodeWithHttpInfo(taxCode);
        }

        /**
         * Execute getTaxFieldsByTaxCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GlobalTaxForm> _callback) throws ApiException {
            return getTaxFieldsByTaxCodeAsync(taxCode, _callback);
        }
    }

    /**
     * Get Tax Fields by Tax Code
     * * This endpoint will allow you to pass in a Tax Code and will return the fields that are expected to be passed for PUT/POST Employee Taxes * To get the Tax Codes available for your account to be used for this endpoint, use GET Legal Entity Taxes by Legal Entity ID  Data Access: Get Tax Fields By Tax Code
     * @param taxCode You can retrieve a Tax fields by Tax Codes (required)
     * @return GetTaxFieldsByTaxCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTaxFieldsByTaxCodeRequestBuilder getTaxFieldsByTaxCode(String taxCode) throws IllegalArgumentException {
        
            

        return new GetTaxFieldsByTaxCodeRequestBuilder(taxCode);
    }
    private okhttp3.Call updateByEmployeeIdCall(String employeeId, EmployeeTax3 employeeTax3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeTax3;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/taxes"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByEmployeeIdValidateBeforeCall(String employeeId, EmployeeTax3 employeeTax3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateByEmployeeId(Async)");
        }

        // verify the required parameter 'employeeTax3' is set
        if (employeeTax3 == null) {
            throw new ApiException("Missing the required parameter 'employeeTax3' when calling updateByEmployeeId(Async)");
        }

        return updateByEmployeeIdCall(employeeId, employeeTax3, _callback);

    }


    private ApiResponse<List<CreateOrUpdateResponse>> updateByEmployeeIdWithHttpInfo(String employeeId, EmployeeTax3 employeeTax3) throws ApiException {
        okhttp3.Call localVarCall = updateByEmployeeIdValidateBeforeCall(employeeId, employeeTax3, null);
        Type localVarReturnType = new TypeToken<List<CreateOrUpdateResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByEmployeeIdAsync(String employeeId, EmployeeTax3 employeeTax3, final ApiCallback<List<CreateOrUpdateResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByEmployeeIdValidateBeforeCall(employeeId, employeeTax3, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrUpdateResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByEmployeeIdRequestBuilder {
        private final String id;
        private final String legalEntityTaxId;
        private final String employeeId;
        private ReciprocityType reciprocityType;
        private FilingStatus2 filingStatus;
        private OffsetDateTime withholdingEffectiveStartDate;
        private OffsetDateTime blockDate;
        private String nonResidentAlien;
        private Boolean isProbationaryEmployee;
        private String occupationalCode;
        private String geographicCode;
        private String soCCode;
        private String seasonalCode;
        private String countyCode;
        private String spouseWork;
        private String dependentInsuranceEligible;
        private OffsetDateTime dependentInsuranceEligibleDate;
        private Integer applicableBirthyear;
        private Double amount;
        private Double percentage;
        private String ncCICode;
        private String psdCode;
        private Double psdRate;
        private Boolean onHold;
        private EmployeeExemptions exemptions;
        private EmployeeTaxCredit taxCredit;

        private UpdateByEmployeeIdRequestBuilder(String id, String legalEntityTaxId, String employeeId) {
            this.id = id;
            this.legalEntityTaxId = legalEntityTaxId;
            this.employeeId = employeeId;
        }

        /**
         * Set reciprocityType
         * @param reciprocityType  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder reciprocityType(ReciprocityType reciprocityType) {
            this.reciprocityType = reciprocityType;
            return this;
        }
        
        /**
         * Set filingStatus
         * @param filingStatus  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder filingStatus(FilingStatus2 filingStatus) {
            this.filingStatus = filingStatus;
            return this;
        }
        
        /**
         * Set withholdingEffectiveStartDate
         * @param withholdingEffectiveStartDate Effective start date of withholding (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder withholdingEffectiveStartDate(OffsetDateTime withholdingEffectiveStartDate) {
            this.withholdingEffectiveStartDate = withholdingEffectiveStartDate;
            return this;
        }
        
        /**
         * Set blockDate
         * @param blockDate Withholding block date (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder blockDate(OffsetDateTime blockDate) {
            this.blockDate = blockDate;
            return this;
        }
        
        /**
         * Set nonResidentAlien
         * @param nonResidentAlien Specifies whether an employee is NonResidentAlien (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder nonResidentAlien(String nonResidentAlien) {
            this.nonResidentAlien = nonResidentAlien;
            return this;
        }
        
        /**
         * Set isProbationaryEmployee
         * @param isProbationaryEmployee Specifies whether an employee is a probationary employee (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder isProbationaryEmployee(Boolean isProbationaryEmployee) {
            this.isProbationaryEmployee = isProbationaryEmployee;
            return this;
        }
        
        /**
         * Set occupationalCode
         * @param occupationalCode Occupational code (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder occupationalCode(String occupationalCode) {
            this.occupationalCode = occupationalCode;
            return this;
        }
        
        /**
         * Set geographicCode
         * @param geographicCode Geographic code Required only for UNEAK tax (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder geographicCode(String geographicCode) {
            this.geographicCode = geographicCode;
            return this;
        }
        
        /**
         * Set soCCode
         * @param soCCode Standard occupational classification Code (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder soCCode(String soCCode) {
            this.soCCode = soCCode;
            return this;
        }
        
        /**
         * Set seasonalCode
         * @param seasonalCode Seasonal Code  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder seasonalCode(String seasonalCode) {
            this.seasonalCode = seasonalCode;
            return this;
        }
        
        /**
         * Set countyCode
         * @param countyCode County Code (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder countyCode(String countyCode) {
            this.countyCode = countyCode;
            return this;
        }
        
        /**
         * Set spouseWork
         * @param spouseWork Specifies  whether an employee&#39;s spouse is employed (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder spouseWork(String spouseWork) {
            this.spouseWork = spouseWork;
            return this;
        }
        
        /**
         * Set dependentInsuranceEligible
         * @param dependentInsuranceEligible Dependent insurance eligibility status (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder dependentInsuranceEligible(String dependentInsuranceEligible) {
            this.dependentInsuranceEligible = dependentInsuranceEligible;
            return this;
        }
        
        /**
         * Set dependentInsuranceEligibleDate
         * @param dependentInsuranceEligibleDate Dependent insurance eligibility date (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder dependentInsuranceEligibleDate(OffsetDateTime dependentInsuranceEligibleDate) {
            this.dependentInsuranceEligibleDate = dependentInsuranceEligibleDate;
            return this;
        }
        
        /**
         * Set applicableBirthyear
         * @param applicableBirthyear Birth year (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder applicableBirthyear(Integer applicableBirthyear) {
            this.applicableBirthyear = applicableBirthyear;
            return this;
        }
        
        /**
         * Set amount
         * @param amount Fixed, recurring deduction dollar amount.              (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        

        /**
         * Set amount
         * @param amount Fixed, recurring deduction dollar amount.              (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder amount(Integer amount) {
            this.amount = amount.doubleValue();
            return this;
        }
        
        /**
         * Set percentage
         * @param percentage Percentage value used in tax calculation.  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder percentage(Double percentage) {
            this.percentage = percentage;
            return this;
        }
        

        /**
         * Set percentage
         * @param percentage Percentage value used in tax calculation.  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder percentage(Integer percentage) {
            this.percentage = percentage.doubleValue();
            return this;
        }
        
        /**
         * Set ncCICode
         * @param ncCICode National Council on Compensation Insurance (NCCI) Code  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder ncCICode(String ncCICode) {
            this.ncCICode = ncCICode;
            return this;
        }
        
        /**
         * Set psdCode
         * @param psdCode PA Residence PSD code- political subdivision code (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder psdCode(String psdCode) {
            this.psdCode = psdCode;
            return this;
        }
        
        /**
         * Set psdRate
         * @param psdRate PA Residence PSD rate (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder psdRate(Double psdRate) {
            this.psdRate = psdRate;
            return this;
        }
        

        /**
         * Set psdRate
         * @param psdRate PA Residence PSD rate (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder psdRate(Integer psdRate) {
            this.psdRate = psdRate.doubleValue();
            return this;
        }
        
        /**
         * Set onHold
         * @param onHold Whether employee tax should appear on paychecks.              (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder onHold(Boolean onHold) {
            this.onHold = onHold;
            return this;
        }
        
        /**
         * Set exemptions
         * @param exemptions  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder exemptions(EmployeeExemptions exemptions) {
            this.exemptions = exemptions;
            return this;
        }
        
        /**
         * Set taxCredit
         * @param taxCredit  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder taxCredit(EmployeeTaxCredit taxCredit) {
            this.taxCredit = taxCredit;
            return this;
        }
        
        /**
         * Build call for updateByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeTax3 employeeTax3 = buildBodyParams();
            return updateByEmployeeIdCall(employeeId, employeeTax3, _callback);
        }

        private EmployeeTax3 buildBodyParams() {
            EmployeeTax3 employeeTax3 = new EmployeeTax3();
            employeeTax3.id(this.id);
            employeeTax3.legalEntityTaxId(this.legalEntityTaxId);
            employeeTax3.reciprocityType(this.reciprocityType);
            employeeTax3.filingStatus(this.filingStatus);
            employeeTax3.withholdingEffectiveStartDate(this.withholdingEffectiveStartDate);
            employeeTax3.blockDate(this.blockDate);
            employeeTax3.nonResidentAlien(this.nonResidentAlien);
            employeeTax3.isProbationaryEmployee(this.isProbationaryEmployee);
            employeeTax3.occupationalCode(this.occupationalCode);
            employeeTax3.geographicCode(this.geographicCode);
            employeeTax3.soCCode(this.soCCode);
            employeeTax3.seasonalCode(this.seasonalCode);
            employeeTax3.countyCode(this.countyCode);
            employeeTax3.spouseWork(this.spouseWork);
            employeeTax3.dependentInsuranceEligible(this.dependentInsuranceEligible);
            employeeTax3.dependentInsuranceEligibleDate(this.dependentInsuranceEligibleDate);
            employeeTax3.applicableBirthyear(this.applicableBirthyear);
            employeeTax3.amount(this.amount);
            employeeTax3.percentage(this.percentage);
            employeeTax3.ncCICode(this.ncCICode);
            employeeTax3.psdCode(this.psdCode);
            employeeTax3.psdRate(this.psdRate);
            employeeTax3.onHold(this.onHold);
            employeeTax3.exemptions(this.exemptions);
            employeeTax3.taxCredit(this.taxCredit);
            return employeeTax3;
        }

        /**
         * Execute updateByEmployeeId request
         * @return List&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public List<CreateOrUpdateResponse> execute() throws ApiException {
            EmployeeTax3 employeeTax3 = buildBodyParams();
            ApiResponse<List<CreateOrUpdateResponse>> localVarResp = updateByEmployeeIdWithHttpInfo(employeeId, employeeTax3);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CreateOrUpdateResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CreateOrUpdateResponse>> executeWithHttpInfo() throws ApiException {
            EmployeeTax3 employeeTax3 = buildBodyParams();
            return updateByEmployeeIdWithHttpInfo(employeeId, employeeTax3);
        }

        /**
         * Execute updateByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CreateOrUpdateResponse>> _callback) throws ApiException {
            EmployeeTax3 employeeTax3 = buildBodyParams();
            return updateByEmployeeIdAsync(employeeId, employeeTax3, _callback);
        }
    }

    /**
     * Update Tax by EmployeeID
     * * Use GET Tax Fields by Tax Code to determine payload needed to complete this call  Data Access: Update Employee Tax
     * @param employeeId ID of an Employee for whom you want to update the tax (required)
     * @param employeeTax3 EmployeeTax object (required)
     * @return UpdateByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByEmployeeIdRequestBuilder updateByEmployeeId(String id, String legalEntityTaxId, String employeeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        if (legalEntityTaxId == null) throw new IllegalArgumentException("\"legalEntityTaxId\" is required but got null");
            if (legalEntityTaxId != null && legalEntityTaxId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for legalEntityTaxId. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateByEmployeeIdRequestBuilder(id, legalEntityTaxId, employeeId);
    }
}
