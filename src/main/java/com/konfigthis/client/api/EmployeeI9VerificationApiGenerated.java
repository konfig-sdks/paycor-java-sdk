/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.I9Verification;
import com.konfigthis.client.model.I9Verification2;
import com.konfigthis.client.model.Includes7;
import com.konfigthis.client.model.ListA;
import com.konfigthis.client.model.ListB;
import com.konfigthis.client.model.ListC;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.WorkEligibility;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeI9VerificationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeI9VerificationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeI9VerificationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByEmployeeIdCall(String employeeId, List<Includes7> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/I9Verification"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(String employeeId, List<Includes7> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, include, _callback);

    }


    private ApiResponse<I9Verification> getByEmployeeIdWithHttpInfo(String employeeId, List<Includes7> include) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, null);
        Type localVarReturnType = new TypeToken<I9Verification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(String employeeId, List<Includes7> include, final ApiCallback<I9Verification> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, _callback);
        Type localVarReturnType = new TypeToken<I9Verification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final String employeeId;
        private List<Includes7> include;

        private GetByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set include
         * @param include Options to include more data: documents (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder include(List<Includes7> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of employee I9 verification docs based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, include, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return I9Verification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of employee I9 verification docs based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public I9Verification execute() throws ApiException {
            ApiResponse<I9Verification> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, include);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;I9Verification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of employee I9 verification docs based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<I9Verification> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, include);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of employee I9 verification docs based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<I9Verification> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, include, _callback);
        }
    }

    /**
     * Get Employee I9 Verification by EmployeeID
     * Data Access: View I9 Verification
     * @param employeeId ID of the employee for whom you want to get the I9 information (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of employee I9 verification docs based on EmployeeID provided </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call updateByEmployeeIdI9VerificationCall(String employeeId, I9Verification2 i9Verification2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = i9Verification2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/I9Verification"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByEmployeeIdI9VerificationValidateBeforeCall(String employeeId, I9Verification2 i9Verification2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateByEmployeeIdI9Verification(Async)");
        }

        // verify the required parameter 'i9Verification2' is set
        if (i9Verification2 == null) {
            throw new ApiException("Missing the required parameter 'i9Verification2' when calling updateByEmployeeIdI9Verification(Async)");
        }

        return updateByEmployeeIdI9VerificationCall(employeeId, i9Verification2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateByEmployeeIdI9VerificationWithHttpInfo(String employeeId, I9Verification2 i9Verification2) throws ApiException {
        okhttp3.Call localVarCall = updateByEmployeeIdI9VerificationValidateBeforeCall(employeeId, i9Verification2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByEmployeeIdI9VerificationAsync(String employeeId, I9Verification2 i9Verification2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByEmployeeIdI9VerificationValidateBeforeCall(employeeId, i9Verification2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByEmployeeIdI9VerificationRequestBuilder {
        private final String employeeId;
        private String citizenOfCountry;
        private WorkEligibility workEligibility;
        private String workVisaType;
        private OffsetDateTime workVisaExpirationDate;
        private String alienAdmissionNumber;
        private OffsetDateTime alienAdmissionExpirationDate;
        private ListA listA;
        private ListB listB;
        private ListC listC;
        private String foreignPassportNumber;
        private String countryOfIssuance;
        private String additionalInformation;

        private UpdateByEmployeeIdI9VerificationRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set citizenOfCountry
         * @param citizenOfCountry Country of which the employee is citizen of.              (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder citizenOfCountry(String citizenOfCountry) {
            this.citizenOfCountry = citizenOfCountry;
            return this;
        }
        
        /**
         * Set workEligibility
         * @param workEligibility  (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder workEligibility(WorkEligibility workEligibility) {
            this.workEligibility = workEligibility;
            return this;
        }
        
        /**
         * Set workVisaType
         * @param workVisaType Work visa type of the employee. Maximum characters should be 20.              (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder workVisaType(String workVisaType) {
            this.workVisaType = workVisaType;
            return this;
        }
        
        /**
         * Set workVisaExpirationDate
         * @param workVisaExpirationDate Expiration date of the work visa.              (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder workVisaExpirationDate(OffsetDateTime workVisaExpirationDate) {
            this.workVisaExpirationDate = workVisaExpirationDate;
            return this;
        }
        
        /**
         * Set alienAdmissionNumber
         * @param alienAdmissionNumber Alien admission number of the employee.              (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder alienAdmissionNumber(String alienAdmissionNumber) {
            this.alienAdmissionNumber = alienAdmissionNumber;
            return this;
        }
        
        /**
         * Set alienAdmissionExpirationDate
         * @param alienAdmissionExpirationDate Expiration date of the alien admission.              (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder alienAdmissionExpirationDate(OffsetDateTime alienAdmissionExpirationDate) {
            this.alienAdmissionExpirationDate = alienAdmissionExpirationDate;
            return this;
        }
        
        /**
         * Set listA
         * @param listA  (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder listA(ListA listA) {
            this.listA = listA;
            return this;
        }
        
        /**
         * Set listB
         * @param listB  (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder listB(ListB listB) {
            this.listB = listB;
            return this;
        }
        
        /**
         * Set listC
         * @param listC  (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder listC(ListC listC) {
            this.listC = listC;
            return this;
        }
        
        /**
         * Set foreignPassportNumber
         * @param foreignPassportNumber Foreign passport number of the employee.              (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder foreignPassportNumber(String foreignPassportNumber) {
            this.foreignPassportNumber = foreignPassportNumber;
            return this;
        }
        
        /**
         * Set countryOfIssuance
         * @param countryOfIssuance Country of issuance of the foreign passport. Accepted values ISO-3166 alpha2 or alpha3 codes for countries.              (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder countryOfIssuance(String countryOfIssuance) {
            this.countryOfIssuance = countryOfIssuance;
            return this;
        }
        
        /**
         * Set additionalInformation
         * @param additionalInformation Additional information for the I9 verification. Must be under 768 characters.              (optional)
         * @return UpdateByEmployeeIdI9VerificationRequestBuilder
         */
        public UpdateByEmployeeIdI9VerificationRequestBuilder additionalInformation(String additionalInformation) {
            this.additionalInformation = additionalInformation;
            return this;
        }
        
        /**
         * Build call for updateByEmployeeIdI9Verification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            I9Verification2 i9Verification2 = buildBodyParams();
            return updateByEmployeeIdI9VerificationCall(employeeId, i9Verification2, _callback);
        }

        private I9Verification2 buildBodyParams() {
            I9Verification2 i9Verification2 = new I9Verification2();
            i9Verification2.citizenOfCountry(this.citizenOfCountry);
            i9Verification2.workEligibility(this.workEligibility);
            i9Verification2.workVisaType(this.workVisaType);
            i9Verification2.workVisaExpirationDate(this.workVisaExpirationDate);
            i9Verification2.alienAdmissionNumber(this.alienAdmissionNumber);
            i9Verification2.alienAdmissionExpirationDate(this.alienAdmissionExpirationDate);
            i9Verification2.listA(this.listA);
            i9Verification2.listB(this.listB);
            i9Verification2.listC(this.listC);
            i9Verification2.foreignPassportNumber(this.foreignPassportNumber);
            i9Verification2.countryOfIssuance(this.countryOfIssuance);
            i9Verification2.additionalInformation(this.additionalInformation);
            return i9Verification2;
        }

        /**
         * Execute updateByEmployeeIdI9Verification request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            I9Verification2 i9Verification2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateByEmployeeIdI9VerificationWithHttpInfo(employeeId, i9Verification2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByEmployeeIdI9Verification request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            I9Verification2 i9Verification2 = buildBodyParams();
            return updateByEmployeeIdI9VerificationWithHttpInfo(employeeId, i9Verification2);
        }

        /**
         * Execute updateByEmployeeIdI9Verification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            I9Verification2 i9Verification2 = buildBodyParams();
            return updateByEmployeeIdI9VerificationAsync(employeeId, i9Verification2, _callback);
        }
    }

    /**
     * Update I9 Verification by EmployeeID
     * Data Access: Edit I9 Verification
     * @param employeeId ID of an Employee for whom you want to update the I9 Verification (required)
     * @param i9Verification2 I9 Verification object (required)
     * @return UpdateByEmployeeIdI9VerificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByEmployeeIdI9VerificationRequestBuilder updateByEmployeeIdI9Verification(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateByEmployeeIdI9VerificationRequestBuilder(employeeId);
    }
}
