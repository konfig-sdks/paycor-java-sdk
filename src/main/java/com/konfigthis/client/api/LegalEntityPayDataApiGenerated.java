/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedResultOfLegalEntityPayData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LegalEntityPayDataApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LegalEntityPayDataApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LegalEntityPayDataApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPayDatesCall(Integer legalEntityId, String employeeId, OffsetDateTime fromCheckDate, OffsetDateTime toCheckDate, OffsetDateTime processDate, String plannerId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/paydata"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (fromCheckDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromCheckDate", fromCheckDate));
        }

        if (toCheckDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toCheckDate", toCheckDate));
        }

        if (processDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processDate", processDate));
        }

        if (plannerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plannerId", plannerId));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayDatesValidateBeforeCall(Integer legalEntityId, String employeeId, OffsetDateTime fromCheckDate, OffsetDateTime toCheckDate, OffsetDateTime processDate, String plannerId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getPayDates(Async)");
        }

        return getPayDatesCall(legalEntityId, employeeId, fromCheckDate, toCheckDate, processDate, plannerId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfLegalEntityPayData> getPayDatesWithHttpInfo(Integer legalEntityId, String employeeId, OffsetDateTime fromCheckDate, OffsetDateTime toCheckDate, OffsetDateTime processDate, String plannerId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getPayDatesValidateBeforeCall(legalEntityId, employeeId, fromCheckDate, toCheckDate, processDate, plannerId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfLegalEntityPayData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayDatesAsync(Integer legalEntityId, String employeeId, OffsetDateTime fromCheckDate, OffsetDateTime toCheckDate, OffsetDateTime processDate, String plannerId, String continuationToken, final ApiCallback<PagedResultOfLegalEntityPayData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayDatesValidateBeforeCall(legalEntityId, employeeId, fromCheckDate, toCheckDate, processDate, plannerId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfLegalEntityPayData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayDatesRequestBuilder {
        private final Integer legalEntityId;
        private String employeeId;
        private OffsetDateTime fromCheckDate;
        private OffsetDateTime toCheckDate;
        private OffsetDateTime processDate;
        private String plannerId;
        private String continuationToken;

        private GetPayDatesRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set employeeId
         * @param employeeId ID of an Employee, if you want to filter to paydata from a specific Employee (optional)
         * @return GetPayDatesRequestBuilder
         */
        public GetPayDatesRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set fromCheckDate
         * @param fromCheckDate Filter Option 1: Date Range, From Check Date of Payrun (optional)
         * @return GetPayDatesRequestBuilder
         */
        public GetPayDatesRequestBuilder fromCheckDate(OffsetDateTime fromCheckDate) {
            this.fromCheckDate = fromCheckDate;
            return this;
        }
        
        /**
         * Set toCheckDate
         * @param toCheckDate Filter Option 1: Date Range, To Check Date of Payrun (optional)
         * @return GetPayDatesRequestBuilder
         */
        public GetPayDatesRequestBuilder toCheckDate(OffsetDateTime toCheckDate) {
            this.toCheckDate = toCheckDate;
            return this;
        }
        
        /**
         * Set processDate
         * @param processDate Filter Option 2: Process Date of Payrun (optional)
         * @return GetPayDatesRequestBuilder
         */
        public GetPayDatesRequestBuilder processDate(OffsetDateTime processDate) {
            this.processDate = processDate;
            return this;
        }
        
        /**
         * Set plannerId
         * @param plannerId Filter Option 3: ID of the Planner for which you want to get the Pay Data. (optional)
         * @return GetPayDatesRequestBuilder
         */
        public GetPayDatesRequestBuilder plannerId(String plannerId) {
            this.plannerId = plannerId;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of Legal Entity Pay Data (optional)
         * @return GetPayDatesRequestBuilder
         */
        public GetPayDatesRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getPayDates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Legal Entity Pay Data based on Legal Entity ID, EmployeeID, and filter provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayDatesCall(legalEntityId, employeeId, fromCheckDate, toCheckDate, processDate, plannerId, continuationToken, _callback);
        }


        /**
         * Execute getPayDates request
         * @return PagedResultOfLegalEntityPayData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Legal Entity Pay Data based on Legal Entity ID, EmployeeID, and filter provided. </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfLegalEntityPayData execute() throws ApiException {
            ApiResponse<PagedResultOfLegalEntityPayData> localVarResp = getPayDatesWithHttpInfo(legalEntityId, employeeId, fromCheckDate, toCheckDate, processDate, plannerId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayDates request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfLegalEntityPayData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Legal Entity Pay Data based on Legal Entity ID, EmployeeID, and filter provided. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfLegalEntityPayData> executeWithHttpInfo() throws ApiException {
            return getPayDatesWithHttpInfo(legalEntityId, employeeId, fromCheckDate, toCheckDate, processDate, plannerId, continuationToken);
        }

        /**
         * Execute getPayDates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Legal Entity Pay Data based on Legal Entity ID, EmployeeID, and filter provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfLegalEntityPayData> _callback) throws ApiException {
            return getPayDatesAsync(legalEntityId, employeeId, fromCheckDate, toCheckDate, processDate, plannerId, continuationToken, _callback);
        }
    }

    /**
     * Get Legal Entity Pay Data by Legal Entity ID
     * This endpoint returns the dates that particular employees were actually paid. * You can retrieve all employees by not passing EmployeeId, or you can pass EmployeeId to filter. * The returned values (Check Date or Process Date) can be used as an input for GET Employee Pay Stubs. * Only dates from provided fromCheckDate and toCheckDate are used. * Requires exactly one filtering parameter to be passed in. Choose *one* of these three:   * Check Date range: parameters fromCheckDate and toCheckDate   * Process Date: the single date the payrun was processed.   * PlannerID: You can retrieve your Planner ID by using the Legal Entity Payroll Processing Data endpoint. * Returns one object per pay date, even if there were multiple paychecks on that same date. * Does include Additional Payruns, which don&#39;t have to follow the schedule and can be used for bonuses.  Data Access: View Paydata Information
     * @param legalEntityId ID of the Legal Entity for which you want to get the Pay Data (required)
     * @return GetPayDatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Legal Entity Pay Data based on Legal Entity ID, EmployeeID, and filter provided. </td><td>  -  </td></tr>
     </table>
     */
    public GetPayDatesRequestBuilder getPayDates(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new GetPayDatesRequestBuilder(legalEntityId);
    }
}
