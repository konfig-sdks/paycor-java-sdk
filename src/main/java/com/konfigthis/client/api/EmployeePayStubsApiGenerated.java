/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeePayStubHistory;
import com.konfigthis.client.model.Includes10;
import com.konfigthis.client.model.Includes11;
import com.konfigthis.client.model.Includes12;
import com.konfigthis.client.model.Includes9;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedResultOfEmployeePayStubHistory;
import com.konfigthis.client.model.PagedResultOfPayStub;
import com.konfigthis.client.model.PagedResultOfPayStub2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeePayStubsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeePayStubsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeePayStubsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByEmployeeIdCall(String employeeId, OffsetDateTime checkDate, OffsetDateTime processDate, String plannerId, List<Includes9> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/paystubs"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkDate", checkDate));
        }

        if (processDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processDate", processDate));
        }

        if (plannerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plannerId", plannerId));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(String employeeId, OffsetDateTime checkDate, OffsetDateTime processDate, String plannerId, List<Includes9> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, checkDate, processDate, plannerId, include, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfPayStub> getByEmployeeIdWithHttpInfo(String employeeId, OffsetDateTime checkDate, OffsetDateTime processDate, String plannerId, List<Includes9> include, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, checkDate, processDate, plannerId, include, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfPayStub>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(String employeeId, OffsetDateTime checkDate, OffsetDateTime processDate, String plannerId, List<Includes9> include, String continuationToken, final ApiCallback<PagedResultOfPayStub> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, checkDate, processDate, plannerId, include, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfPayStub>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final String employeeId;
        private OffsetDateTime checkDate;
        private OffsetDateTime processDate;
        private String plannerId;
        private List<Includes9> include;
        private String continuationToken;

        private GetByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set checkDate
         * @param checkDate Check Date of Pay Stubs - required (unless processDate supplied) (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder checkDate(OffsetDateTime checkDate) {
            this.checkDate = checkDate;
            return this;
        }
        
        /**
         * Set processDate
         * @param processDate Process Date of Pay Stubs - required (unless checkDate supplied) (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder processDate(OffsetDateTime processDate) {
            this.processDate = processDate;
            return this;
        }
        
        /**
         * Set plannerId
         * @param plannerId ID of the Planner for which you want to get the Pay Stubs. (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder plannerId(String plannerId) {
            this.plannerId = plannerId;
            return this;
        }
        
        /**
         * Set include
         * @param include Options to include more data: All, GrossAmount, NetAmount, Earnings, Taxes, Deductions  Data Access required  GrossAmount &#x3D; View Paystub Gross Pay Information  NetAmount &#x3D; View Paystub Net Pay Information  Earnings &#x3D; View Paystub Earning Information  Taxes &#x3D; View Paystub Tax Information  Deductions &#x3D; View Paystub Deduction Information (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder include(List<Includes9> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of Employee Pay Stubs (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, checkDate, processDate, plannerId, include, continuationToken, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return PagedResultOfPayStub
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfPayStub execute() throws ApiException {
            ApiResponse<PagedResultOfPayStub> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, checkDate, processDate, plannerId, include, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfPayStub&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfPayStub> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, checkDate, processDate, plannerId, include, continuationToken);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfPayStub> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, checkDate, processDate, plannerId, include, continuationToken, _callback);
        }
    }

    /**
     * Get Employee Pay Stubs by EmployeeID
     * Note: Either CheckDate, ProcessDate or PlannerId is required as a parameter. You can find a list of valid dates by calling &#39;GET Legal Entity Pay Data by Legal Entity ID&#39;.  Data Access: View Paystub Information
     * @param employeeId ID of an Employee for whom you want to get the Pay Stubs (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call getByLegalEntityCall(Integer legalEntityId, OffsetDateTime checkDate, OffsetDateTime processDate, String plannerId, List<Includes10> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/paystubs"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkDate", checkDate));
        }

        if (processDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("processDate", processDate));
        }

        if (plannerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plannerId", plannerId));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByLegalEntityValidateBeforeCall(Integer legalEntityId, OffsetDateTime checkDate, OffsetDateTime processDate, String plannerId, List<Includes10> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getByLegalEntity(Async)");
        }

        return getByLegalEntityCall(legalEntityId, checkDate, processDate, plannerId, include, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfPayStub2> getByLegalEntityWithHttpInfo(Integer legalEntityId, OffsetDateTime checkDate, OffsetDateTime processDate, String plannerId, List<Includes10> include, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getByLegalEntityValidateBeforeCall(legalEntityId, checkDate, processDate, plannerId, include, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfPayStub2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByLegalEntityAsync(Integer legalEntityId, OffsetDateTime checkDate, OffsetDateTime processDate, String plannerId, List<Includes10> include, String continuationToken, final ApiCallback<PagedResultOfPayStub2> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByLegalEntityValidateBeforeCall(legalEntityId, checkDate, processDate, plannerId, include, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfPayStub2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByLegalEntityRequestBuilder {
        private final Integer legalEntityId;
        private OffsetDateTime checkDate;
        private OffsetDateTime processDate;
        private String plannerId;
        private List<Includes10> include;
        private String continuationToken;

        private GetByLegalEntityRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set checkDate
         * @param checkDate Check Date of Pay Stubs - required (unless processDate supplied) (optional)
         * @return GetByLegalEntityRequestBuilder
         */
        public GetByLegalEntityRequestBuilder checkDate(OffsetDateTime checkDate) {
            this.checkDate = checkDate;
            return this;
        }
        
        /**
         * Set processDate
         * @param processDate Process Date of Pay Stubs - required (unless checkDate supplied) (optional)
         * @return GetByLegalEntityRequestBuilder
         */
        public GetByLegalEntityRequestBuilder processDate(OffsetDateTime processDate) {
            this.processDate = processDate;
            return this;
        }
        
        /**
         * Set plannerId
         * @param plannerId ID of the Planner for which you want to get the Pay Stubs. (optional)
         * @return GetByLegalEntityRequestBuilder
         */
        public GetByLegalEntityRequestBuilder plannerId(String plannerId) {
            this.plannerId = plannerId;
            return this;
        }
        
        /**
         * Set include
         * @param include Options to include more data: All, GrossAmount, NetAmount, Earnings, Taxes, Deductions  Data Access required  GrossAmount &#x3D; View Paystub Gross Pay Information  NetAmount &#x3D; View Paystub Net Pay Information  Earnings &#x3D; View Paystub Earning Information  Taxes &#x3D; View Paystub Tax Information  Deductions &#x3D; View Paystub Deduction Information (optional)
         * @return GetByLegalEntityRequestBuilder
         */
        public GetByLegalEntityRequestBuilder include(List<Includes10> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of Employee Pay Stubs (optional)
         * @return GetByLegalEntityRequestBuilder
         */
        public GetByLegalEntityRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getByLegalEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByLegalEntityCall(legalEntityId, checkDate, processDate, plannerId, include, continuationToken, _callback);
        }


        /**
         * Execute getByLegalEntity request
         * @return PagedResultOfPayStub2
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfPayStub2 execute() throws ApiException {
            ApiResponse<PagedResultOfPayStub2> localVarResp = getByLegalEntityWithHttpInfo(legalEntityId, checkDate, processDate, plannerId, include, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByLegalEntity request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfPayStub2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfPayStub2> executeWithHttpInfo() throws ApiException {
            return getByLegalEntityWithHttpInfo(legalEntityId, checkDate, processDate, plannerId, include, continuationToken);
        }

        /**
         * Execute getByLegalEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfPayStub2> _callback) throws ApiException {
            return getByLegalEntityAsync(legalEntityId, checkDate, processDate, plannerId, include, continuationToken, _callback);
        }
    }

    /**
     * Get Employee Pay Stubs by Legal Entity ID
     * Note: Either CheckDate, ProcessDate or PlannerId is required as a parameter.  Data Access: View Paystub Information by Legal Entity Id
     * @param legalEntityId ID of a Legal entity for which you want to get the Pay Stubs (required)
     * @return GetByLegalEntityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
     </table>
     */
    public GetByLegalEntityRequestBuilder getByLegalEntity(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new GetByLegalEntityRequestBuilder(legalEntityId);
    }
    private okhttp3.Call getYtdByEmployeeIdCall(String employeeId, OffsetDateTime toCheckDate, List<Includes11> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/paystubsytd"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (toCheckDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toCheckDate", toCheckDate));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getYtdByEmployeeIdValidateBeforeCall(String employeeId, OffsetDateTime toCheckDate, List<Includes11> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getYtdByEmployeeId(Async)");
        }

        // verify the required parameter 'toCheckDate' is set
        if (toCheckDate == null) {
            throw new ApiException("Missing the required parameter 'toCheckDate' when calling getYtdByEmployeeId(Async)");
        }

        return getYtdByEmployeeIdCall(employeeId, toCheckDate, include, _callback);

    }


    private ApiResponse<EmployeePayStubHistory> getYtdByEmployeeIdWithHttpInfo(String employeeId, OffsetDateTime toCheckDate, List<Includes11> include) throws ApiException {
        okhttp3.Call localVarCall = getYtdByEmployeeIdValidateBeforeCall(employeeId, toCheckDate, include, null);
        Type localVarReturnType = new TypeToken<EmployeePayStubHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getYtdByEmployeeIdAsync(String employeeId, OffsetDateTime toCheckDate, List<Includes11> include, final ApiCallback<EmployeePayStubHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getYtdByEmployeeIdValidateBeforeCall(employeeId, toCheckDate, include, _callback);
        Type localVarReturnType = new TypeToken<EmployeePayStubHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetYtdByEmployeeIdRequestBuilder {
        private final String employeeId;
        private final OffsetDateTime toCheckDate;
        private List<Includes11> include;

        private GetYtdByEmployeeIdRequestBuilder(String employeeId, OffsetDateTime toCheckDate) {
            this.employeeId = employeeId;
            this.toCheckDate = toCheckDate;
        }

        /**
         * Set include
         * @param include Options to include more data: All, Earnings, Taxes, Deductions  Data Access required  Earnings &#x3D; View Paystub Earning Information YTD  Taxes &#x3D; View Paystub Tax Information YTD  Deductions &#x3D; View Paystub Deduction Information YTD (optional)
         * @return GetYtdByEmployeeIdRequestBuilder
         */
        public GetYtdByEmployeeIdRequestBuilder include(List<Includes11> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Build call for getYtdByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getYtdByEmployeeIdCall(employeeId, toCheckDate, include, _callback);
        }


        /**
         * Execute getYtdByEmployeeId request
         * @return EmployeePayStubHistory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public EmployeePayStubHistory execute() throws ApiException {
            ApiResponse<EmployeePayStubHistory> localVarResp = getYtdByEmployeeIdWithHttpInfo(employeeId, toCheckDate, include);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getYtdByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;EmployeePayStubHistory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeePayStubHistory> executeWithHttpInfo() throws ApiException {
            return getYtdByEmployeeIdWithHttpInfo(employeeId, toCheckDate, include);
        }

        /**
         * Execute getYtdByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeePayStubHistory> _callback) throws ApiException {
            return getYtdByEmployeeIdAsync(employeeId, toCheckDate, include, _callback);
        }
    }

    /**
     * Get Employee Pay Stubs YTD by EmployeeID
     * * To Check Date is required parameter.   * To get a list of check dates, you can use the GET Legal Entity Pay data endpoint.  Data Access: View Paystub Information YTD
     * @param employeeId ID of an Employee for whom you want to get the Pay Stubs (required)
     * @param toCheckDate Check Date of latest Pay Stub for YTD data.  (required)
     * @return GetYtdByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on EmployeeID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
     </table>
     */
    public GetYtdByEmployeeIdRequestBuilder getYtdByEmployeeId(String employeeId, OffsetDateTime toCheckDate) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (toCheckDate == null) throw new IllegalArgumentException("\"toCheckDate\" is required but got null");
        return new GetYtdByEmployeeIdRequestBuilder(employeeId, toCheckDate);
    }
    private okhttp3.Call getYtdByLegalEntityCall(Integer legalEntityId, OffsetDateTime toCheckDate, List<Includes12> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/paystubsytd"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (toCheckDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toCheckDate", toCheckDate));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getYtdByLegalEntityValidateBeforeCall(Integer legalEntityId, OffsetDateTime toCheckDate, List<Includes12> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getYtdByLegalEntity(Async)");
        }

        // verify the required parameter 'toCheckDate' is set
        if (toCheckDate == null) {
            throw new ApiException("Missing the required parameter 'toCheckDate' when calling getYtdByLegalEntity(Async)");
        }

        return getYtdByLegalEntityCall(legalEntityId, toCheckDate, include, _callback);

    }


    private ApiResponse<PagedResultOfEmployeePayStubHistory> getYtdByLegalEntityWithHttpInfo(Integer legalEntityId, OffsetDateTime toCheckDate, List<Includes12> include) throws ApiException {
        okhttp3.Call localVarCall = getYtdByLegalEntityValidateBeforeCall(legalEntityId, toCheckDate, include, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeePayStubHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getYtdByLegalEntityAsync(Integer legalEntityId, OffsetDateTime toCheckDate, List<Includes12> include, final ApiCallback<PagedResultOfEmployeePayStubHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getYtdByLegalEntityValidateBeforeCall(legalEntityId, toCheckDate, include, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeePayStubHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetYtdByLegalEntityRequestBuilder {
        private final Integer legalEntityId;
        private final OffsetDateTime toCheckDate;
        private List<Includes12> include;

        private GetYtdByLegalEntityRequestBuilder(Integer legalEntityId, OffsetDateTime toCheckDate) {
            this.legalEntityId = legalEntityId;
            this.toCheckDate = toCheckDate;
        }

        /**
         * Set include
         * @param include Options to include more data: All, Earnings, Taxes, Deductions  Data Access required  Earnings &#x3D; View Paystub Earning Information YTD By Legal Entity  Taxes &#x3D; View Paystub Tax Information YTD By Legal Entity  Deductions &#x3D; View Paystub Deduction Information YTD By Legal Entity (optional)
         * @return GetYtdByLegalEntityRequestBuilder
         */
        public GetYtdByLegalEntityRequestBuilder include(List<Includes12> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Build call for getYtdByLegalEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getYtdByLegalEntityCall(legalEntityId, toCheckDate, include, _callback);
        }


        /**
         * Execute getYtdByLegalEntity request
         * @return PagedResultOfEmployeePayStubHistory
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeePayStubHistory execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeePayStubHistory> localVarResp = getYtdByLegalEntityWithHttpInfo(legalEntityId, toCheckDate, include);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getYtdByLegalEntity request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeePayStubHistory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeePayStubHistory> executeWithHttpInfo() throws ApiException {
            return getYtdByLegalEntityWithHttpInfo(legalEntityId, toCheckDate, include);
        }

        /**
         * Execute getYtdByLegalEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeePayStubHistory> _callback) throws ApiException {
            return getYtdByLegalEntityAsync(legalEntityId, toCheckDate, include, _callback);
        }
    }

    /**
     * Get Employee Pay Stubs YTD by Legal entity ID
     * * To Check Date is required parameter.   * To get a list of check dates, you can use the GET Legal Entity Pay data endpoint.  Data Access: View Paystub Information YTD By Legal Entity
     * @param legalEntityId ID of a Legal entity for which you want to get the Pay Stubs (required)
     * @param toCheckDate Check Date of latest Pay Stub for YTD data.  (required)
     * @return GetYtdByLegalEntityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Employee Pay Stubs based on Legal Entity ID and date provided, with properties populated based on Include parameter </td><td>  -  </td></tr>
     </table>
     */
    public GetYtdByLegalEntityRequestBuilder getYtdByLegalEntity(Integer legalEntityId, OffsetDateTime toCheckDate) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        if (toCheckDate == null) throw new IllegalArgumentException("\"toCheckDate\" is required but got null");
        return new GetYtdByLegalEntityRequestBuilder(legalEntityId, toCheckDate);
    }
}
