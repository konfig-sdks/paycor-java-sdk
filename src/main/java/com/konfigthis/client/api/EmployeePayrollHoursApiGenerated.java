/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeTimeCard2;
import com.konfigthis.client.model.ImportEmployee;
import com.konfigthis.client.model.ImportPayrollHours;
import com.konfigthis.client.model.TimeCardData;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeePayrollHoursApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeePayrollHoursApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeePayrollHoursApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addHoursAndEarningsToPaygridCall(Integer legalEntityId, ImportPayrollHours importPayrollHours, Boolean replaceData, Boolean appendData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = importPayrollHours;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/payrollhours"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replaceData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replaceData", replaceData));
        }

        if (appendData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("appendData", appendData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addHoursAndEarningsToPaygridValidateBeforeCall(Integer legalEntityId, ImportPayrollHours importPayrollHours, Boolean replaceData, Boolean appendData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling addHoursAndEarningsToPaygrid(Async)");
        }

        // verify the required parameter 'importPayrollHours' is set
        if (importPayrollHours == null) {
            throw new ApiException("Missing the required parameter 'importPayrollHours' when calling addHoursAndEarningsToPaygrid(Async)");
        }

        return addHoursAndEarningsToPaygridCall(legalEntityId, importPayrollHours, replaceData, appendData, _callback);

    }


    private ApiResponse<Object> addHoursAndEarningsToPaygridWithHttpInfo(Integer legalEntityId, ImportPayrollHours importPayrollHours, Boolean replaceData, Boolean appendData) throws ApiException {
        okhttp3.Call localVarCall = addHoursAndEarningsToPaygridValidateBeforeCall(legalEntityId, importPayrollHours, replaceData, appendData, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addHoursAndEarningsToPaygridAsync(Integer legalEntityId, ImportPayrollHours importPayrollHours, Boolean replaceData, Boolean appendData, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addHoursAndEarningsToPaygridValidateBeforeCall(legalEntityId, importPayrollHours, replaceData, appendData, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddHoursAndEarningsToPaygridRequestBuilder {
        private final String integrationVendor;
        private final String processId;
        private final List<ImportEmployee> importEmployees;
        private final Integer legalEntityId;
        private Boolean replaceData;
        private Boolean appendData;

        private AddHoursAndEarningsToPaygridRequestBuilder(String integrationVendor, String processId, List<ImportEmployee> importEmployees, Integer legalEntityId) {
            this.integrationVendor = integrationVendor;
            this.processId = processId;
            this.importEmployees = importEmployees;
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set replaceData
         * @param replaceData If \&quot;True\&quot; is passed for this query parameter and a matching ProcessID is passed, then the system will fully replace the entire record that was previously added. (optional)
         * @return AddHoursAndEarningsToPaygridRequestBuilder
         */
        public AddHoursAndEarningsToPaygridRequestBuilder replaceData(Boolean replaceData) {
            this.replaceData = replaceData;
            return this;
        }
        
        /**
         * Set appendData
         * @param appendData If \&quot;True\&quot; is passed for this query parameter, then the system will NOT replace any record that was previously added. (optional)
         * @return AddHoursAndEarningsToPaygridRequestBuilder
         */
        public AddHoursAndEarningsToPaygridRequestBuilder appendData(Boolean appendData) {
            this.appendData = appendData;
            return this;
        }
        
        /**
         * Build call for addHoursAndEarningsToPaygrid
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ImportPayrollHours importPayrollHours = buildBodyParams();
            return addHoursAndEarningsToPaygridCall(legalEntityId, importPayrollHours, replaceData, appendData, _callback);
        }

        private ImportPayrollHours buildBodyParams() {
            ImportPayrollHours importPayrollHours = new ImportPayrollHours();
            importPayrollHours.integrationVendor(this.integrationVendor);
            importPayrollHours.processId(this.processId);
            importPayrollHours.importEmployees(this.importEmployees);
            return importPayrollHours;
        }

        /**
         * Execute addHoursAndEarningsToPaygrid request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ImportPayrollHours importPayrollHours = buildBodyParams();
            ApiResponse<Object> localVarResp = addHoursAndEarningsToPaygridWithHttpInfo(legalEntityId, importPayrollHours, replaceData, appendData);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addHoursAndEarningsToPaygrid request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ImportPayrollHours importPayrollHours = buildBodyParams();
            return addHoursAndEarningsToPaygridWithHttpInfo(legalEntityId, importPayrollHours, replaceData, appendData);
        }

        /**
         * Execute addHoursAndEarningsToPaygrid request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ImportPayrollHours importPayrollHours = buildBodyParams();
            return addHoursAndEarningsToPaygridAsync(legalEntityId, importPayrollHours, replaceData, appendData, _callback);
        }
    }

    /**
     * Add Employee Hours And Earnings To Paygrid
     * Required parameters in body are: IntegrationVendor, ProcessId, LegalEntityId, EmployeeNumber, DepartmentCode, EarningCode, BusinessStartDate  Data Access: Import Employee Hours and Earnings to Paygrid
     * @param legalEntityId ID of the Legal Entity for which you want to set employee hours and earnings (required)
     * @param importPayrollHours  (required)
     * @return AddHoursAndEarningsToPaygridRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddHoursAndEarningsToPaygridRequestBuilder addHoursAndEarningsToPaygrid(String integrationVendor, String processId, List<ImportEmployee> importEmployees, Integer legalEntityId) throws IllegalArgumentException {
        if (integrationVendor == null) throw new IllegalArgumentException("\"integrationVendor\" is required but got null");
            if (integrationVendor != null && integrationVendor.length() < 1) {
              throw new IllegalArgumentException("Invalid value for integrationVendor. Length must be greater than or equal to 1.");
            }

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            if (processId != null && processId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for processId. Length must be greater than or equal to 1.");
            }

        if (importEmployees == null) throw new IllegalArgumentException("\"importEmployees\" is required but got null");
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new AddHoursAndEarningsToPaygridRequestBuilder(integrationVendor, processId, importEmployees, legalEntityId);
    }
    private okhttp3.Call importToEmployeeCall(String employeeId, EmployeeTimeCard2 employeeTimeCard2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeTimeCard2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/payrollhours"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importToEmployeeValidateBeforeCall(String employeeId, EmployeeTimeCard2 employeeTimeCard2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling importToEmployee(Async)");
        }

        // verify the required parameter 'employeeTimeCard2' is set
        if (employeeTimeCard2 == null) {
            throw new ApiException("Missing the required parameter 'employeeTimeCard2' when calling importToEmployee(Async)");
        }

        return importToEmployeeCall(employeeId, employeeTimeCard2, _callback);

    }


    private ApiResponse<Object> importToEmployeeWithHttpInfo(String employeeId, EmployeeTimeCard2 employeeTimeCard2) throws ApiException {
        okhttp3.Call localVarCall = importToEmployeeValidateBeforeCall(employeeId, employeeTimeCard2, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importToEmployeeAsync(String employeeId, EmployeeTimeCard2 employeeTimeCard2, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = importToEmployeeValidateBeforeCall(employeeId, employeeTimeCard2, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportToEmployeeRequestBuilder {
        private final String integrationVendor;
        private final String processId;
        private final Integer employeeNumber;
        private final Long departmentCode;
        private final List<TimeCardData> timeCardData;
        private final String employeeId;
        private String appId;
        private Integer legalEntityId;
        private String jobCode;

        private ImportToEmployeeRequestBuilder(String integrationVendor, String processId, Integer employeeNumber, Long departmentCode, List<TimeCardData> timeCardData, String employeeId) {
            this.integrationVendor = integrationVendor;
            this.processId = processId;
            this.employeeNumber = employeeNumber;
            this.departmentCode = departmentCode;
            this.timeCardData = timeCardData;
            this.employeeId = employeeId;
        }

        /**
         * Set appId
         * @param appId Optional field that can be used for tracking purposes. Not required for payroll processing.  (optional)
         * @return ImportToEmployeeRequestBuilder
         */
        public ImportToEmployeeRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set legalEntityId
         * @param legalEntityId Unique identifier of the Legal Entity in Paycor&#39;s system. (optional)
         * @return ImportToEmployeeRequestBuilder
         */
        public ImportToEmployeeRequestBuilder legalEntityId(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
            return this;
        }
        
        /**
         * Set jobCode
         * @param jobCode JobCode parameter is not currently used - included for future functionality.  (optional)
         * @return ImportToEmployeeRequestBuilder
         */
        public ImportToEmployeeRequestBuilder jobCode(String jobCode) {
            this.jobCode = jobCode;
            return this;
        }
        
        /**
         * Build call for importToEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeTimeCard2 employeeTimeCard2 = buildBodyParams();
            return importToEmployeeCall(employeeId, employeeTimeCard2, _callback);
        }

        private EmployeeTimeCard2 buildBodyParams() {
            EmployeeTimeCard2 employeeTimeCard2 = new EmployeeTimeCard2();
            employeeTimeCard2.appId(this.appId);
            employeeTimeCard2.integrationVendor(this.integrationVendor);
            employeeTimeCard2.processId(this.processId);
            employeeTimeCard2.legalEntityId(this.legalEntityId);
            employeeTimeCard2.employeeNumber(this.employeeNumber);
            employeeTimeCard2.departmentCode(this.departmentCode);
            employeeTimeCard2.jobCode(this.jobCode);
            employeeTimeCard2.timeCardData(this.timeCardData);
            return employeeTimeCard2;
        }

        /**
         * Execute importToEmployee request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            EmployeeTimeCard2 employeeTimeCard2 = buildBodyParams();
            ApiResponse<Object> localVarResp = importToEmployeeWithHttpInfo(employeeId, employeeTimeCard2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importToEmployee request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            EmployeeTimeCard2 employeeTimeCard2 = buildBodyParams();
            return importToEmployeeWithHttpInfo(employeeId, employeeTimeCard2);
        }

        /**
         * Execute importToEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            EmployeeTimeCard2 employeeTimeCard2 = buildBodyParams();
            return importToEmployeeAsync(employeeId, employeeTimeCard2, _callback);
        }
    }

    /**
     * Import Payroll Hours to Employee
     * Data Access: Import Payroll Hours to Employee
     * @param employeeId ID of an Employee for whom you want to add the payroll hours (required)
     * @param employeeTimeCard2 Employee Hours object (required)
     * @return ImportToEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImportToEmployeeRequestBuilder importToEmployee(String integrationVendor, String processId, Integer employeeNumber, Long departmentCode, List<TimeCardData> timeCardData, String employeeId) throws IllegalArgumentException {
        if (integrationVendor == null) throw new IllegalArgumentException("\"integrationVendor\" is required but got null");
            if (integrationVendor != null && integrationVendor.length() < 1) {
              throw new IllegalArgumentException("Invalid value for integrationVendor. Length must be greater than or equal to 1.");
            }

        if (processId == null) throw new IllegalArgumentException("\"processId\" is required but got null");
            if (processId != null && processId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for processId. Length must be greater than or equal to 1.");
            }

        if (employeeNumber == null) throw new IllegalArgumentException("\"employeeNumber\" is required but got null");
        if (departmentCode == null) throw new IllegalArgumentException("\"departmentCode\" is required but got null");
        if (timeCardData == null) throw new IllegalArgumentException("\"timeCardData\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ImportToEmployeeRequestBuilder(integrationVendor, processId, employeeNumber, departmentCode, timeCardData, employeeId);
    }
}
