/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.LegalEntityWorkLocation;
import com.konfigthis.client.model.PagedResultOfLegalEntityWorkLocation;
import com.konfigthis.client.model.WorkLocation;
import com.konfigthis.client.model.WorkLocation2;
import com.konfigthis.client.model.WorkLocationAddress;
import com.konfigthis.client.model.WorkLocationAddressUpdate;
import com.konfigthis.client.model.WorkLocationPhoneNumber;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LegalEntityWorkLocationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LegalEntityWorkLocationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LegalEntityWorkLocationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addByLegalEntityIdCall(Integer legalEntityId, WorkLocation workLocation, Boolean addressData, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workLocation;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/worklocations"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addressData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressData", addressData));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addByLegalEntityIdValidateBeforeCall(Integer legalEntityId, WorkLocation workLocation, Boolean addressData, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling addByLegalEntityId(Async)");
        }

        // verify the required parameter 'workLocation' is set
        if (workLocation == null) {
            throw new ApiException("Missing the required parameter 'workLocation' when calling addByLegalEntityId(Async)");
        }

        return addByLegalEntityIdCall(legalEntityId, workLocation, addressData, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> addByLegalEntityIdWithHttpInfo(Integer legalEntityId, WorkLocation workLocation, Boolean addressData) throws ApiException {
        okhttp3.Call localVarCall = addByLegalEntityIdValidateBeforeCall(legalEntityId, workLocation, addressData, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addByLegalEntityIdAsync(Integer legalEntityId, WorkLocation workLocation, Boolean addressData, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addByLegalEntityIdValidateBeforeCall(legalEntityId, workLocation, addressData, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddByLegalEntityIdRequestBuilder {
        private final String name;
        private final List<WorkLocationAddress> addresses;
        private final Integer legalEntityId;
        private String storeId;
        private Boolean isFmlaEligible;
        private List<WorkLocationPhoneNumber> phoneNumbers;
        private Boolean addressData;

        private AddByLegalEntityIdRequestBuilder(String name, List<WorkLocationAddress> addresses, Integer legalEntityId) {
            this.name = name;
            this.addresses = addresses;
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set storeId
         * @param storeId Unique identifier of the work location store. StoreId is used for clients with WOTC Service only, defaults to Worklocation name if not provided. (optional)
         * @return AddByLegalEntityIdRequestBuilder
         */
        public AddByLegalEntityIdRequestBuilder storeId(String storeId) {
            this.storeId = storeId;
            return this;
        }
        
        /**
         * Set isFmlaEligible
         * @param isFmlaEligible Flag which determines if work location is FMLA eligible (Family and Medical Leave Act). (optional)
         * @return AddByLegalEntityIdRequestBuilder
         */
        public AddByLegalEntityIdRequestBuilder isFmlaEligible(Boolean isFmlaEligible) {
            this.isFmlaEligible = isFmlaEligible;
            return this;
        }
        
        /**
         * Set phoneNumbers
         * @param phoneNumbers A list of the work location&#39;s phone numbers.              (optional)
         * @return AddByLegalEntityIdRequestBuilder
         */
        public AddByLegalEntityIdRequestBuilder phoneNumbers(List<WorkLocationPhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }
        
        /**
         * Set addressData
         * @param addressData Use Physical Address as mailing address? (optional)
         * @return AddByLegalEntityIdRequestBuilder
         */
        public AddByLegalEntityIdRequestBuilder addressData(Boolean addressData) {
            this.addressData = addressData;
            return this;
        }
        
        /**
         * Build call for addByLegalEntityId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkLocation workLocation = buildBodyParams();
            return addByLegalEntityIdCall(legalEntityId, workLocation, addressData, _callback);
        }

        private WorkLocation buildBodyParams() {
            WorkLocation workLocation = new WorkLocation();
            workLocation.name(this.name);
            workLocation.storeId(this.storeId);
            workLocation.isFmlaEligible(this.isFmlaEligible);
            workLocation.addresses(this.addresses);
            workLocation.phoneNumbers(this.phoneNumbers);
            return workLocation;
        }

        /**
         * Execute addByLegalEntityId request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            WorkLocation workLocation = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = addByLegalEntityIdWithHttpInfo(legalEntityId, workLocation, addressData);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addByLegalEntityId request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            WorkLocation workLocation = buildBodyParams();
            return addByLegalEntityIdWithHttpInfo(legalEntityId, workLocation, addressData);
        }

        /**
         * Execute addByLegalEntityId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            WorkLocation workLocation = buildBodyParams();
            return addByLegalEntityIdAsync(legalEntityId, workLocation, addressData, _callback);
        }
    }

    /**
     * Add Work Location By Legal Entity ID
     * Data Access: Create Legal Entity Work Location
     * @param legalEntityId  (required)
     * @param workLocation Create Work Location model (required)
     * @return AddByLegalEntityIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public AddByLegalEntityIdRequestBuilder addByLegalEntityId(String name, List<WorkLocationAddress> addresses, Integer legalEntityId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (addresses == null) throw new IllegalArgumentException("\"addresses\" is required but got null");
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new AddByLegalEntityIdRequestBuilder(name, addresses, legalEntityId);
    }
    private okhttp3.Call deleteByLegalEntityAndWorkLocationIdCall(Integer legalEntityId, String workLocationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/worklocations/{workLocationId}"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()))
            .replace("{" + "workLocationId" + "}", localVarApiClient.escapeString(workLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByLegalEntityAndWorkLocationIdValidateBeforeCall(Integer legalEntityId, String workLocationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling deleteByLegalEntityAndWorkLocationId(Async)");
        }

        // verify the required parameter 'workLocationId' is set
        if (workLocationId == null) {
            throw new ApiException("Missing the required parameter 'workLocationId' when calling deleteByLegalEntityAndWorkLocationId(Async)");
        }

        return deleteByLegalEntityAndWorkLocationIdCall(legalEntityId, workLocationId, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> deleteByLegalEntityAndWorkLocationIdWithHttpInfo(Integer legalEntityId, String workLocationId) throws ApiException {
        okhttp3.Call localVarCall = deleteByLegalEntityAndWorkLocationIdValidateBeforeCall(legalEntityId, workLocationId, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteByLegalEntityAndWorkLocationIdAsync(Integer legalEntityId, String workLocationId, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByLegalEntityAndWorkLocationIdValidateBeforeCall(legalEntityId, workLocationId, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteByLegalEntityAndWorkLocationIdRequestBuilder {
        private final Integer legalEntityId;
        private final String workLocationId;

        private DeleteByLegalEntityAndWorkLocationIdRequestBuilder(Integer legalEntityId, String workLocationId) {
            this.legalEntityId = legalEntityId;
            this.workLocationId = workLocationId;
        }

        /**
         * Build call for deleteByLegalEntityAndWorkLocationId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Status Code only </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByLegalEntityAndWorkLocationIdCall(legalEntityId, workLocationId, _callback);
        }


        /**
         * Execute deleteByLegalEntityAndWorkLocationId request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Status Code only </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            ApiResponse<CreateOrUpdateResponse> localVarResp = deleteByLegalEntityAndWorkLocationIdWithHttpInfo(legalEntityId, workLocationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteByLegalEntityAndWorkLocationId request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Status Code only </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            return deleteByLegalEntityAndWorkLocationIdWithHttpInfo(legalEntityId, workLocationId);
        }

        /**
         * Execute deleteByLegalEntityAndWorkLocationId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Status Code only </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            return deleteByLegalEntityAndWorkLocationIdAsync(legalEntityId, workLocationId, _callback);
        }
    }

    /**
     * Delete Work Location By Work Location ID And Legal Entity ID
     * Data Access: Delete Legal Entity Work Location
     * @param legalEntityId ID of the Legal Entity for which you want to delete Work Location (required)
     * @param workLocationId ID of the Work Location (required)
     * @return DeleteByLegalEntityAndWorkLocationIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Status Code only </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByLegalEntityAndWorkLocationIdRequestBuilder deleteByLegalEntityAndWorkLocationId(Integer legalEntityId, String workLocationId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        if (workLocationId == null) throw new IllegalArgumentException("\"workLocationId\" is required but got null");
            

        return new DeleteByLegalEntityAndWorkLocationIdRequestBuilder(legalEntityId, workLocationId);
    }
    private okhttp3.Call getByLegalEntityAndLocationCall(Integer legalEntityId, String workLocationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/worklocations/{workLocationId}"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()))
            .replace("{" + "workLocationId" + "}", localVarApiClient.escapeString(workLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByLegalEntityAndLocationValidateBeforeCall(Integer legalEntityId, String workLocationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getByLegalEntityAndLocation(Async)");
        }

        // verify the required parameter 'workLocationId' is set
        if (workLocationId == null) {
            throw new ApiException("Missing the required parameter 'workLocationId' when calling getByLegalEntityAndLocation(Async)");
        }

        return getByLegalEntityAndLocationCall(legalEntityId, workLocationId, _callback);

    }


    private ApiResponse<LegalEntityWorkLocation> getByLegalEntityAndLocationWithHttpInfo(Integer legalEntityId, String workLocationId) throws ApiException {
        okhttp3.Call localVarCall = getByLegalEntityAndLocationValidateBeforeCall(legalEntityId, workLocationId, null);
        Type localVarReturnType = new TypeToken<LegalEntityWorkLocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByLegalEntityAndLocationAsync(Integer legalEntityId, String workLocationId, final ApiCallback<LegalEntityWorkLocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByLegalEntityAndLocationValidateBeforeCall(legalEntityId, workLocationId, _callback);
        Type localVarReturnType = new TypeToken<LegalEntityWorkLocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByLegalEntityAndLocationRequestBuilder {
        private final Integer legalEntityId;
        private final String workLocationId;

        private GetByLegalEntityAndLocationRequestBuilder(Integer legalEntityId, String workLocationId) {
            this.legalEntityId = legalEntityId;
            this.workLocationId = workLocationId;
        }

        /**
         * Build call for getByLegalEntityAndLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Legal Entity Work Location </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByLegalEntityAndLocationCall(legalEntityId, workLocationId, _callback);
        }


        /**
         * Execute getByLegalEntityAndLocation request
         * @return LegalEntityWorkLocation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Legal Entity Work Location </td><td>  -  </td></tr>
         </table>
         */
        public LegalEntityWorkLocation execute() throws ApiException {
            ApiResponse<LegalEntityWorkLocation> localVarResp = getByLegalEntityAndLocationWithHttpInfo(legalEntityId, workLocationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByLegalEntityAndLocation request with HTTP info returned
         * @return ApiResponse&lt;LegalEntityWorkLocation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Legal Entity Work Location </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LegalEntityWorkLocation> executeWithHttpInfo() throws ApiException {
            return getByLegalEntityAndLocationWithHttpInfo(legalEntityId, workLocationId);
        }

        /**
         * Execute getByLegalEntityAndLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Legal Entity Work Location </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LegalEntityWorkLocation> _callback) throws ApiException {
            return getByLegalEntityAndLocationAsync(legalEntityId, workLocationId, _callback);
        }
    }

    /**
     * Get a Work Location for a Legal Entity By Legal Entity ID and Work Location ID
     * Data Access: View Legal Entity Work Location
     * @param legalEntityId ID of the Legal Entity for which you want to get the work location (required)
     * @param workLocationId ID of the Work Location (required)
     * @return GetByLegalEntityAndLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Legal Entity Work Location </td><td>  -  </td></tr>
     </table>
     */
    public GetByLegalEntityAndLocationRequestBuilder getByLegalEntityAndLocation(Integer legalEntityId, String workLocationId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        if (workLocationId == null) throw new IllegalArgumentException("\"workLocationId\" is required but got null");
            

        return new GetByLegalEntityAndLocationRequestBuilder(legalEntityId, workLocationId);
    }
    private okhttp3.Call listCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/worklocations"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling list(Async)");
        }

        return listCall(legalEntityId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfLegalEntityWorkLocation> listWithHttpInfo(Integer legalEntityId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(legalEntityId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfLegalEntityWorkLocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Integer legalEntityId, String continuationToken, final ApiCallback<PagedResultOfLegalEntityWorkLocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(legalEntityId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfLegalEntityWorkLocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final Integer legalEntityId;
        private String continuationToken;

        private ListRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of work locations (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of Work Locations for a Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(legalEntityId, continuationToken, _callback);
        }


        /**
         * Execute list request
         * @return PagedResultOfLegalEntityWorkLocation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of Work Locations for a Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfLegalEntityWorkLocation execute() throws ApiException {
            ApiResponse<PagedResultOfLegalEntityWorkLocation> localVarResp = listWithHttpInfo(legalEntityId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfLegalEntityWorkLocation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of Work Locations for a Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfLegalEntityWorkLocation> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(legalEntityId, continuationToken);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of Work Locations for a Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfLegalEntityWorkLocation> _callback) throws ApiException {
            return listAsync(legalEntityId, continuationToken, _callback);
        }
    }

    /**
     * Get a list of Work Locations for a Legal Entity
     * Data Access: View Legal Entity Work Locations
     * @param legalEntityId ID of the Legal Entity for which you want to get the work locations (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Work Locations for a Legal Entity </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new ListRequestBuilder(legalEntityId);
    }
    private okhttp3.Call updateByLegalEntityIdCall(Integer legalEntityId, WorkLocation2 workLocation2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workLocation2;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/worklocations"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByLegalEntityIdValidateBeforeCall(Integer legalEntityId, WorkLocation2 workLocation2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling updateByLegalEntityId(Async)");
        }

        // verify the required parameter 'workLocation2' is set
        if (workLocation2 == null) {
            throw new ApiException("Missing the required parameter 'workLocation2' when calling updateByLegalEntityId(Async)");
        }

        return updateByLegalEntityIdCall(legalEntityId, workLocation2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateByLegalEntityIdWithHttpInfo(Integer legalEntityId, WorkLocation2 workLocation2) throws ApiException {
        okhttp3.Call localVarCall = updateByLegalEntityIdValidateBeforeCall(legalEntityId, workLocation2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByLegalEntityIdAsync(Integer legalEntityId, WorkLocation2 workLocation2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByLegalEntityIdValidateBeforeCall(legalEntityId, workLocation2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByLegalEntityIdRequestBuilder {
        private final String id;
        private final Integer legalEntityId;
        private List<WorkLocationAddressUpdate> addresses;
        private List<WorkLocationPhoneNumber> phoneNumbers;
        private String timeZone;
        private Boolean isFmlaEligible;
        private Boolean isDefault;

        private UpdateByLegalEntityIdRequestBuilder(String id, Integer legalEntityId) {
            this.id = id;
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set addresses
         * @param addresses A list of work location&#39;s addresses. (optional)
         * @return UpdateByLegalEntityIdRequestBuilder
         */
        public UpdateByLegalEntityIdRequestBuilder addresses(List<WorkLocationAddressUpdate> addresses) {
            this.addresses = addresses;
            return this;
        }
        
        /**
         * Set phoneNumbers
         * @param phoneNumbers A list of the work location&#39;s phone numbers.              (optional)
         * @return UpdateByLegalEntityIdRequestBuilder
         */
        public UpdateByLegalEntityIdRequestBuilder phoneNumbers(List<WorkLocationPhoneNumber> phoneNumbers) {
            this.phoneNumbers = phoneNumbers;
            return this;
        }
        
        /**
         * Set timeZone
         * @param timeZone Time zone.              (optional)
         * @return UpdateByLegalEntityIdRequestBuilder
         */
        public UpdateByLegalEntityIdRequestBuilder timeZone(String timeZone) {
            this.timeZone = timeZone;
            return this;
        }
        
        /**
         * Set isFmlaEligible
         * @param isFmlaEligible Is FmlaEligible.              (optional)
         * @return UpdateByLegalEntityIdRequestBuilder
         */
        public UpdateByLegalEntityIdRequestBuilder isFmlaEligible(Boolean isFmlaEligible) {
            this.isFmlaEligible = isFmlaEligible;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault Is default              (optional)
         * @return UpdateByLegalEntityIdRequestBuilder
         */
        public UpdateByLegalEntityIdRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Build call for updateByLegalEntityId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a resource reference for work location </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkLocation2 workLocation2 = buildBodyParams();
            return updateByLegalEntityIdCall(legalEntityId, workLocation2, _callback);
        }

        private WorkLocation2 buildBodyParams() {
            WorkLocation2 workLocation2 = new WorkLocation2();
            workLocation2.id(this.id);
            workLocation2.addresses(this.addresses);
            workLocation2.phoneNumbers(this.phoneNumbers);
            workLocation2.timeZone(this.timeZone);
            workLocation2.isFmlaEligible(this.isFmlaEligible);
            workLocation2.isDefault(this.isDefault);
            return workLocation2;
        }

        /**
         * Execute updateByLegalEntityId request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a resource reference for work location </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            WorkLocation2 workLocation2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateByLegalEntityIdWithHttpInfo(legalEntityId, workLocation2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByLegalEntityId request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a resource reference for work location </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            WorkLocation2 workLocation2 = buildBodyParams();
            return updateByLegalEntityIdWithHttpInfo(legalEntityId, workLocation2);
        }

        /**
         * Execute updateByLegalEntityId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a resource reference for work location </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            WorkLocation2 workLocation2 = buildBodyParams();
            return updateByLegalEntityIdAsync(legalEntityId, workLocation2, _callback);
        }
    }

    /**
     * Update Work Location By Legal Entity ID
     * Data Access: Update Legal Entity Work Location
     * @param legalEntityId ID of the Legal Entity for which you want to get the work locations (required)
     * @param workLocation2 Update Work Location model (required)
     * @return UpdateByLegalEntityIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a resource reference for work location </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByLegalEntityIdRequestBuilder updateByLegalEntityId(String id, Integer legalEntityId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new UpdateByLegalEntityIdRequestBuilder(id, legalEntityId);
    }
}
