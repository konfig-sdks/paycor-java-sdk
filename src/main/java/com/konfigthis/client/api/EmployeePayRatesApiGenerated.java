/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.EmployeePayRate2;
import com.konfigthis.client.model.EmployeePayRate3;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedResultOfEmployeePayRate;
import com.konfigthis.client.model.PayType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeePayRatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeePayRatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeePayRatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewRateCall(String employeeId, EmployeePayRate2 employeePayRate2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePayRate2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/payrates"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewRateValidateBeforeCall(String employeeId, EmployeePayRate2 employeePayRate2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addNewRate(Async)");
        }

        // verify the required parameter 'employeePayRate2' is set
        if (employeePayRate2 == null) {
            throw new ApiException("Missing the required parameter 'employeePayRate2' when calling addNewRate(Async)");
        }

        return addNewRateCall(employeeId, employeePayRate2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> addNewRateWithHttpInfo(String employeeId, EmployeePayRate2 employeePayRate2) throws ApiException {
        okhttp3.Call localVarCall = addNewRateValidateBeforeCall(employeeId, employeePayRate2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewRateAsync(String employeeId, EmployeePayRate2 employeePayRate2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewRateValidateBeforeCall(employeeId, employeePayRate2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewRateRequestBuilder {
        private final OffsetDateTime effectiveStartDate;
        private final Integer sequenceNumber;
        private final String description;
        private final String employeeId;
        private OffsetDateTime effectiveEndDate;
        private Double payRate;
        private Double annualPayRate;
        private PayType type;
        private String reason;
        private String notes;

        private AddNewRateRequestBuilder(OffsetDateTime effectiveStartDate, Integer sequenceNumber, String description, String employeeId) {
            this.effectiveStartDate = effectiveStartDate;
            this.sequenceNumber = sequenceNumber;
            this.description = description;
            this.employeeId = employeeId;
        }

        /**
         * Set effectiveEndDate
         * @param effectiveEndDate Date when the employee pay rate is no longer in effect. Default to null. Only pass in a date if the payrate is no longer active. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)               (optional)
         * @return AddNewRateRequestBuilder
         */
        public AddNewRateRequestBuilder effectiveEndDate(OffsetDateTime effectiveEndDate) {
            this.effectiveEndDate = effectiveEndDate;
            return this;
        }
        
        /**
         * Set payRate
         * @param payRate Employee&#39;s rate of pay (in dollars).  If Pay Type is Hourly, then Pay Rate is a Per-Hour dollar amount and is required.  If Pay Type is Salary, then Pay Rate is a Per-Pay dollar amount, and either Pay Rate or Annual Rate is required. Payrate can&#39;t have more than 6 decimal places and can&#39;t be negative.               (optional)
         * @return AddNewRateRequestBuilder
         */
        public AddNewRateRequestBuilder payRate(Double payRate) {
            this.payRate = payRate;
            return this;
        }
        

        /**
         * Set payRate
         * @param payRate Employee&#39;s rate of pay (in dollars).  If Pay Type is Hourly, then Pay Rate is a Per-Hour dollar amount and is required.  If Pay Type is Salary, then Pay Rate is a Per-Pay dollar amount, and either Pay Rate or Annual Rate is required. Payrate can&#39;t have more than 6 decimal places and can&#39;t be negative.               (optional)
         * @return AddNewRateRequestBuilder
         */
        public AddNewRateRequestBuilder payRate(Integer payRate) {
            this.payRate = payRate.doubleValue();
            return this;
        }
        
        /**
         * Set annualPayRate
         * @param annualPayRate Employee&#39;s annual pay amount (in dollars). Only used if Type&#x3D;Salary.  * For Salary Type, AnnualPayRate overrides payRate if passed into API call. The value not provided will be calculated based on Employee&#39;s Annual Hours setup on Employee&#39;s Profile. * For Hourly Type, this parameter is ignored - Paycor calculates based on Employee&#39;s Annual Hours setup on Employee&#39;s Profile.              (optional)
         * @return AddNewRateRequestBuilder
         */
        public AddNewRateRequestBuilder annualPayRate(Double annualPayRate) {
            this.annualPayRate = annualPayRate;
            return this;
        }
        

        /**
         * Set annualPayRate
         * @param annualPayRate Employee&#39;s annual pay amount (in dollars). Only used if Type&#x3D;Salary.  * For Salary Type, AnnualPayRate overrides payRate if passed into API call. The value not provided will be calculated based on Employee&#39;s Annual Hours setup on Employee&#39;s Profile. * For Hourly Type, this parameter is ignored - Paycor calculates based on Employee&#39;s Annual Hours setup on Employee&#39;s Profile.              (optional)
         * @return AddNewRateRequestBuilder
         */
        public AddNewRateRequestBuilder annualPayRate(Integer annualPayRate) {
            this.annualPayRate = annualPayRate.doubleValue();
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return AddNewRateRequestBuilder
         */
        public AddNewRateRequestBuilder type(PayType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set reason
         * @param reason Reason associated with the employee&#39;s pay rate. Optional.               (optional)
         * @return AddNewRateRequestBuilder
         */
        public AddNewRateRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes associated with the employee&#39;s pay rate, which will be displayed on Pay Rate History page.  Must be 512 characters or less. Optional.               (optional)
         * @return AddNewRateRequestBuilder
         */
        public AddNewRateRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for addNewRate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePayRate2 employeePayRate2 = buildBodyParams();
            return addNewRateCall(employeeId, employeePayRate2, _callback);
        }

        private EmployeePayRate2 buildBodyParams() {
            EmployeePayRate2 employeePayRate2 = new EmployeePayRate2();
            employeePayRate2.effectiveStartDate(this.effectiveStartDate);
            employeePayRate2.effectiveEndDate(this.effectiveEndDate);
            employeePayRate2.sequenceNumber(this.sequenceNumber);
            employeePayRate2.payRate(this.payRate);
            employeePayRate2.annualPayRate(this.annualPayRate);
            employeePayRate2.description(this.description);
            employeePayRate2.type(this.type);
            employeePayRate2.reason(this.reason);
            employeePayRate2.notes(this.notes);
            return employeePayRate2;
        }

        /**
         * Execute addNewRate request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeePayRate2 employeePayRate2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = addNewRateWithHttpInfo(employeeId, employeePayRate2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewRate request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeePayRate2 employeePayRate2 = buildBodyParams();
            return addNewRateWithHttpInfo(employeeId, employeePayRate2);
        }

        /**
         * Execute addNewRate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeePayRate2 employeePayRate2 = buildBodyParams();
            return addNewRateAsync(employeeId, employeePayRate2, _callback);
        }
    }

    /**
     * Add Payrate to Employee
     * This immediately creates a new payrate related to an Employee in Paycor&#39;s system. There is no way to undo or reverse this operation.   Data Access: Create Employee PayRates Sequence numbers must be consecutive and unique
     * @param employeeId ID of the Employee you wish to create the payrate for (required)
     * @param employeePayRate2 Create Payrate model (required)
     * @return AddNewRateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public AddNewRateRequestBuilder addNewRate(OffsetDateTime effectiveStartDate, Integer sequenceNumber, String description, String employeeId) throws IllegalArgumentException {
        if (effectiveStartDate == null) throw new IllegalArgumentException("\"effectiveStartDate\" is required but got null");
        if (sequenceNumber == null) throw new IllegalArgumentException("\"sequenceNumber\" is required but got null");
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            if (description != null && description.length() < 1) {
              throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddNewRateRequestBuilder(effectiveStartDate, sequenceNumber, description, employeeId);
    }
    private okhttp3.Call getByEmployeeIdCall(String employeeId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/payrates"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(String employeeId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeePayRate> getByEmployeeIdWithHttpInfo(String employeeId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeePayRate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(String employeeId, String continuationToken, final ApiCallback<PagedResultOfEmployeePayRate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeePayRate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final String employeeId;
        private String continuationToken;

        private GetByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set continuationToken
         * @param continuationToken Token to get next set of payrates (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns payrates based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, continuationToken, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return PagedResultOfEmployeePayRate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns payrates based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeePayRate execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeePayRate> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeePayRate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns payrates based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeePayRate> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, continuationToken);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns payrates based on EmployeeID </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeePayRate> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, continuationToken, _callback);
        }
    }

    /**
     * Get Employee Payrates by EmployeeID
     * Data Access: View Employee Payrates
     * @param employeeId ID of employee for which you want to get payrates (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns payrates based on EmployeeID </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call updateByEmployeeIdAndPayrateIdCall(String employeeId, String payrateId, EmployeePayRate3 employeePayRate3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePayRate3;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/payrates/{payrateId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "payrateId" + "}", localVarApiClient.escapeString(payrateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByEmployeeIdAndPayrateIdValidateBeforeCall(String employeeId, String payrateId, EmployeePayRate3 employeePayRate3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateByEmployeeIdAndPayrateId(Async)");
        }

        // verify the required parameter 'payrateId' is set
        if (payrateId == null) {
            throw new ApiException("Missing the required parameter 'payrateId' when calling updateByEmployeeIdAndPayrateId(Async)");
        }

        // verify the required parameter 'employeePayRate3' is set
        if (employeePayRate3 == null) {
            throw new ApiException("Missing the required parameter 'employeePayRate3' when calling updateByEmployeeIdAndPayrateId(Async)");
        }

        return updateByEmployeeIdAndPayrateIdCall(employeeId, payrateId, employeePayRate3, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateByEmployeeIdAndPayrateIdWithHttpInfo(String employeeId, String payrateId, EmployeePayRate3 employeePayRate3) throws ApiException {
        okhttp3.Call localVarCall = updateByEmployeeIdAndPayrateIdValidateBeforeCall(employeeId, payrateId, employeePayRate3, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByEmployeeIdAndPayrateIdAsync(String employeeId, String payrateId, EmployeePayRate3 employeePayRate3, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByEmployeeIdAndPayrateIdValidateBeforeCall(employeeId, payrateId, employeePayRate3, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByEmployeeIdAndPayrateIdRequestBuilder {
        private final OffsetDateTime effectiveStartDate;
        private final Double payRate;
        private final String description;
        private final String employeeId;
        private final String payrateId;
        private Integer sequenceNumber;
        private Double annualPayRate;
        private PayType type;
        private String reason;
        private String notes;

        private UpdateByEmployeeIdAndPayrateIdRequestBuilder(OffsetDateTime effectiveStartDate, double payRate, String description, String employeeId, String payrateId) {
            this.effectiveStartDate = effectiveStartDate;
            this.payRate = payRate;
            this.description = description;
            this.employeeId = employeeId;
            this.payrateId = payrateId;
        }

        /**
         * Set sequenceNumber
         * @param sequenceNumber Orders how multiple earnings are calculated. Needed so earnings dependent on other earnings are calculated in the proper sequence. For PUT, this should match an existing SequenceNumber (retrieved via GET Employee PayRates). (optional)
         * @return UpdateByEmployeeIdAndPayrateIdRequestBuilder
         */
        public UpdateByEmployeeIdAndPayrateIdRequestBuilder sequenceNumber(Integer sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Set annualPayRate
         * @param annualPayRate Employee&#39;s annual pay amount (in dollars). Only used if Type&#x3D;Salary.  * For Salary Type, AnnualPayRate overrides payRate if passed into API call. The value not provided will be calculated based on Employee&#39;s Annual Hours setup on Employee&#39;s Profile. * For Hourly Type, this parameter is ignored - Paycor calculates based on Employee&#39;s Annual Hours setup on Employee&#39;s Profile.              (optional)
         * @return UpdateByEmployeeIdAndPayrateIdRequestBuilder
         */
        public UpdateByEmployeeIdAndPayrateIdRequestBuilder annualPayRate(Double annualPayRate) {
            this.annualPayRate = annualPayRate;
            return this;
        }
        

        /**
         * Set annualPayRate
         * @param annualPayRate Employee&#39;s annual pay amount (in dollars). Only used if Type&#x3D;Salary.  * For Salary Type, AnnualPayRate overrides payRate if passed into API call. The value not provided will be calculated based on Employee&#39;s Annual Hours setup on Employee&#39;s Profile. * For Hourly Type, this parameter is ignored - Paycor calculates based on Employee&#39;s Annual Hours setup on Employee&#39;s Profile.              (optional)
         * @return UpdateByEmployeeIdAndPayrateIdRequestBuilder
         */
        public UpdateByEmployeeIdAndPayrateIdRequestBuilder annualPayRate(Integer annualPayRate) {
            this.annualPayRate = annualPayRate.doubleValue();
            return this;
        }
        
        /**
         * Set type
         * @param type  (optional)
         * @return UpdateByEmployeeIdAndPayrateIdRequestBuilder
         */
        public UpdateByEmployeeIdAndPayrateIdRequestBuilder type(PayType type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set reason
         * @param reason Reason associated with the employee&#39;s pay rate. Optional.               (optional)
         * @return UpdateByEmployeeIdAndPayrateIdRequestBuilder
         */
        public UpdateByEmployeeIdAndPayrateIdRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Notes associated with the employee&#39;s pay rate, which will be displayed on Pay Rate History page.  Must be 512 characters or less. Optional.               (optional)
         * @return UpdateByEmployeeIdAndPayrateIdRequestBuilder
         */
        public UpdateByEmployeeIdAndPayrateIdRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for updateByEmployeeIdAndPayrateId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePayRate3 employeePayRate3 = buildBodyParams();
            return updateByEmployeeIdAndPayrateIdCall(employeeId, payrateId, employeePayRate3, _callback);
        }

        private EmployeePayRate3 buildBodyParams() {
            EmployeePayRate3 employeePayRate3 = new EmployeePayRate3();
            employeePayRate3.effectiveStartDate(this.effectiveStartDate);
            employeePayRate3.sequenceNumber(this.sequenceNumber);
            employeePayRate3.payRate(this.payRate);
            employeePayRate3.annualPayRate(this.annualPayRate);
            employeePayRate3.description(this.description);
            employeePayRate3.type(this.type);
            employeePayRate3.reason(this.reason);
            employeePayRate3.notes(this.notes);
            return employeePayRate3;
        }

        /**
         * Execute updateByEmployeeIdAndPayrateId request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeePayRate3 employeePayRate3 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateByEmployeeIdAndPayrateIdWithHttpInfo(employeeId, payrateId, employeePayRate3);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByEmployeeIdAndPayrateId request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeePayRate3 employeePayRate3 = buildBodyParams();
            return updateByEmployeeIdAndPayrateIdWithHttpInfo(employeeId, payrateId, employeePayRate3);
        }

        /**
         * Execute updateByEmployeeIdAndPayrateId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeePayRate3 employeePayRate3 = buildBodyParams();
            return updateByEmployeeIdAndPayrateIdAsync(employeeId, payrateId, employeePayRate3, _callback);
        }
    }

    /**
     * Update Employee Payrate by EmployeeID
     * Data Access: Update Employee PayRates
     * @param employeeId ID of an Employee that has the Payrate you wish to update (required)
     * @param payrateId ID of the Payrate you wish to update (required)
     * @param employeePayRate3 EmployeePayRate with ID set and fields updated (required)
     * @return UpdateByEmployeeIdAndPayrateIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByEmployeeIdAndPayrateIdRequestBuilder updateByEmployeeIdAndPayrateId(OffsetDateTime effectiveStartDate, double payRate, String description, String employeeId, String payrateId) throws IllegalArgumentException {
        if (effectiveStartDate == null) throw new IllegalArgumentException("\"effectiveStartDate\" is required but got null");
        
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            if (description != null && description.length() < 1) {
              throw new IllegalArgumentException("Invalid value for description. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (payrateId == null) throw new IllegalArgumentException("\"payrateId\" is required but got null");
            

        return new UpdateByEmployeeIdAndPayrateIdRequestBuilder(effectiveStartDate, payRate, description, employeeId, payrateId);
    }
}
