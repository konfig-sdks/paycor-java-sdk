/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.LaborCode3;
import com.konfigthis.client.model.LaborCode4;
import com.konfigthis.client.model.LaborCode5;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LaborCodesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LaborCodesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LaborCodesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addLaborCodeToLegalEntityCall(Integer legalEntityId, LaborCode3 laborCode3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = laborCode3;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/laborcodes"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLaborCodeToLegalEntityValidateBeforeCall(Integer legalEntityId, LaborCode3 laborCode3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling addLaborCodeToLegalEntity(Async)");
        }

        // verify the required parameter 'laborCode3' is set
        if (laborCode3 == null) {
            throw new ApiException("Missing the required parameter 'laborCode3' when calling addLaborCodeToLegalEntity(Async)");
        }

        return addLaborCodeToLegalEntityCall(legalEntityId, laborCode3, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> addLaborCodeToLegalEntityWithHttpInfo(Integer legalEntityId, LaborCode3 laborCode3) throws ApiException {
        okhttp3.Call localVarCall = addLaborCodeToLegalEntityValidateBeforeCall(legalEntityId, laborCode3, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addLaborCodeToLegalEntityAsync(Integer legalEntityId, LaborCode3 laborCode3, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLaborCodeToLegalEntityValidateBeforeCall(legalEntityId, laborCode3, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddLaborCodeToLegalEntityRequestBuilder {
        private final String laborCategoryId;
        private final String laborCodeName;
        private final String code;
        private final Integer legalEntityId;
        private String description;
        private OffsetDateTime effectiveStartDate;
        private OffsetDateTime effectiveEndDate;

        private AddLaborCodeToLegalEntityRequestBuilder(String laborCategoryId, String laborCodeName, String code, Integer legalEntityId) {
            this.laborCategoryId = laborCategoryId;
            this.laborCodeName = laborCodeName;
            this.code = code;
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set description
         * @param description Description of labor code (optional)
         * @return AddLaborCodeToLegalEntityRequestBuilder
         */
        public AddLaborCodeToLegalEntityRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set effectiveStartDate
         * @param effectiveStartDate Effective start date of labor code (optional)
         * @return AddLaborCodeToLegalEntityRequestBuilder
         */
        public AddLaborCodeToLegalEntityRequestBuilder effectiveStartDate(OffsetDateTime effectiveStartDate) {
            this.effectiveStartDate = effectiveStartDate;
            return this;
        }
        
        /**
         * Set effectiveEndDate
         * @param effectiveEndDate Effective end date of labor code (optional)
         * @return AddLaborCodeToLegalEntityRequestBuilder
         */
        public AddLaborCodeToLegalEntityRequestBuilder effectiveEndDate(OffsetDateTime effectiveEndDate) {
            this.effectiveEndDate = effectiveEndDate;
            return this;
        }
        
        /**
         * Build call for addLaborCodeToLegalEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LaborCode3 laborCode3 = buildBodyParams();
            return addLaborCodeToLegalEntityCall(legalEntityId, laborCode3, _callback);
        }

        private LaborCode3 buildBodyParams() {
            LaborCode3 laborCode3 = new LaborCode3();
            laborCode3.laborCategoryId(this.laborCategoryId);
            laborCode3.laborCodeName(this.laborCodeName);
            laborCode3.description(this.description);
            laborCode3.code(this.code);
            laborCode3.effectiveStartDate(this.effectiveStartDate);
            laborCode3.effectiveEndDate(this.effectiveEndDate);
            return laborCode3;
        }

        /**
         * Execute addLaborCodeToLegalEntity request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            LaborCode3 laborCode3 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = addLaborCodeToLegalEntityWithHttpInfo(legalEntityId, laborCode3);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addLaborCodeToLegalEntity request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            LaborCode3 laborCode3 = buildBodyParams();
            return addLaborCodeToLegalEntityWithHttpInfo(legalEntityId, laborCode3);
        }

        /**
         * Execute addLaborCodeToLegalEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            LaborCode3 laborCode3 = buildBodyParams();
            return addLaborCodeToLegalEntityAsync(legalEntityId, laborCode3, _callback);
        }
    }

    /**
     * Add Labor Code to Legal Entity
     * This immediately creates a new labor code related to a Legal Entity in Paycor&#39;s system. There is no way to undo or reverse this operation. * Required body attributes:     * LaborCategoryId     * Code     * LaborCodeName       To make this call you will need the Job Costing or Workforce Management Service.  Data Access: Create and Update Labor Codes
     * @param legalEntityId ID of the Legal Entity for which you want to create Labor Code (required)
     * @param laborCode3  (required)
     * @return AddLaborCodeToLegalEntityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public AddLaborCodeToLegalEntityRequestBuilder addLaborCodeToLegalEntity(String laborCategoryId, String laborCodeName, String code, Integer legalEntityId) throws IllegalArgumentException {
        if (laborCategoryId == null) throw new IllegalArgumentException("\"laborCategoryId\" is required but got null");
            if (laborCategoryId != null && laborCategoryId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for laborCategoryId. Length must be greater than or equal to 1.");
            }

        if (laborCodeName == null) throw new IllegalArgumentException("\"laborCodeName\" is required but got null");
            if (laborCodeName != null && laborCodeName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for laborCodeName. Length must be greater than or equal to 1.");
            }

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            if (code != null && code.length() < 1) {
              throw new IllegalArgumentException("Invalid value for code. Length must be greater than or equal to 1.");
            }

        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new AddLaborCodeToLegalEntityRequestBuilder(laborCategoryId, laborCodeName, code, legalEntityId);
    }
    private okhttp3.Call listByLegalEntityIdCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/laborcodes"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByLegalEntityIdValidateBeforeCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling listByLegalEntityId(Async)");
        }

        return listByLegalEntityIdCall(legalEntityId, continuationToken, _callback);

    }


    private ApiResponse<LaborCode4> listByLegalEntityIdWithHttpInfo(Integer legalEntityId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listByLegalEntityIdValidateBeforeCall(legalEntityId, continuationToken, null);
        Type localVarReturnType = new TypeToken<LaborCode4>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByLegalEntityIdAsync(Integer legalEntityId, String continuationToken, final ApiCallback<LaborCode4> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByLegalEntityIdValidateBeforeCall(legalEntityId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<LaborCode4>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByLegalEntityIdRequestBuilder {
        private final Integer legalEntityId;
        private String continuationToken;

        private ListByLegalEntityIdRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set continuationToken
         * @param continuationToken  (optional)
         * @return ListByLegalEntityIdRequestBuilder
         */
        public ListByLegalEntityIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listByLegalEntityId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns list of all Labor Code items. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByLegalEntityIdCall(legalEntityId, continuationToken, _callback);
        }


        /**
         * Execute listByLegalEntityId request
         * @return LaborCode4
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns list of all Labor Code items. </td><td>  -  </td></tr>
         </table>
         */
        public LaborCode4 execute() throws ApiException {
            ApiResponse<LaborCode4> localVarResp = listByLegalEntityIdWithHttpInfo(legalEntityId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByLegalEntityId request with HTTP info returned
         * @return ApiResponse&lt;LaborCode4&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns list of all Labor Code items. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LaborCode4> executeWithHttpInfo() throws ApiException {
            return listByLegalEntityIdWithHttpInfo(legalEntityId, continuationToken);
        }

        /**
         * Execute listByLegalEntityId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns list of all Labor Code items. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LaborCode4> _callback) throws ApiException {
            return listByLegalEntityIdAsync(legalEntityId, continuationToken, _callback);
        }
    }

    /**
     * Get Labor Code By Legal Entity ID
     * Returns list of all Labor Code items.  * Labor code is not active if effective start date is after current date or if effective end date is before current date.  To make this call you will need the Job Costing or Workforce Management Service.  Data Access: View Labor Codes by Legal Entity Id
     * @param legalEntityId ID of the Legal Entity for which you want to get labor codes (also known as job codes) (required)
     * @return ListByLegalEntityIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns list of all Labor Code items. </td><td>  -  </td></tr>
     </table>
     */
    public ListByLegalEntityIdRequestBuilder listByLegalEntityId(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new ListByLegalEntityIdRequestBuilder(legalEntityId);
    }
    private okhttp3.Call updateSpecifiedLaborCodeCall(Integer legalEntityId, LaborCode5 laborCode5, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = laborCode5;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/laborcodes"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpecifiedLaborCodeValidateBeforeCall(Integer legalEntityId, LaborCode5 laborCode5, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling updateSpecifiedLaborCode(Async)");
        }

        // verify the required parameter 'laborCode5' is set
        if (laborCode5 == null) {
            throw new ApiException("Missing the required parameter 'laborCode5' when calling updateSpecifiedLaborCode(Async)");
        }

        return updateSpecifiedLaborCodeCall(legalEntityId, laborCode5, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateSpecifiedLaborCodeWithHttpInfo(Integer legalEntityId, LaborCode5 laborCode5) throws ApiException {
        okhttp3.Call localVarCall = updateSpecifiedLaborCodeValidateBeforeCall(legalEntityId, laborCode5, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSpecifiedLaborCodeAsync(Integer legalEntityId, LaborCode5 laborCode5, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpecifiedLaborCodeValidateBeforeCall(legalEntityId, laborCode5, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSpecifiedLaborCodeRequestBuilder {
        private final String laborCodeId;
        private final Integer legalEntityId;
        private String laborCodeName;
        private String description;
        private String code;
        private OffsetDateTime effectiveStartDate;
        private OffsetDateTime effectiveEndDate;

        private UpdateSpecifiedLaborCodeRequestBuilder(String laborCodeId, Integer legalEntityId) {
            this.laborCodeId = laborCodeId;
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set laborCodeName
         * @param laborCodeName Unique name of labor code in the labor category (optional)
         * @return UpdateSpecifiedLaborCodeRequestBuilder
         */
        public UpdateSpecifiedLaborCodeRequestBuilder laborCodeName(String laborCodeName) {
            this.laborCodeName = laborCodeName;
            return this;
        }
        
        /**
         * Set description
         * @param description Description of labor code (optional)
         * @return UpdateSpecifiedLaborCodeRequestBuilder
         */
        public UpdateSpecifiedLaborCodeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set code
         * @param code textual code of labor code (optional)
         * @return UpdateSpecifiedLaborCodeRequestBuilder
         */
        public UpdateSpecifiedLaborCodeRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set effectiveStartDate
         * @param effectiveStartDate Effective start date of labor code (optional)
         * @return UpdateSpecifiedLaborCodeRequestBuilder
         */
        public UpdateSpecifiedLaborCodeRequestBuilder effectiveStartDate(OffsetDateTime effectiveStartDate) {
            this.effectiveStartDate = effectiveStartDate;
            return this;
        }
        
        /**
         * Set effectiveEndDate
         * @param effectiveEndDate Effective end date of labor code (optional)
         * @return UpdateSpecifiedLaborCodeRequestBuilder
         */
        public UpdateSpecifiedLaborCodeRequestBuilder effectiveEndDate(OffsetDateTime effectiveEndDate) {
            this.effectiveEndDate = effectiveEndDate;
            return this;
        }
        
        /**
         * Build call for updateSpecifiedLaborCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            LaborCode5 laborCode5 = buildBodyParams();
            return updateSpecifiedLaborCodeCall(legalEntityId, laborCode5, _callback);
        }

        private LaborCode5 buildBodyParams() {
            LaborCode5 laborCode5 = new LaborCode5();
            laborCode5.laborCodeId(this.laborCodeId);
            laborCode5.laborCodeName(this.laborCodeName);
            laborCode5.description(this.description);
            laborCode5.code(this.code);
            laborCode5.effectiveStartDate(this.effectiveStartDate);
            laborCode5.effectiveEndDate(this.effectiveEndDate);
            return laborCode5;
        }

        /**
         * Execute updateSpecifiedLaborCode request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            LaborCode5 laborCode5 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateSpecifiedLaborCodeWithHttpInfo(legalEntityId, laborCode5);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSpecifiedLaborCode request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            LaborCode5 laborCode5 = buildBodyParams();
            return updateSpecifiedLaborCodeWithHttpInfo(legalEntityId, laborCode5);
        }

        /**
         * Execute updateSpecifiedLaborCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            LaborCode5 laborCode5 = buildBodyParams();
            return updateSpecifiedLaborCodeAsync(legalEntityId, laborCode5, _callback);
        }
    }

    /**
     * Update Labor Code
     * This operation updates specified labor code in Paycor&#39;s system.  To make this call you will need the Job Costing or Workforce Management Service.  LaborCodeId is required.  Data Access: Create and Update Labor Codes
     * @param legalEntityId ID of the Legal Entity for which you want to update Labor Code (required)
     * @param laborCode5  (required)
     * @return UpdateSpecifiedLaborCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSpecifiedLaborCodeRequestBuilder updateSpecifiedLaborCode(String laborCodeId, Integer legalEntityId) throws IllegalArgumentException {
        if (laborCodeId == null) throw new IllegalArgumentException("\"laborCodeId\" is required but got null");
            if (laborCodeId != null && laborCodeId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for laborCodeId. Length must be greater than or equal to 1.");
            }

        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new UpdateSpecifiedLaborCodeRequestBuilder(laborCodeId, legalEntityId);
    }
}
