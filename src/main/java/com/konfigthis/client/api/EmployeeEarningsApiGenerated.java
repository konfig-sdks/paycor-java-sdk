/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.EmployeeEarning;
import com.konfigthis.client.model.EmployeeEarning2;
import com.konfigthis.client.model.EmployeeEarning3;
import com.konfigthis.client.model.EmployeeEarningAmount;
import com.konfigthis.client.model.IncludeInPay;
import com.konfigthis.client.model.Includes5;
import com.konfigthis.client.model.Includes6;
import com.konfigthis.client.model.PagedResultOfEmployeeEarning;
import com.konfigthis.client.model.PayFrequency;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeEarningsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeEarningsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeEarningsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewEarningCall(String employeeId, EmployeeEarning2 employeeEarning2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeEarning2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/earnings"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewEarningValidateBeforeCall(String employeeId, EmployeeEarning2 employeeEarning2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addNewEarning(Async)");
        }

        // verify the required parameter 'employeeEarning2' is set
        if (employeeEarning2 == null) {
            throw new ApiException("Missing the required parameter 'employeeEarning2' when calling addNewEarning(Async)");
        }

        return addNewEarningCall(employeeId, employeeEarning2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> addNewEarningWithHttpInfo(String employeeId, EmployeeEarning2 employeeEarning2) throws ApiException {
        okhttp3.Call localVarCall = addNewEarningValidateBeforeCall(employeeId, employeeEarning2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewEarningAsync(String employeeId, EmployeeEarning2 employeeEarning2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewEarningValidateBeforeCall(employeeId, employeeEarning2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewEarningRequestBuilder {
        private final String code;
        private final List<EmployeeEarningAmount> amountData;
        private final String employeeId;
        private PayFrequency frequency;
        private Integer sequenceNumber;
        private IncludeInPay includeInPay;
        private Boolean onHold;

        private AddNewEarningRequestBuilder(String code, List<EmployeeEarningAmount> amountData, String employeeId) {
            this.code = code;
            this.amountData = amountData;
            this.employeeId = employeeId;
        }

        /**
         * Set frequency
         * @param frequency  (optional)
         * @return AddNewEarningRequestBuilder
         */
        public AddNewEarningRequestBuilder frequency(PayFrequency frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set sequenceNumber
         * @param sequenceNumber Order earnings are calculated based on sequence values. This is needed so earnings dependent on other earnings are calculated in the proper sequence. (optional)
         * @return AddNewEarningRequestBuilder
         */
        public AddNewEarningRequestBuilder sequenceNumber(Integer sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Set includeInPay
         * @param includeInPay  (optional)
         * @return AddNewEarningRequestBuilder
         */
        public AddNewEarningRequestBuilder includeInPay(IncludeInPay includeInPay) {
            this.includeInPay = includeInPay;
            return this;
        }
        
        /**
         * Set onHold
         * @param onHold Whether the employee earning should included in a paycheck. This is specified by the &#39;Calculate&#39; checkbox in the Paycor UI.              (optional)
         * @return AddNewEarningRequestBuilder
         */
        public AddNewEarningRequestBuilder onHold(Boolean onHold) {
            this.onHold = onHold;
            return this;
        }
        
        /**
         * Build call for addNewEarning
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeEarning2 employeeEarning2 = buildBodyParams();
            return addNewEarningCall(employeeId, employeeEarning2, _callback);
        }

        private EmployeeEarning2 buildBodyParams() {
            EmployeeEarning2 employeeEarning2 = new EmployeeEarning2();
            employeeEarning2.code(this.code);
            employeeEarning2.frequency(this.frequency);
            employeeEarning2.sequenceNumber(this.sequenceNumber);
            employeeEarning2.includeInPay(this.includeInPay);
            employeeEarning2.onHold(this.onHold);
            employeeEarning2.amountData(this.amountData);
            return employeeEarning2;
        }

        /**
         * Execute addNewEarning request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeEarning2 employeeEarning2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = addNewEarningWithHttpInfo(employeeId, employeeEarning2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewEarning request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeEarning2 employeeEarning2 = buildBodyParams();
            return addNewEarningWithHttpInfo(employeeId, employeeEarning2);
        }

        /**
         * Execute addNewEarning request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeEarning2 employeeEarning2 = buildBodyParams();
            return addNewEarningAsync(employeeId, employeeEarning2, _callback);
        }
    }

    /**
     * Add Earning to Employee
     * Data Access: Add Employee Earning
     * @param employeeId ID of an Employee for whom you want to add an Earning (required)
     * @param employeeEarning2 Employee Earning object to insert (required)
     * @return AddNewEarningRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddNewEarningRequestBuilder addNewEarning(String code, List<EmployeeEarningAmount> amountData, String employeeId) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            if (code != null && code.length() < 1) {
              throw new IllegalArgumentException("Invalid value for code. Length must be greater than or equal to 1.");
            }

        if (amountData == null) throw new IllegalArgumentException("\"amountData\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddNewEarningRequestBuilder(code, amountData, employeeId);
    }
    private okhttp3.Call getByEmployeeAndEarningCall(String employeeId, String employeeEarningId, List<Includes5> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/earnings/{employeeEarningId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "employeeEarningId" + "}", localVarApiClient.escapeString(employeeEarningId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeAndEarningValidateBeforeCall(String employeeId, String employeeEarningId, List<Includes5> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeAndEarning(Async)");
        }

        // verify the required parameter 'employeeEarningId' is set
        if (employeeEarningId == null) {
            throw new ApiException("Missing the required parameter 'employeeEarningId' when calling getByEmployeeAndEarning(Async)");
        }

        return getByEmployeeAndEarningCall(employeeId, employeeEarningId, include, _callback);

    }


    private ApiResponse<EmployeeEarning> getByEmployeeAndEarningWithHttpInfo(String employeeId, String employeeEarningId, List<Includes5> include) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeAndEarningValidateBeforeCall(employeeId, employeeEarningId, include, null);
        Type localVarReturnType = new TypeToken<EmployeeEarning>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeAndEarningAsync(String employeeId, String employeeEarningId, List<Includes5> include, final ApiCallback<EmployeeEarning> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeAndEarningValidateBeforeCall(employeeId, employeeEarningId, include, _callback);
        Type localVarReturnType = new TypeToken<EmployeeEarning>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeAndEarningRequestBuilder {
        private final String employeeId;
        private final String employeeEarningId;
        private List<Includes5> include;

        private GetByEmployeeAndEarningRequestBuilder(String employeeId, String employeeEarningId) {
            this.employeeId = employeeId;
            this.employeeEarningId = employeeEarningId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, AmountData  Data Access required  AmountData &#x3D; View Employee Earning Amounts (optional)
         * @return GetByEmployeeAndEarningRequestBuilder
         */
        public GetByEmployeeAndEarningRequestBuilder include(List<Includes5> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Build call for getByEmployeeAndEarning
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee Earning based on the EmployeeID and EmployeeEarningID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeAndEarningCall(employeeId, employeeEarningId, include, _callback);
        }


        /**
         * Execute getByEmployeeAndEarning request
         * @return EmployeeEarning
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee Earning based on the EmployeeID and EmployeeEarningID provided. </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeEarning execute() throws ApiException {
            ApiResponse<EmployeeEarning> localVarResp = getByEmployeeAndEarningWithHttpInfo(employeeId, employeeEarningId, include);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeAndEarning request with HTTP info returned
         * @return ApiResponse&lt;EmployeeEarning&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee Earning based on the EmployeeID and EmployeeEarningID provided. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeEarning> executeWithHttpInfo() throws ApiException {
            return getByEmployeeAndEarningWithHttpInfo(employeeId, employeeEarningId, include);
        }

        /**
         * Execute getByEmployeeAndEarning request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee Earning based on the EmployeeID and EmployeeEarningID provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeEarning> _callback) throws ApiException {
            return getByEmployeeAndEarningAsync(employeeId, employeeEarningId, include, _callback);
        }
    }

    /**
     * Get Employee Earning by EmployeeID and EmployeeEarningID
     * Data Access: View Employee Earning Information
     * @param employeeId ID of an Employee for whom you want to get the Earning (required)
     * @param employeeEarningId ID of an Employee Earning you want to get (required)
     * @return GetByEmployeeAndEarningRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an Employee Earning based on the EmployeeID and EmployeeEarningID provided. </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeAndEarningRequestBuilder getByEmployeeAndEarning(String employeeId, String employeeEarningId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (employeeEarningId == null) throw new IllegalArgumentException("\"employeeEarningId\" is required but got null");
            

        return new GetByEmployeeAndEarningRequestBuilder(employeeId, employeeEarningId);
    }
    private okhttp3.Call getByEmployeeIdCall(String employeeId, List<Includes6> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/earnings"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(String employeeId, List<Includes6> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, include, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeeEarning> getByEmployeeIdWithHttpInfo(String employeeId, List<Includes6> include, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeEarning>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(String employeeId, List<Includes6> include, String continuationToken, final ApiCallback<PagedResultOfEmployeeEarning> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeEarning>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final String employeeId;
        private List<Includes6> include;
        private String continuationToken;

        private GetByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, AmountData  Data Access required  AmountData &#x3D; View Employee Earnings Amounts (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder include(List<Includes6> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of Employee Earnings (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Earnings based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, include, continuationToken, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return PagedResultOfEmployeeEarning
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Earnings based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeeEarning execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeeEarning> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, include, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeeEarning&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Earnings based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeeEarning> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, include, continuationToken);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of Employee Earnings based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeeEarning> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, include, continuationToken, _callback);
        }
    }

    /**
     * Get Employee Earnings by EmployeeID
     * Data Access: View Employee Earnings Information
     * @param employeeId ID of an Employee for whom you want to get the Earnings (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of Employee Earnings based on EmployeeID provided </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call updateDataCall(String employeeId, EmployeeEarning3 employeeEarning3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeEarning3;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/earnings"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDataValidateBeforeCall(String employeeId, EmployeeEarning3 employeeEarning3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateData(Async)");
        }

        // verify the required parameter 'employeeEarning3' is set
        if (employeeEarning3 == null) {
            throw new ApiException("Missing the required parameter 'employeeEarning3' when calling updateData(Async)");
        }

        return updateDataCall(employeeId, employeeEarning3, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateDataWithHttpInfo(String employeeId, EmployeeEarning3 employeeEarning3) throws ApiException {
        okhttp3.Call localVarCall = updateDataValidateBeforeCall(employeeId, employeeEarning3, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDataAsync(String employeeId, EmployeeEarning3 employeeEarning3, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDataValidateBeforeCall(employeeId, employeeEarning3, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDataRequestBuilder {
        private final String id;
        private final String code;
        private final PayFrequency frequency;
        private final IncludeInPay includeInPay;
        private final Boolean onHold;
        private final List<EmployeeEarningAmount> amountData;
        private final String employeeId;
        private Integer sequenceNumber;

        private UpdateDataRequestBuilder(String id, String code, PayFrequency frequency, IncludeInPay includeInPay, Boolean onHold, List<EmployeeEarningAmount> amountData, String employeeId) {
            this.id = id;
            this.code = code;
            this.frequency = frequency;
            this.includeInPay = includeInPay;
            this.onHold = onHold;
            this.amountData = amountData;
            this.employeeId = employeeId;
        }

        /**
         * Set sequenceNumber
         * @param sequenceNumber Order earnings are calculated based on sequence values. This is needed so earnings dependent on other earnings are calculated in the proper sequence. (optional)
         * @return UpdateDataRequestBuilder
         */
        public UpdateDataRequestBuilder sequenceNumber(Integer sequenceNumber) {
            this.sequenceNumber = sequenceNumber;
            return this;
        }
        
        /**
         * Build call for updateData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeEarning3 employeeEarning3 = buildBodyParams();
            return updateDataCall(employeeId, employeeEarning3, _callback);
        }

        private EmployeeEarning3 buildBodyParams() {
            EmployeeEarning3 employeeEarning3 = new EmployeeEarning3();
            employeeEarning3.id(this.id);
            employeeEarning3.code(this.code);
            employeeEarning3.frequency(this.frequency);
            employeeEarning3.sequenceNumber(this.sequenceNumber);
            employeeEarning3.includeInPay(this.includeInPay);
            employeeEarning3.onHold(this.onHold);
            employeeEarning3.amountData(this.amountData);
            return employeeEarning3;
        }

        /**
         * Execute updateData request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeEarning3 employeeEarning3 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateDataWithHttpInfo(employeeId, employeeEarning3);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateData request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeEarning3 employeeEarning3 = buildBodyParams();
            return updateDataWithHttpInfo(employeeId, employeeEarning3);
        }

        /**
         * Execute updateData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeEarning3 employeeEarning3 = buildBodyParams();
            return updateDataAsync(employeeId, employeeEarning3, _callback);
        }
    }

    /**
     * Update Employee Earning
     * Data Access: Update Employee Earning
     * @param employeeId ID of an Employee that has the Earning you wish to update (required)
     * @param employeeEarning3 Employee Earning object with updated fields (required)
     * @return UpdateDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDataRequestBuilder updateData(String id, String code, PayFrequency frequency, IncludeInPay includeInPay, Boolean onHold, List<EmployeeEarningAmount> amountData, String employeeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            if (code != null && code.length() < 1) {
              throw new IllegalArgumentException("Invalid value for code. Length must be greater than or equal to 1.");
            }

        if (frequency == null) throw new IllegalArgumentException("\"frequency\" is required but got null");
        if (includeInPay == null) throw new IllegalArgumentException("\"includeInPay\" is required but got null");
        if (onHold == null) throw new IllegalArgumentException("\"onHold\" is required but got null");
        if (amountData == null) throw new IllegalArgumentException("\"amountData\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateDataRequestBuilder(id, code, frequency, includeInPay, onHold, amountData, employeeId);
    }
}
