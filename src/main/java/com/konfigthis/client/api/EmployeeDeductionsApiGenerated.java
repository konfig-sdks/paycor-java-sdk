/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.EmployeeDeduction;
import com.konfigthis.client.model.EmployeeDeduction2;
import com.konfigthis.client.model.EmployeeDeduction3;
import com.konfigthis.client.model.EmployeeDeductionAmount2;
import com.konfigthis.client.model.EmployeeDeductionAmount3;
import com.konfigthis.client.model.IncludeInPay;
import com.konfigthis.client.model.Includes3;
import com.konfigthis.client.model.Includes4;
import com.konfigthis.client.model.PagedResultOfEmployeeDeduction;
import com.konfigthis.client.model.PayFrequency;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeDeductionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeDeductionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeDeductionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDeductionToEmployeeCall(String employeeId, EmployeeDeduction2 employeeDeduction2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDeduction2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/deductions"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDeductionToEmployeeValidateBeforeCall(String employeeId, EmployeeDeduction2 employeeDeduction2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addDeductionToEmployee(Async)");
        }

        // verify the required parameter 'employeeDeduction2' is set
        if (employeeDeduction2 == null) {
            throw new ApiException("Missing the required parameter 'employeeDeduction2' when calling addDeductionToEmployee(Async)");
        }

        return addDeductionToEmployeeCall(employeeId, employeeDeduction2, _callback);

    }


    private ApiResponse<List<CreateOrUpdateResponse>> addDeductionToEmployeeWithHttpInfo(String employeeId, EmployeeDeduction2 employeeDeduction2) throws ApiException {
        okhttp3.Call localVarCall = addDeductionToEmployeeValidateBeforeCall(employeeId, employeeDeduction2, null);
        Type localVarReturnType = new TypeToken<List<CreateOrUpdateResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDeductionToEmployeeAsync(String employeeId, EmployeeDeduction2 employeeDeduction2, final ApiCallback<List<CreateOrUpdateResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDeductionToEmployeeValidateBeforeCall(employeeId, employeeDeduction2, _callback);
        Type localVarReturnType = new TypeToken<List<CreateOrUpdateResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddDeductionToEmployeeRequestBuilder {
        private final String code;
        private final String employeeId;
        private Boolean onHold;
        private PayFrequency frequency;
        private IncludeInPay includeInPay;
        private List<EmployeeDeductionAmount2> amountData;

        private AddDeductionToEmployeeRequestBuilder(String code, String employeeId) {
            this.code = code;
            this.employeeId = employeeId;
        }

        /**
         * Set onHold
         * @param onHold Specifies whether the deduction should be deducted in a paycheck.              (optional)
         * @return AddDeductionToEmployeeRequestBuilder
         */
        public AddDeductionToEmployeeRequestBuilder onHold(Boolean onHold) {
            this.onHold = onHold;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency  (optional)
         * @return AddDeductionToEmployeeRequestBuilder
         */
        public AddDeductionToEmployeeRequestBuilder frequency(PayFrequency frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set includeInPay
         * @param includeInPay  (optional)
         * @return AddDeductionToEmployeeRequestBuilder
         */
        public AddDeductionToEmployeeRequestBuilder includeInPay(IncludeInPay includeInPay) {
            this.includeInPay = includeInPay;
            return this;
        }
        
        /**
         * Set amountData
         * @param amountData Specifies the rate and amount for the employee deduction.              (optional)
         * @return AddDeductionToEmployeeRequestBuilder
         */
        public AddDeductionToEmployeeRequestBuilder amountData(List<EmployeeDeductionAmount2> amountData) {
            this.amountData = amountData;
            return this;
        }
        
        /**
         * Build call for addDeductionToEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDeduction2 employeeDeduction2 = buildBodyParams();
            return addDeductionToEmployeeCall(employeeId, employeeDeduction2, _callback);
        }

        private EmployeeDeduction2 buildBodyParams() {
            EmployeeDeduction2 employeeDeduction2 = new EmployeeDeduction2();
            employeeDeduction2.code(this.code);
            employeeDeduction2.onHold(this.onHold);
            employeeDeduction2.frequency(this.frequency);
            employeeDeduction2.includeInPay(this.includeInPay);
            employeeDeduction2.amountData(this.amountData);
            return employeeDeduction2;
        }

        /**
         * Execute addDeductionToEmployee request
         * @return List&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public List<CreateOrUpdateResponse> execute() throws ApiException {
            EmployeeDeduction2 employeeDeduction2 = buildBodyParams();
            ApiResponse<List<CreateOrUpdateResponse>> localVarResp = addDeductionToEmployeeWithHttpInfo(employeeId, employeeDeduction2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addDeductionToEmployee request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CreateOrUpdateResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CreateOrUpdateResponse>> executeWithHttpInfo() throws ApiException {
            EmployeeDeduction2 employeeDeduction2 = buildBodyParams();
            return addDeductionToEmployeeWithHttpInfo(employeeId, employeeDeduction2);
        }

        /**
         * Execute addDeductionToEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CreateOrUpdateResponse>> _callback) throws ApiException {
            EmployeeDeduction2 employeeDeduction2 = buildBodyParams();
            return addDeductionToEmployeeAsync(employeeId, employeeDeduction2, _callback);
        }
    }

    /**
     * Add Deduction to Employee
     * Tip: first call \&quot;Get Legal Entity Deductions by Legal Entity ID\&quot; to get the valid Deduction Codes  Data Access: Add Employee Deduction
     * @param employeeId ID of an Employee for whom you want to add the deduction (required)
     * @param employeeDeduction2 EmployeeDeduction object (required)
     * @return AddDeductionToEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddDeductionToEmployeeRequestBuilder addDeductionToEmployee(String code, String employeeId) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            if (code != null && code.length() < 1) {
              throw new IllegalArgumentException("Invalid value for code. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddDeductionToEmployeeRequestBuilder(code, employeeId);
    }
    private okhttp3.Call getByEmployeeIdCall(String employeeId, List<Includes4> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/deductions"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdValidateBeforeCall(String employeeId, List<Includes4> include, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeId(Async)");
        }

        return getByEmployeeIdCall(employeeId, include, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeeDeduction> getByEmployeeIdWithHttpInfo(String employeeId, List<Includes4> include, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeDeduction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAsync(String employeeId, List<Includes4> include, String continuationToken, final ApiCallback<PagedResultOfEmployeeDeduction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdValidateBeforeCall(employeeId, include, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeDeduction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdRequestBuilder {
        private final String employeeId;
        private List<Includes4> include;
        private String continuationToken;

        private GetByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, AmountData  Data Access required  AmountData &#x3D; View Employee Deductions Amounts (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder include(List<Includes4> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of employee earnings (optional)
         * @return GetByEmployeeIdRequestBuilder
         */
        public GetByEmployeeIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of employee deductions based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdCall(employeeId, include, continuationToken, _callback);
        }


        /**
         * Execute getByEmployeeId request
         * @return PagedResultOfEmployeeDeduction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of employee deductions based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeeDeduction execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeeDeduction> localVarResp = getByEmployeeIdWithHttpInfo(employeeId, include, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeeDeduction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of employee deductions based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeeDeduction> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdWithHttpInfo(employeeId, include, continuationToken);
        }

        /**
         * Execute getByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a collection of employee deductions based on EmployeeID provided </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeeDeduction> _callback) throws ApiException {
            return getByEmployeeIdAsync(employeeId, include, continuationToken, _callback);
        }
    }

    /**
     * Get Employee Deductions by EmployeeID
     * Data Access: View Employee Deductions Information
     * @param employeeId ID of the employee for whom you want to get the deductions (required)
     * @return GetByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a collection of employee deductions based on EmployeeID provided </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdRequestBuilder getByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call getByEmployeeIdAndDeductionIdCall(String employeeId, String employeeDeductionId, List<Includes3> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/deductions/{employeeDeductionId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "employeeDeductionId" + "}", localVarApiClient.escapeString(employeeDeductionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeIdAndDeductionIdValidateBeforeCall(String employeeId, String employeeDeductionId, List<Includes3> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployeeIdAndDeductionId(Async)");
        }

        // verify the required parameter 'employeeDeductionId' is set
        if (employeeDeductionId == null) {
            throw new ApiException("Missing the required parameter 'employeeDeductionId' when calling getByEmployeeIdAndDeductionId(Async)");
        }

        return getByEmployeeIdAndDeductionIdCall(employeeId, employeeDeductionId, include, _callback);

    }


    private ApiResponse<EmployeeDeduction> getByEmployeeIdAndDeductionIdWithHttpInfo(String employeeId, String employeeDeductionId, List<Includes3> include) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeIdAndDeductionIdValidateBeforeCall(employeeId, employeeDeductionId, include, null);
        Type localVarReturnType = new TypeToken<EmployeeDeduction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeIdAndDeductionIdAsync(String employeeId, String employeeDeductionId, List<Includes3> include, final ApiCallback<EmployeeDeduction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeIdAndDeductionIdValidateBeforeCall(employeeId, employeeDeductionId, include, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDeduction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeIdAndDeductionIdRequestBuilder {
        private final String employeeId;
        private final String employeeDeductionId;
        private List<Includes3> include;

        private GetByEmployeeIdAndDeductionIdRequestBuilder(String employeeId, String employeeDeductionId) {
            this.employeeId = employeeId;
            this.employeeDeductionId = employeeDeductionId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, AmountData  Data Access required  AmountData &#x3D; View Employee Deduction Amounts (optional)
         * @return GetByEmployeeIdAndDeductionIdRequestBuilder
         */
        public GetByEmployeeIdAndDeductionIdRequestBuilder include(List<Includes3> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Build call for getByEmployeeIdAndDeductionId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee Deduction based on the EmployeeID and DeductionID provided.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeIdAndDeductionIdCall(employeeId, employeeDeductionId, include, _callback);
        }


        /**
         * Execute getByEmployeeIdAndDeductionId request
         * @return EmployeeDeduction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee Deduction based on the EmployeeID and DeductionID provided.  </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeDeduction execute() throws ApiException {
            ApiResponse<EmployeeDeduction> localVarResp = getByEmployeeIdAndDeductionIdWithHttpInfo(employeeId, employeeDeductionId, include);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployeeIdAndDeductionId request with HTTP info returned
         * @return ApiResponse&lt;EmployeeDeduction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee Deduction based on the EmployeeID and DeductionID provided.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeDeduction> executeWithHttpInfo() throws ApiException {
            return getByEmployeeIdAndDeductionIdWithHttpInfo(employeeId, employeeDeductionId, include);
        }

        /**
         * Execute getByEmployeeIdAndDeductionId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Employee Deduction based on the EmployeeID and DeductionID provided.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeDeduction> _callback) throws ApiException {
            return getByEmployeeIdAndDeductionIdAsync(employeeId, employeeDeductionId, include, _callback);
        }
    }

    /**
     * Get Employee Deduction by EmployeeID and EmployeeDeductionID
     * Data Access: View Employee Deduction Information
     * @param employeeId ID of an Employee for whom you want to get the deduction. (required)
     * @param employeeDeductionId ID of the Employee Deduction you want to get. (required)
     * @return GetByEmployeeIdAndDeductionIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an Employee Deduction based on the EmployeeID and DeductionID provided.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeIdAndDeductionIdRequestBuilder getByEmployeeIdAndDeductionId(String employeeId, String employeeDeductionId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (employeeDeductionId == null) throw new IllegalArgumentException("\"employeeDeductionId\" is required but got null");
            

        return new GetByEmployeeIdAndDeductionIdRequestBuilder(employeeId, employeeDeductionId);
    }
    private okhttp3.Call updateByEmployeeIdCall(String employeeId, EmployeeDeduction3 employeeDeduction3, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeDeduction3;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/deductions"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByEmployeeIdValidateBeforeCall(String employeeId, EmployeeDeduction3 employeeDeduction3, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateByEmployeeId(Async)");
        }

        // verify the required parameter 'employeeDeduction3' is set
        if (employeeDeduction3 == null) {
            throw new ApiException("Missing the required parameter 'employeeDeduction3' when calling updateByEmployeeId(Async)");
        }

        return updateByEmployeeIdCall(employeeId, employeeDeduction3, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateByEmployeeIdWithHttpInfo(String employeeId, EmployeeDeduction3 employeeDeduction3) throws ApiException {
        okhttp3.Call localVarCall = updateByEmployeeIdValidateBeforeCall(employeeId, employeeDeduction3, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByEmployeeIdAsync(String employeeId, EmployeeDeduction3 employeeDeduction3, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByEmployeeIdValidateBeforeCall(employeeId, employeeDeduction3, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByEmployeeIdRequestBuilder {
        private final String id;
        private final String employeeId;
        private IncludeInPay includeInPay;
        private PayFrequency frequency;
        private Boolean onHold;
        private List<EmployeeDeductionAmount3> amountData;

        private UpdateByEmployeeIdRequestBuilder(String id, String employeeId) {
            this.id = id;
            this.employeeId = employeeId;
        }

        /**
         * Set includeInPay
         * @param includeInPay  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder includeInPay(IncludeInPay includeInPay) {
            this.includeInPay = includeInPay;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency  (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder frequency(PayFrequency frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set onHold
         * @param onHold Specifies whether the deduction should be deducted in a paycheck. Required, defaults to false (meaning it should be deducted).              (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder onHold(Boolean onHold) {
            this.onHold = onHold;
            return this;
        }
        
        /**
         * Set amountData
         * @param amountData Specifies the rate and amount for the employee deduction.              (optional)
         * @return UpdateByEmployeeIdRequestBuilder
         */
        public UpdateByEmployeeIdRequestBuilder amountData(List<EmployeeDeductionAmount3> amountData) {
            this.amountData = amountData;
            return this;
        }
        
        /**
         * Build call for updateByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeDeduction3 employeeDeduction3 = buildBodyParams();
            return updateByEmployeeIdCall(employeeId, employeeDeduction3, _callback);
        }

        private EmployeeDeduction3 buildBodyParams() {
            EmployeeDeduction3 employeeDeduction3 = new EmployeeDeduction3();
            employeeDeduction3.id(this.id);
            employeeDeduction3.includeInPay(this.includeInPay);
            employeeDeduction3.frequency(this.frequency);
            employeeDeduction3.onHold(this.onHold);
            employeeDeduction3.amountData(this.amountData);
            return employeeDeduction3;
        }

        /**
         * Execute updateByEmployeeId request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeDeduction3 employeeDeduction3 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateByEmployeeIdWithHttpInfo(employeeId, employeeDeduction3);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeDeduction3 employeeDeduction3 = buildBodyParams();
            return updateByEmployeeIdWithHttpInfo(employeeId, employeeDeduction3);
        }

        /**
         * Execute updateByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeDeduction3 employeeDeduction3 = buildBodyParams();
            return updateByEmployeeIdAsync(employeeId, employeeDeduction3, _callback);
        }
    }

    /**
     * Update Employee Deduction by EmployeeID
     * Data Access: Update Employee Deduction
     * @param employeeId ID of an Employee that has the Deduction you wish to update (required)
     * @param employeeDeduction3 EmployeeDeduction with ID set and fields updated (required)
     * @return UpdateByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByEmployeeIdRequestBuilder updateByEmployeeId(String id, String employeeId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            if (id != null && id.length() < 1) {
              throw new IllegalArgumentException("Invalid value for id. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateByEmployeeIdRequestBuilder(id, employeeId);
    }
}
