/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ATSAccount;
import com.konfigthis.client.model.Includes;
import com.konfigthis.client.model.Includes2;
import com.konfigthis.client.model.Job;
import com.konfigthis.client.model.JobStatus;
import com.konfigthis.client.model.PagedResultOfJob;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicantTrackingSystemApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicantTrackingSystemApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicantTrackingSystemApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAccountJobsCall(Integer legalEntityId, String atsAccountId, List<Includes> include, Boolean postedToCareers, JobStatus status, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalEntities/{legalEntityId}/ats/{atsAccountId}/jobs"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()))
            .replace("{" + "atsAccountId" + "}", localVarApiClient.escapeString(atsAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (postedToCareers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postedToCareers", postedToCareers));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountJobsValidateBeforeCall(Integer legalEntityId, String atsAccountId, List<Includes> include, Boolean postedToCareers, JobStatus status, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getAccountJobs(Async)");
        }

        // verify the required parameter 'atsAccountId' is set
        if (atsAccountId == null) {
            throw new ApiException("Missing the required parameter 'atsAccountId' when calling getAccountJobs(Async)");
        }

        return getAccountJobsCall(legalEntityId, atsAccountId, include, postedToCareers, status, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfJob> getAccountJobsWithHttpInfo(Integer legalEntityId, String atsAccountId, List<Includes> include, Boolean postedToCareers, JobStatus status, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getAccountJobsValidateBeforeCall(legalEntityId, atsAccountId, include, postedToCareers, status, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfJob>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountJobsAsync(Integer legalEntityId, String atsAccountId, List<Includes> include, Boolean postedToCareers, JobStatus status, String continuationToken, final ApiCallback<PagedResultOfJob> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountJobsValidateBeforeCall(legalEntityId, atsAccountId, include, postedToCareers, status, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfJob>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountJobsRequestBuilder {
        private final Integer legalEntityId;
        private final String atsAccountId;
        private List<Includes> include;
        private Boolean postedToCareers;
        private JobStatus status;
        private String continuationToken;

        private GetAccountJobsRequestBuilder(Integer legalEntityId, String atsAccountId) {
            this.legalEntityId = legalEntityId;
            this.atsAccountId = atsAccountId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, Hiring managers, Recruiters, Team members, Executives (optional)
         * @return GetAccountJobsRequestBuilder
         */
        public GetAccountJobsRequestBuilder include(List<Includes> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Set postedToCareers
         * @param postedToCareers Option to filter jobs based on if they are posted to the careers page (optional)
         * @return GetAccountJobsRequestBuilder
         */
        public GetAccountJobsRequestBuilder postedToCareers(Boolean postedToCareers) {
            this.postedToCareers = postedToCareers;
            return this;
        }
        
        /**
         * Set status
         * @param status Option to filter jobs by status (optional)
         * @return GetAccountJobsRequestBuilder
         */
        public GetAccountJobsRequestBuilder status(JobStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set continuationToken
         * @param continuationToken  (optional)
         * @return GetAccountJobsRequestBuilder
         */
        public GetAccountJobsRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getAccountJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of ATS Account jobs for ATS Account Id </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountJobsCall(legalEntityId, atsAccountId, include, postedToCareers, status, continuationToken, _callback);
        }


        /**
         * Execute getAccountJobs request
         * @return PagedResultOfJob
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of ATS Account jobs for ATS Account Id </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfJob execute() throws ApiException {
            ApiResponse<PagedResultOfJob> localVarResp = getAccountJobsWithHttpInfo(legalEntityId, atsAccountId, include, postedToCareers, status, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccountJobs request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfJob&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of ATS Account jobs for ATS Account Id </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfJob> executeWithHttpInfo() throws ApiException {
            return getAccountJobsWithHttpInfo(legalEntityId, atsAccountId, include, postedToCareers, status, continuationToken);
        }

        /**
         * Execute getAccountJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of ATS Account jobs for ATS Account Id </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfJob> _callback) throws ApiException {
            return getAccountJobsAsync(legalEntityId, atsAccountId, include, postedToCareers, status, continuationToken, _callback);
        }
    }

    /**
     * Get a list of ATS Account jobs for ATS Account Id
     * Data Access: View ATS Account jobs by ATS Account ID
     * @param legalEntityId Paycor Legal Entity ID of the legal entity for which you want to get the ATS account jobs (required)
     * @param atsAccountId ATS account ID of for which you want to get the ATS account jobs (required)
     * @return GetAccountJobsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of ATS Account jobs for ATS Account Id </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountJobsRequestBuilder getAccountJobs(Integer legalEntityId, String atsAccountId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        
            

        return new GetAccountJobsRequestBuilder(legalEntityId, atsAccountId);
    }
    private okhttp3.Call getJobByJobIdCall(Integer legalEntityId, String atsAccountId, String atsJobId, List<Includes2> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalEntities/{legalEntityId}/ats/{atsAccountId}/jobs/{atsJobId}"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()))
            .replace("{" + "atsAccountId" + "}", localVarApiClient.escapeString(atsAccountId.toString()))
            .replace("{" + "atsJobId" + "}", localVarApiClient.escapeString(atsJobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobByJobIdValidateBeforeCall(Integer legalEntityId, String atsAccountId, String atsJobId, List<Includes2> include, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling getJobByJobId(Async)");
        }

        // verify the required parameter 'atsAccountId' is set
        if (atsAccountId == null) {
            throw new ApiException("Missing the required parameter 'atsAccountId' when calling getJobByJobId(Async)");
        }

        // verify the required parameter 'atsJobId' is set
        if (atsJobId == null) {
            throw new ApiException("Missing the required parameter 'atsJobId' when calling getJobByJobId(Async)");
        }

        return getJobByJobIdCall(legalEntityId, atsAccountId, atsJobId, include, _callback);

    }


    private ApiResponse<Job> getJobByJobIdWithHttpInfo(Integer legalEntityId, String atsAccountId, String atsJobId, List<Includes2> include) throws ApiException {
        okhttp3.Call localVarCall = getJobByJobIdValidateBeforeCall(legalEntityId, atsAccountId, atsJobId, include, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJobByJobIdAsync(Integer legalEntityId, String atsAccountId, String atsJobId, List<Includes2> include, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobByJobIdValidateBeforeCall(legalEntityId, atsAccountId, atsJobId, include, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJobByJobIdRequestBuilder {
        private final Integer legalEntityId;
        private final String atsAccountId;
        private final String atsJobId;
        private List<Includes2> include;

        private GetJobByJobIdRequestBuilder(Integer legalEntityId, String atsAccountId, String atsJobId) {
            this.legalEntityId = legalEntityId;
            this.atsAccountId = atsAccountId;
            this.atsJobId = atsJobId;
        }

        /**
         * Set include
         * @param include Options to include more data: All, Hiring managers, Recruiters, Team members, Executives (optional)
         * @return GetJobByJobIdRequestBuilder
         */
        public GetJobByJobIdRequestBuilder include(List<Includes2> include) {
            this.include = include;
            return this;
        }
        
        /**
         * Build call for getJobByJobId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Account job for an ATS Account Id </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJobByJobIdCall(legalEntityId, atsAccountId, atsJobId, include, _callback);
        }


        /**
         * Execute getJobByJobId request
         * @return Job
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Account job for an ATS Account Id </td><td>  -  </td></tr>
         </table>
         */
        public Job execute() throws ApiException {
            ApiResponse<Job> localVarResp = getJobByJobIdWithHttpInfo(legalEntityId, atsAccountId, atsJobId, include);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJobByJobId request with HTTP info returned
         * @return ApiResponse&lt;Job&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Account job for an ATS Account Id </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Job> executeWithHttpInfo() throws ApiException {
            return getJobByJobIdWithHttpInfo(legalEntityId, atsAccountId, atsJobId, include);
        }

        /**
         * Execute getJobByJobId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns an Account job for an ATS Account Id </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Job> _callback) throws ApiException {
            return getJobByJobIdAsync(legalEntityId, atsAccountId, atsJobId, include, _callback);
        }
    }

    /**
     * Get an ATS Account Job for ATS Account Id
     * Data Access: View ATS Account Job by ATS Job Id
     * @param legalEntityId Paycor Legal Entity ID of the legal entity for which you want to get the ATS account job (required)
     * @param atsAccountId ATS account ID of for which you want to get the ATS account job (required)
     * @param atsJobId ATS Job ID (required)
     * @return GetJobByJobIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns an Account job for an ATS Account Id </td><td>  -  </td></tr>
     </table>
     */
    public GetJobByJobIdRequestBuilder getJobByJobId(Integer legalEntityId, String atsAccountId, String atsJobId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        
            

        
            

        return new GetJobByJobIdRequestBuilder(legalEntityId, atsAccountId, atsJobId);
    }
    private okhttp3.Call listAtsAccountsByLegalEntityCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalEntities/{legalEntityId}/ats/accounts"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAtsAccountsByLegalEntityValidateBeforeCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling listAtsAccountsByLegalEntity(Async)");
        }

        return listAtsAccountsByLegalEntityCall(legalEntityId, continuationToken, _callback);

    }


    private ApiResponse<ATSAccount> listAtsAccountsByLegalEntityWithHttpInfo(Integer legalEntityId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listAtsAccountsByLegalEntityValidateBeforeCall(legalEntityId, continuationToken, null);
        Type localVarReturnType = new TypeToken<ATSAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAtsAccountsByLegalEntityAsync(Integer legalEntityId, String continuationToken, final ApiCallback<ATSAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAtsAccountsByLegalEntityValidateBeforeCall(legalEntityId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<ATSAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAtsAccountsByLegalEntityRequestBuilder {
        private final Integer legalEntityId;
        private String continuationToken;

        private ListAtsAccountsByLegalEntityRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set continuationToken
         * @param continuationToken  (optional)
         * @return ListAtsAccountsByLegalEntityRequestBuilder
         */
        public ListAtsAccountsByLegalEntityRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listAtsAccountsByLegalEntity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of ATS Accounts for Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAtsAccountsByLegalEntityCall(legalEntityId, continuationToken, _callback);
        }


        /**
         * Execute listAtsAccountsByLegalEntity request
         * @return ATSAccount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of ATS Accounts for Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public ATSAccount execute() throws ApiException {
            ApiResponse<ATSAccount> localVarResp = listAtsAccountsByLegalEntityWithHttpInfo(legalEntityId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAtsAccountsByLegalEntity request with HTTP info returned
         * @return ApiResponse&lt;ATSAccount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of ATS Accounts for Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ATSAccount> executeWithHttpInfo() throws ApiException {
            return listAtsAccountsByLegalEntityWithHttpInfo(legalEntityId, continuationToken);
        }

        /**
         * Execute listAtsAccountsByLegalEntity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of ATS Accounts for Legal Entity </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ATSAccount> _callback) throws ApiException {
            return listAtsAccountsByLegalEntityAsync(legalEntityId, continuationToken, _callback);
        }
    }

    /**
     * Get a list of ATS Accounts for Legal Entity
     * Data Access: View ATS Accounts By Legal Entity Id
     * @param legalEntityId Paycor Legal Entity ID of the legal entity for which you want to get the ATS accounts (required)
     * @return ListAtsAccountsByLegalEntityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of ATS Accounts for Legal Entity </td><td>  -  </td></tr>
     </table>
     */
    public ListAtsAccountsByLegalEntityRequestBuilder listAtsAccountsByLegalEntity(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new ListAtsAccountsByLegalEntityRequestBuilder(legalEntityId);
    }
}
