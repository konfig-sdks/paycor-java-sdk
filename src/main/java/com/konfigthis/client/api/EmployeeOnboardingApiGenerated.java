/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.DisabilityStatus;
import com.konfigthis.client.model.EthnicityType;
import com.konfigthis.client.model.Gender;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedResultOfOnboardingEmployee;
import com.konfigthis.client.model.SimpleHire;
import com.konfigthis.client.model.VeteranStatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeOnboardingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeOnboardingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeOnboardingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewEntryCall(SimpleHire simpleHire, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simpleHire;

        // create path and map variables
        String localVarPath = "/v1/employees/onboarding";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewEntryValidateBeforeCall(SimpleHire simpleHire, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simpleHire' is set
        if (simpleHire == null) {
            throw new ApiException("Missing the required parameter 'simpleHire' when calling addNewEntry(Async)");
        }

        return addNewEntryCall(simpleHire, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> addNewEntryWithHttpInfo(SimpleHire simpleHire) throws ApiException {
        okhttp3.Call localVarCall = addNewEntryValidateBeforeCall(simpleHire, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewEntryAsync(SimpleHire simpleHire, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewEntryValidateBeforeCall(simpleHire, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewEntryRequestBuilder {
        private final Integer legalEntityId;
        private final String firstName;
        private final String lastName;
        private final String homeEmailAddress;
        private String exportedByEmailAddress;
        private String preferredName;
        private String countryCode;
        private String zip;
        private String state;
        private String city;
        private String address1;
        private String address2;
        private String mobilePhone;
        private String homePhone;
        private Gender gender;
        private EthnicityType ethnicity;
        private VeteranStatus veteranStatus;
        private OffsetDateTime startDate;
        private String jobTitle;
        private String departmentCode;
        private DisabilityStatus disability;
        private Double baseSalary;
        private String salaryFrequency;
        private String workLocationId;

        private AddNewEntryRequestBuilder(Integer legalEntityId, String firstName, String lastName, String homeEmailAddress) {
            this.legalEntityId = legalEntityId;
            this.firstName = firstName;
            this.lastName = lastName;
            this.homeEmailAddress = homeEmailAddress;
        }

        /**
         * Set exportedByEmailAddress
         * @param exportedByEmailAddress Email of the user exporting records (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder exportedByEmailAddress(String exportedByEmailAddress) {
            this.exportedByEmailAddress = exportedByEmailAddress;
            return this;
        }
        
        /**
         * Set preferredName
         * @param preferredName Preferred Name of the Person              (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder preferredName(String preferredName) {
            this.preferredName = preferredName;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode Country in the address.              (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set zip
         * @param zip Zip code in the address.              (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder zip(String zip) {
            this.zip = zip;
            return this;
        }
        
        /**
         * Set state
         * @param state State in the address.              (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder state(String state) {
            this.state = state;
            return this;
        }
        
        /**
         * Set city
         * @param city City in the address.              (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder city(String city) {
            this.city = city;
            return this;
        }
        
        /**
         * Set address1
         * @param address1 First line of street address information.              (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder address1(String address1) {
            this.address1 = address1;
            return this;
        }
        
        /**
         * Set address2
         * @param address2 Additional line of street address information.              (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder address2(String address2) {
            this.address2 = address2;
            return this;
        }
        
        /**
         * Set mobilePhone
         * @param mobilePhone Mobile phone number.  (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder mobilePhone(String mobilePhone) {
            this.mobilePhone = mobilePhone;
            return this;
        }
        
        /**
         * Set homePhone
         * @param homePhone Home phone number.  (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder homePhone(String homePhone) {
            this.homePhone = homePhone;
            return this;
        }
        
        /**
         * Set gender
         * @param gender  (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder gender(Gender gender) {
            this.gender = gender;
            return this;
        }
        
        /**
         * Set ethnicity
         * @param ethnicity  (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder ethnicity(EthnicityType ethnicity) {
            this.ethnicity = ethnicity;
            return this;
        }
        
        /**
         * Set veteranStatus
         * @param veteranStatus  (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder veteranStatus(VeteranStatus veteranStatus) {
            this.veteranStatus = veteranStatus;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Date the employement start. Format: YYYY-MM-DDTHH:MM:SSZ  (ISO-8601 standard)               (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle Name of the Job Title to associate with new hire.              (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set departmentCode
         * @param departmentCode Code of the department in Paycor&#39;s system.  Can be retrieved by calling &#39;Get Legal Entity Departments by Legal Entity ID&#39; (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder departmentCode(String departmentCode) {
            this.departmentCode = departmentCode;
            return this;
        }
        
        /**
         * Set disability
         * @param disability  (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder disability(DisabilityStatus disability) {
            this.disability = disability;
            return this;
        }
        
        /**
         * Set baseSalary
         * @param baseSalary Base Salary of new hire employee (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder baseSalary(Double baseSalary) {
            this.baseSalary = baseSalary;
            return this;
        }
        

        /**
         * Set baseSalary
         * @param baseSalary Base Salary of new hire employee (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder baseSalary(Integer baseSalary) {
            this.baseSalary = baseSalary.doubleValue();
            return this;
        }
        
        /**
         * Set salaryFrequency
         * @param salaryFrequency Salary Frequency of new hire employee (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder salaryFrequency(String salaryFrequency) {
            this.salaryFrequency = salaryFrequency;
            return this;
        }
        
        /**
         * Set workLocationId
         * @param workLocationId Worklocation Id of new hire employee (optional)
         * @return AddNewEntryRequestBuilder
         */
        public AddNewEntryRequestBuilder workLocationId(String workLocationId) {
            this.workLocationId = workLocationId;
            return this;
        }
        
        /**
         * Build call for addNewEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SimpleHire simpleHire = buildBodyParams();
            return addNewEntryCall(simpleHire, _callback);
        }

        private SimpleHire buildBodyParams() {
            SimpleHire simpleHire = new SimpleHire();
            simpleHire.legalEntityId(this.legalEntityId);
            simpleHire.exportedByEmailAddress(this.exportedByEmailAddress);
            simpleHire.firstName(this.firstName);
            simpleHire.lastName(this.lastName);
            simpleHire.preferredName(this.preferredName);
            simpleHire.countryCode(this.countryCode);
            simpleHire.zip(this.zip);
            simpleHire.state(this.state);
            simpleHire.city(this.city);
            simpleHire.address1(this.address1);
            simpleHire.address2(this.address2);
            simpleHire.mobilePhone(this.mobilePhone);
            simpleHire.homePhone(this.homePhone);
            simpleHire.homeEmailAddress(this.homeEmailAddress);
            simpleHire.gender(this.gender);
            simpleHire.ethnicity(this.ethnicity);
            simpleHire.veteranStatus(this.veteranStatus);
            simpleHire.startDate(this.startDate);
            simpleHire.jobTitle(this.jobTitle);
            simpleHire.departmentCode(this.departmentCode);
            simpleHire.disability(this.disability);
            simpleHire.baseSalary(this.baseSalary);
            simpleHire.salaryFrequency(this.salaryFrequency);
            simpleHire.workLocationId(this.workLocationId);
            return simpleHire;
        }

        /**
         * Execute addNewEntry request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            SimpleHire simpleHire = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = addNewEntryWithHttpInfo(simpleHire);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewEntry request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            SimpleHire simpleHire = buildBodyParams();
            return addNewEntryWithHttpInfo(simpleHire);
        }

        /**
         * Execute addNewEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            SimpleHire simpleHire = buildBodyParams();
            return addNewEntryAsync(simpleHire, _callback);
        }
    }

    /**
     * Create Employee Onboarding
     * This will allow partners to add a new employee entry for pending hire  Data Access: Create Employee Onboarding
     * @param simpleHire  (required)
     * @return AddNewEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Returns a CreateOrUpdateResponse object. </td><td>  -  </td></tr>
     </table>
     */
    public AddNewEntryRequestBuilder addNewEntry(Integer legalEntityId, String firstName, String lastName, String homeEmailAddress) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            if (firstName != null && firstName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
            }

        if (lastName == null) throw new IllegalArgumentException("\"lastName\" is required but got null");
            if (lastName != null && lastName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
            }

        if (homeEmailAddress == null) throw new IllegalArgumentException("\"homeEmailAddress\" is required but got null");
            if (homeEmailAddress != null && homeEmailAddress.length() < 1) {
              throw new IllegalArgumentException("Invalid value for homeEmailAddress. Length must be greater than or equal to 1.");
            }

        return new AddNewEntryRequestBuilder(legalEntityId, firstName, lastName, homeEmailAddress);
    }
    private okhttp3.Call listOnboardingEmployeesCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/legalentities/{legalEntityId}/onboardingemployees"
            .replace("{" + "legalEntityId" + "}", localVarApiClient.escapeString(legalEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOnboardingEmployeesValidateBeforeCall(Integer legalEntityId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'legalEntityId' is set
        if (legalEntityId == null) {
            throw new ApiException("Missing the required parameter 'legalEntityId' when calling listOnboardingEmployees(Async)");
        }

        return listOnboardingEmployeesCall(legalEntityId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfOnboardingEmployee> listOnboardingEmployeesWithHttpInfo(Integer legalEntityId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listOnboardingEmployeesValidateBeforeCall(legalEntityId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfOnboardingEmployee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOnboardingEmployeesAsync(Integer legalEntityId, String continuationToken, final ApiCallback<PagedResultOfOnboardingEmployee> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOnboardingEmployeesValidateBeforeCall(legalEntityId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfOnboardingEmployee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOnboardingEmployeesRequestBuilder {
        private final Integer legalEntityId;
        private String continuationToken;

        private ListOnboardingEmployeesRequestBuilder(Integer legalEntityId) {
            this.legalEntityId = legalEntityId;
        }

        /**
         * Set continuationToken
         * @param continuationToken Token to get next set of Onboarding Employee records (optional)
         * @return ListOnboardingEmployeesRequestBuilder
         */
        public ListOnboardingEmployeesRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listOnboardingEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paged list of Onboarding Employee items. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOnboardingEmployeesCall(legalEntityId, continuationToken, _callback);
        }


        /**
         * Execute listOnboardingEmployees request
         * @return PagedResultOfOnboardingEmployee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paged list of Onboarding Employee items. </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfOnboardingEmployee execute() throws ApiException {
            ApiResponse<PagedResultOfOnboardingEmployee> localVarResp = listOnboardingEmployeesWithHttpInfo(legalEntityId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOnboardingEmployees request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfOnboardingEmployee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paged list of Onboarding Employee items. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfOnboardingEmployee> executeWithHttpInfo() throws ApiException {
            return listOnboardingEmployeesWithHttpInfo(legalEntityId, continuationToken);
        }

        /**
         * Execute listOnboardingEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a paged list of Onboarding Employee items. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfOnboardingEmployee> _callback) throws ApiException {
            return listOnboardingEmployeesAsync(legalEntityId, continuationToken, _callback);
        }
    }

    /**
     * Get employees in the onboarding state
     * This endpoint allows partners to see the employees in the onboarding state.  Data Access: View Legal Entity Onboarding Employees
     * @param legalEntityId ID of the legal entity for which you want to get the employees in the onboarding state (required)
     * @return ListOnboardingEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a paged list of Onboarding Employee items. </td><td>  -  </td></tr>
     </table>
     */
    public ListOnboardingEmployeesRequestBuilder listOnboardingEmployees(Integer legalEntityId) throws IllegalArgumentException {
        if (legalEntityId == null) throw new IllegalArgumentException("\"legalEntityId\" is required but got null");
        return new ListOnboardingEmployeesRequestBuilder(legalEntityId);
    }
}
