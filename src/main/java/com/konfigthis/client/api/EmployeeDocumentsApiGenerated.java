/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedResultOfPayStubFile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeDocumentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeDocumentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeDocumentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call downloadPayStubCall(String employeeId, String documentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/PayStubDocument/{documentId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "documentId" + "}", localVarApiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadPayStubValidateBeforeCall(String employeeId, String documentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling downloadPayStub(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling downloadPayStub(Async)");
        }

        return downloadPayStubCall(employeeId, documentId, _callback);

    }


    private ApiResponse<File> downloadPayStubWithHttpInfo(String employeeId, String documentId) throws ApiException {
        okhttp3.Call localVarCall = downloadPayStubValidateBeforeCall(employeeId, documentId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadPayStubAsync(String employeeId, String documentId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadPayStubValidateBeforeCall(employeeId, documentId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadPayStubRequestBuilder {
        private final String employeeId;
        private final String documentId;

        private DownloadPayStubRequestBuilder(String employeeId, String documentId) {
            this.employeeId = employeeId;
            this.documentId = documentId;
        }

        /**
         * Build call for downloadPayStub
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Pay Stub Document that can be downloaded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadPayStubCall(employeeId, documentId, _callback);
        }


        /**
         * Execute downloadPayStub request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Pay Stub Document that can be downloaded </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = downloadPayStubWithHttpInfo(employeeId, documentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadPayStub request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Pay Stub Document that can be downloaded </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return downloadPayStubWithHttpInfo(employeeId, documentId);
        }

        /**
         * Execute downloadPayStub request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns Pay Stub Document that can be downloaded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return downloadPayStubAsync(employeeId, documentId, _callback);
        }
    }

    /**
     * Download Employee Pay Stub Document
     * Data Access: Download Employee Pay Stub Document
     * @param employeeId Id of an Employee for whom you want to get the Pay Stub Document (required)
     * @param documentId Id of Pay Stub Document (required)
     * @return DownloadPayStubRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns Pay Stub Document that can be downloaded </td><td>  -  </td></tr>
     </table>
     */
    public DownloadPayStubRequestBuilder downloadPayStub(String employeeId, String documentId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (documentId == null) throw new IllegalArgumentException("\"documentId\" is required but got null");
            

        return new DownloadPayStubRequestBuilder(employeeId, documentId);
    }
    private okhttp3.Call getPayStubDocumentByEmployeeIdCall(String employeeId, OffsetDateTime startDate, OffsetDateTime endDate, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/paystubDocumentData"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayStubDocumentByEmployeeIdValidateBeforeCall(String employeeId, OffsetDateTime startDate, OffsetDateTime endDate, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getPayStubDocumentByEmployeeId(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getPayStubDocumentByEmployeeId(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getPayStubDocumentByEmployeeId(Async)");
        }

        return getPayStubDocumentByEmployeeIdCall(employeeId, startDate, endDate, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfPayStubFile> getPayStubDocumentByEmployeeIdWithHttpInfo(String employeeId, OffsetDateTime startDate, OffsetDateTime endDate, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = getPayStubDocumentByEmployeeIdValidateBeforeCall(employeeId, startDate, endDate, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfPayStubFile>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPayStubDocumentByEmployeeIdAsync(String employeeId, OffsetDateTime startDate, OffsetDateTime endDate, String continuationToken, final ApiCallback<PagedResultOfPayStubFile> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayStubDocumentByEmployeeIdValidateBeforeCall(employeeId, startDate, endDate, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfPayStubFile>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPayStubDocumentByEmployeeIdRequestBuilder {
        private final String employeeId;
        private final OffsetDateTime startDate;
        private final OffsetDateTime endDate;
        private String continuationToken;

        private GetPayStubDocumentByEmployeeIdRequestBuilder(String employeeId, OffsetDateTime startDate, OffsetDateTime endDate) {
            this.employeeId = employeeId;
            this.startDate = startDate;
            this.endDate = endDate;
        }

        /**
         * Set continuationToken
         * @param continuationToken Token to get the next set of Employee Pay Stubs Document Links (optional)
         * @return GetPayStubDocumentByEmployeeIdRequestBuilder
         */
        public GetPayStubDocumentByEmployeeIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for getPayStubDocumentByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs document link based on EmployeeID and date provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPayStubDocumentByEmployeeIdCall(employeeId, startDate, endDate, continuationToken, _callback);
        }


        /**
         * Execute getPayStubDocumentByEmployeeId request
         * @return PagedResultOfPayStubFile
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs document link based on EmployeeID and date provided. </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfPayStubFile execute() throws ApiException {
            ApiResponse<PagedResultOfPayStubFile> localVarResp = getPayStubDocumentByEmployeeIdWithHttpInfo(employeeId, startDate, endDate, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPayStubDocumentByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfPayStubFile&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs document link based on EmployeeID and date provided. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfPayStubFile> executeWithHttpInfo() throws ApiException {
            return getPayStubDocumentByEmployeeIdWithHttpInfo(employeeId, startDate, endDate, continuationToken);
        }

        /**
         * Execute getPayStubDocumentByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a Employee Pay Stubs document link based on EmployeeID and date provided. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfPayStubFile> _callback) throws ApiException {
            return getPayStubDocumentByEmployeeIdAsync(employeeId, startDate, endDate, continuationToken, _callback);
        }
    }

    /**
     * Get Employee Pay Stubs document link by EmployeeID
     * Start Date and End Date are required parameters.  Data Access: Get Employee Pay Stub Document Link
     * @param employeeId ID of an Employee for whom you want to get the Pay Stubs Document Link (required)
     * @param startDate Date that is earlier or equal to paycheck date (required)
     * @param endDate Date that is after or equal to paycheck date (required)
     * @return GetPayStubDocumentByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a Employee Pay Stubs document link based on EmployeeID and date provided. </td><td>  -  </td></tr>
     </table>
     */
    public GetPayStubDocumentByEmployeeIdRequestBuilder getPayStubDocumentByEmployeeId(String employeeId, OffsetDateTime startDate, OffsetDateTime endDate) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        return new GetPayStubDocumentByEmployeeIdRequestBuilder(employeeId, startDate, endDate);
    }
}
