/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Certification;
import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.EmployeeCertification2;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedResultOfEmployeeCertification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeCertificationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeCertificationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeCertificationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewCertificationCall(String employeeId, Certification certification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certification;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/certifications"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewCertificationValidateBeforeCall(String employeeId, Certification certification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling addNewCertification(Async)");
        }

        // verify the required parameter 'certification' is set
        if (certification == null) {
            throw new ApiException("Missing the required parameter 'certification' when calling addNewCertification(Async)");
        }

        return addNewCertificationCall(employeeId, certification, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> addNewCertificationWithHttpInfo(String employeeId, Certification certification) throws ApiException {
        okhttp3.Call localVarCall = addNewCertificationValidateBeforeCall(employeeId, certification, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewCertificationAsync(String employeeId, Certification certification, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewCertificationValidateBeforeCall(employeeId, certification, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewCertificationRequestBuilder {
        private final String certificationName;
        private final String employeeId;
        private OffsetDateTime effectiveDate;
        private OffsetDateTime expirationDate;
        private String certificationNumber;
        private String certificationOrganizationName;
        private String notes;

        private AddNewCertificationRequestBuilder(String certificationName, String employeeId) {
            this.certificationName = certificationName;
            this.employeeId = employeeId;
        }

        /**
         * Set effectiveDate
         * @param effectiveDate Effective date of certification              (optional)
         * @return AddNewCertificationRequestBuilder
         */
        public AddNewCertificationRequestBuilder effectiveDate(OffsetDateTime effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate Expiration date of certification              (optional)
         * @return AddNewCertificationRequestBuilder
         */
        public AddNewCertificationRequestBuilder expirationDate(OffsetDateTime expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        
        /**
         * Set certificationNumber
         * @param certificationNumber Number of certification              (optional)
         * @return AddNewCertificationRequestBuilder
         */
        public AddNewCertificationRequestBuilder certificationNumber(String certificationNumber) {
            this.certificationNumber = certificationNumber;
            return this;
        }
        
        /**
         * Set certificationOrganizationName
         * @param certificationOrganizationName Name of certification organization              (optional)
         * @return AddNewCertificationRequestBuilder
         */
        public AddNewCertificationRequestBuilder certificationOrganizationName(String certificationOrganizationName) {
            this.certificationOrganizationName = certificationOrganizationName;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Note on certification              (optional)
         * @return AddNewCertificationRequestBuilder
         */
        public AddNewCertificationRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for addNewCertification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Certification certification = buildBodyParams();
            return addNewCertificationCall(employeeId, certification, _callback);
        }

        private Certification buildBodyParams() {
            Certification certification = new Certification();
            certification.effectiveDate(this.effectiveDate);
            certification.expirationDate(this.expirationDate);
            certification.certificationName(this.certificationName);
            certification.certificationNumber(this.certificationNumber);
            certification.certificationOrganizationName(this.certificationOrganizationName);
            certification.notes(this.notes);
            return certification;
        }

        /**
         * Execute addNewCertification request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            Certification certification = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = addNewCertificationWithHttpInfo(employeeId, certification);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewCertification request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            Certification certification = buildBodyParams();
            return addNewCertificationWithHttpInfo(employeeId, certification);
        }

        /**
         * Execute addNewCertification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            Certification certification = buildBodyParams();
            return addNewCertificationAsync(employeeId, certification, _callback);
        }
    }

    /**
     * Add Employee Certification
     * Data Access: Create and Update Certification
     * @param employeeId ID of an Employee for whom you want to add the certification (required)
     * @param certification Certification object (required)
     * @return AddNewCertificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public AddNewCertificationRequestBuilder addNewCertification(String certificationName, String employeeId) throws IllegalArgumentException {
        if (certificationName == null) throw new IllegalArgumentException("\"certificationName\" is required but got null");
            if (certificationName != null && certificationName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for certificationName. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new AddNewCertificationRequestBuilder(certificationName, employeeId);
    }
    private okhttp3.Call listByEmployeeIdCall(String employeeId, String continuationToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/certifications"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (continuationToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("continuationToken", continuationToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByEmployeeIdValidateBeforeCall(String employeeId, String continuationToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling listByEmployeeId(Async)");
        }

        return listByEmployeeIdCall(employeeId, continuationToken, _callback);

    }


    private ApiResponse<PagedResultOfEmployeeCertification> listByEmployeeIdWithHttpInfo(String employeeId, String continuationToken) throws ApiException {
        okhttp3.Call localVarCall = listByEmployeeIdValidateBeforeCall(employeeId, continuationToken, null);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeCertification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByEmployeeIdAsync(String employeeId, String continuationToken, final ApiCallback<PagedResultOfEmployeeCertification> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByEmployeeIdValidateBeforeCall(employeeId, continuationToken, _callback);
        Type localVarReturnType = new TypeToken<PagedResultOfEmployeeCertification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByEmployeeIdRequestBuilder {
        private final String employeeId;
        private String continuationToken;

        private ListByEmployeeIdRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Set continuationToken
         * @param continuationToken  (optional)
         * @return ListByEmployeeIdRequestBuilder
         */
        public ListByEmployeeIdRequestBuilder continuationToken(String continuationToken) {
            this.continuationToken = continuationToken;
            return this;
        }
        
        /**
         * Build call for listByEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of Employee Certifications for an employee </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByEmployeeIdCall(employeeId, continuationToken, _callback);
        }


        /**
         * Execute listByEmployeeId request
         * @return PagedResultOfEmployeeCertification
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of Employee Certifications for an employee </td><td>  -  </td></tr>
         </table>
         */
        public PagedResultOfEmployeeCertification execute() throws ApiException {
            ApiResponse<PagedResultOfEmployeeCertification> localVarResp = listByEmployeeIdWithHttpInfo(employeeId, continuationToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;PagedResultOfEmployeeCertification&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of Employee Certifications for an employee </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedResultOfEmployeeCertification> executeWithHttpInfo() throws ApiException {
            return listByEmployeeIdWithHttpInfo(employeeId, continuationToken);
        }

        /**
         * Execute listByEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a list of Employee Certifications for an employee </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedResultOfEmployeeCertification> _callback) throws ApiException {
            return listByEmployeeIdAsync(employeeId, continuationToken, _callback);
        }
    }

    /**
     * Get a list of Employee Certifications for an employee
     * Data Access: View Certification Information for Employee
     * @param employeeId ID of the employee for which you want to get the certifications (required)
     * @return ListByEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of Employee Certifications for an employee </td><td>  -  </td></tr>
     </table>
     */
    public ListByEmployeeIdRequestBuilder listByEmployeeId(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new ListByEmployeeIdRequestBuilder(employeeId);
    }
    private okhttp3.Call updateCertificationCall(String employeeId, EmployeeCertification2 employeeCertification2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeeCertification2;

        // create path and map variables
        String localVarPath = "/v1/employees/{employeeId}/certifications"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Access-Token", "Apim-Subscription-Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCertificationValidateBeforeCall(String employeeId, EmployeeCertification2 employeeCertification2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateCertification(Async)");
        }

        // verify the required parameter 'employeeCertification2' is set
        if (employeeCertification2 == null) {
            throw new ApiException("Missing the required parameter 'employeeCertification2' when calling updateCertification(Async)");
        }

        return updateCertificationCall(employeeId, employeeCertification2, _callback);

    }


    private ApiResponse<CreateOrUpdateResponse> updateCertificationWithHttpInfo(String employeeId, EmployeeCertification2 employeeCertification2) throws ApiException {
        okhttp3.Call localVarCall = updateCertificationValidateBeforeCall(employeeId, employeeCertification2, null);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCertificationAsync(String employeeId, EmployeeCertification2 employeeCertification2, final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCertificationValidateBeforeCall(employeeId, employeeCertification2, _callback);
        Type localVarReturnType = new TypeToken<CreateOrUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCertificationRequestBuilder {
        private final String employeeCertificationId;
        private final String employeeId;
        private String certificationNumber;
        private OffsetDateTime effectiveDate;
        private OffsetDateTime expirationDate;
        private String notes;

        private UpdateCertificationRequestBuilder(String employeeCertificationId, String employeeId) {
            this.employeeCertificationId = employeeCertificationId;
            this.employeeId = employeeId;
        }

        /**
         * Set certificationNumber
         * @param certificationNumber Number of certification              (optional)
         * @return UpdateCertificationRequestBuilder
         */
        public UpdateCertificationRequestBuilder certificationNumber(String certificationNumber) {
            this.certificationNumber = certificationNumber;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate Effective date of certification              (optional)
         * @return UpdateCertificationRequestBuilder
         */
        public UpdateCertificationRequestBuilder effectiveDate(OffsetDateTime effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate Expiration date of certification              (optional)
         * @return UpdateCertificationRequestBuilder
         */
        public UpdateCertificationRequestBuilder expirationDate(OffsetDateTime expirationDate) {
            this.expirationDate = expirationDate;
            return this;
        }
        
        /**
         * Set notes
         * @param notes Note on certification              (optional)
         * @return UpdateCertificationRequestBuilder
         */
        public UpdateCertificationRequestBuilder notes(String notes) {
            this.notes = notes;
            return this;
        }
        
        /**
         * Build call for updateCertification
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a resource reference for employee certifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeCertification2 employeeCertification2 = buildBodyParams();
            return updateCertificationCall(employeeId, employeeCertification2, _callback);
        }

        private EmployeeCertification2 buildBodyParams() {
            EmployeeCertification2 employeeCertification2 = new EmployeeCertification2();
            employeeCertification2.certificationNumber(this.certificationNumber);
            employeeCertification2.employeeCertificationId(this.employeeCertificationId);
            employeeCertification2.effectiveDate(this.effectiveDate);
            employeeCertification2.expirationDate(this.expirationDate);
            employeeCertification2.notes(this.notes);
            return employeeCertification2;
        }

        /**
         * Execute updateCertification request
         * @return CreateOrUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a resource reference for employee certifications </td><td>  -  </td></tr>
         </table>
         */
        public CreateOrUpdateResponse execute() throws ApiException {
            EmployeeCertification2 employeeCertification2 = buildBodyParams();
            ApiResponse<CreateOrUpdateResponse> localVarResp = updateCertificationWithHttpInfo(employeeId, employeeCertification2);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCertification request with HTTP info returned
         * @return ApiResponse&lt;CreateOrUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a resource reference for employee certifications </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOrUpdateResponse> executeWithHttpInfo() throws ApiException {
            EmployeeCertification2 employeeCertification2 = buildBodyParams();
            return updateCertificationWithHttpInfo(employeeId, employeeCertification2);
        }

        /**
         * Execute updateCertification request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns a resource reference for employee certifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOrUpdateResponse> _callback) throws ApiException {
            EmployeeCertification2 employeeCertification2 = buildBodyParams();
            return updateCertificationAsync(employeeId, employeeCertification2, _callback);
        }
    }

    /**
     * Update Employee Certification
     * Data Access: Create and Update Certification
     * @param employeeId ID of the employee for which you want to update the certifications (required)
     * @param employeeCertification2  (required)
     * @return UpdateCertificationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a resource reference for employee certifications </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCertificationRequestBuilder updateCertification(String employeeCertificationId, String employeeId) throws IllegalArgumentException {
        if (employeeCertificationId == null) throw new IllegalArgumentException("\"employeeCertificationId\" is required but got null");
            if (employeeCertificationId != null && employeeCertificationId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for employeeCertificationId. Length must be greater than or equal to 1.");
            }

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UpdateCertificationRequestBuilder(employeeCertificationId, employeeId);
    }
}
