/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmploymentStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;


/**
 * Model tests for JobCosting
 */
public class JobCostingTest {
    private final JobCosting model = new JobCosting();

    /**
     * Model tests for JobCosting
     */
    @Test
    public void testJobCosting() {
        // TODO: test JobCosting
    }

    /**
     * Test the property 'legalEntityId'
     */
    @Test
    public void legalEntityIdTest() {
        // TODO: test legalEntityId
    }

    /**
     * Test the property 'checkDate'
     */
    @Test
    public void checkDateTest() {
        // TODO: test checkDate
    }

    /**
     * Test the property 'departmentDescription'
     */
    @Test
    public void departmentDescriptionTest() {
        // TODO: test departmentDescription
    }

    /**
     * Test the property 'departmentCode'
     */
    @Test
    public void departmentCodeTest() {
        // TODO: test departmentCode
    }

    /**
     * Test the property 'laborCategory1Code'
     */
    @Test
    public void laborCategory1CodeTest() {
        // TODO: test laborCategory1Code
    }

    /**
     * Test the property 'laborCode1'
     */
    @Test
    public void laborCode1Test() {
        // TODO: test laborCode1
    }

    /**
     * Test the property 'laborCode1Id'
     */
    @Test
    public void laborCode1IdTest() {
        // TODO: test laborCode1Id
    }

    /**
     * Test the property 'laborCode1Description'
     */
    @Test
    public void laborCode1DescriptionTest() {
        // TODO: test laborCode1Description
    }

    /**
     * Test the property 'laborCategory2Code'
     */
    @Test
    public void laborCategory2CodeTest() {
        // TODO: test laborCategory2Code
    }

    /**
     * Test the property 'laborCode2'
     */
    @Test
    public void laborCode2Test() {
        // TODO: test laborCode2
    }

    /**
     * Test the property 'laborCode2Id'
     */
    @Test
    public void laborCode2IdTest() {
        // TODO: test laborCode2Id
    }

    /**
     * Test the property 'laborCode2Description'
     */
    @Test
    public void laborCode2DescriptionTest() {
        // TODO: test laborCode2Description
    }

    /**
     * Test the property 'laborCategory3Code'
     */
    @Test
    public void laborCategory3CodeTest() {
        // TODO: test laborCategory3Code
    }

    /**
     * Test the property 'laborCode3'
     */
    @Test
    public void laborCode3Test() {
        // TODO: test laborCode3
    }

    /**
     * Test the property 'laborCode3Id'
     */
    @Test
    public void laborCode3IdTest() {
        // TODO: test laborCode3Id
    }

    /**
     * Test the property 'laborCode3Description'
     */
    @Test
    public void laborCode3DescriptionTest() {
        // TODO: test laborCode3Description
    }

    /**
     * Test the property 'laborCategory4Code'
     */
    @Test
    public void laborCategory4CodeTest() {
        // TODO: test laborCategory4Code
    }

    /**
     * Test the property 'laborCode4'
     */
    @Test
    public void laborCode4Test() {
        // TODO: test laborCode4
    }

    /**
     * Test the property 'laborCode4Id'
     */
    @Test
    public void laborCode4IdTest() {
        // TODO: test laborCode4Id
    }

    /**
     * Test the property 'laborCode4Description'
     */
    @Test
    public void laborCode4DescriptionTest() {
        // TODO: test laborCode4Description
    }

    /**
     * Test the property 'laborCategory5Code'
     */
    @Test
    public void laborCategory5CodeTest() {
        // TODO: test laborCategory5Code
    }

    /**
     * Test the property 'laborCode5'
     */
    @Test
    public void laborCode5Test() {
        // TODO: test laborCode5
    }

    /**
     * Test the property 'laborCode5Id'
     */
    @Test
    public void laborCode5IdTest() {
        // TODO: test laborCode5Id
    }

    /**
     * Test the property 'laborCode5Description'
     */
    @Test
    public void laborCode5DescriptionTest() {
        // TODO: test laborCode5Description
    }

    /**
     * Test the property 'laborCategory6Code'
     */
    @Test
    public void laborCategory6CodeTest() {
        // TODO: test laborCategory6Code
    }

    /**
     * Test the property 'laborCode6'
     */
    @Test
    public void laborCode6Test() {
        // TODO: test laborCode6
    }

    /**
     * Test the property 'laborCode6Id'
     */
    @Test
    public void laborCode6IdTest() {
        // TODO: test laborCode6Id
    }

    /**
     * Test the property 'laborCode6Description'
     */
    @Test
    public void laborCode6DescriptionTest() {
        // TODO: test laborCode6Description
    }

    /**
     * Test the property 'glAccountNumber'
     */
    @Test
    public void glAccountNumberTest() {
        // TODO: test glAccountNumber
    }

    /**
     * Test the property 'glAccountDescription'
     */
    @Test
    public void glAccountDescriptionTest() {
        // TODO: test glAccountDescription
    }

    /**
     * Test the property 'creditAmount'
     */
    @Test
    public void creditAmountTest() {
        // TODO: test creditAmount
    }

    /**
     * Test the property 'debitAmount'
     */
    @Test
    public void debitAmountTest() {
        // TODO: test debitAmount
    }

    /**
     * Test the property 'weekNumber'
     */
    @Test
    public void weekNumberTest() {
        // TODO: test weekNumber
    }

    /**
     * Test the property 'payNumber'
     */
    @Test
    public void payNumberTest() {
        // TODO: test payNumber
    }

    /**
     * Test the property 'fileDateMonth'
     */
    @Test
    public void fileDateMonthTest() {
        // TODO: test fileDateMonth
    }

    /**
     * Test the property 'fileDateDay'
     */
    @Test
    public void fileDateDayTest() {
        // TODO: test fileDateDay
    }

    /**
     * Test the property 'fileDateYear'
     */
    @Test
    public void fileDateYearTest() {
        // TODO: test fileDateYear
    }

    /**
     * Test the property 'employeeId'
     */
    @Test
    public void employeeIdTest() {
        // TODO: test employeeId
    }

    /**
     * Test the property 'employeeDepartmentDescription'
     */
    @Test
    public void employeeDepartmentDescriptionTest() {
        // TODO: test employeeDepartmentDescription
    }

    /**
     * Test the property 'employeeDepartmentCode'
     */
    @Test
    public void employeeDepartmentCodeTest() {
        // TODO: test employeeDepartmentCode
    }

    /**
     * Test the property 'employeeLastName'
     */
    @Test
    public void employeeLastNameTest() {
        // TODO: test employeeLastName
    }

    /**
     * Test the property 'employeeFirstName'
     */
    @Test
    public void employeeFirstNameTest() {
        // TODO: test employeeFirstName
    }

    /**
     * Test the property 'employeeMiddleName'
     */
    @Test
    public void employeeMiddleNameTest() {
        // TODO: test employeeMiddleName
    }

    /**
     * Test the property 'employeeNumber'
     */
    @Test
    public void employeeNumberTest() {
        // TODO: test employeeNumber
    }

    /**
     * Test the property 'employeeStatus'
     */
    @Test
    public void employeeStatusTest() {
        // TODO: test employeeStatus
    }

    /**
     * Test the property 'checkNumber'
     */
    @Test
    public void checkNumberTest() {
        // TODO: test checkNumber
    }

    /**
     * Test the property 'periodStartDate'
     */
    @Test
    public void periodStartDateTest() {
        // TODO: test periodStartDate
    }

    /**
     * Test the property 'periodEndDate'
     */
    @Test
    public void periodEndDateTest() {
        // TODO: test periodEndDate
    }

}
