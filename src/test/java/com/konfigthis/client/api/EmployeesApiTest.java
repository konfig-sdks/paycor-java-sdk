/*
 * Paycor Public API
 *  Welcome to Paycor's Public API! This document is a reference for the APIs Paycor has available, and acts as a complement to the \"Guides\" section.   # Getting Started  <strong>To learn more about getting started with Paycor's Public APIs, check out our <a href=\"/guides\">Guides.</a></strong>  # GET, PUT, POST  * When requesting object, use GET endpoints. All list endpoints support paging, as described [in the other doc].  * When creating an object, use POST endpoints. Your code will need to create an object and send it to Paycor in your API call request body as JSON. You can use the \"request sample\" body as a starting point. Our endpoints will return a reference to the created object (the ID and GET API URL) for your system. * When updating an object, you will use PUT endpoints. The general flow would be to: GET the object you want to update, modify the fields as desired, then PUT the object (as JSON in the request body) to our endpoints. Some fields like the object's ID cannot be updated because they are system-set.'   # Error Handling  * 400: Please consult the response text to correct your request information.  * 401 with response \"Access denied due to missing subscription key\": Please include your APIM Subscription Key as header Ocp-Apim-Subscription-Key or querystring parameter subscription-key.  * 401 with no response: Please ensure you included a valid & current Access Token in the Authorization header. * 403: Please ensure your Access Token's scope has all the relevant access you need, on the AppCreator Data Access screen.  * 404: Please validate the API route you are using. If that is correct, one of your IDs most likely does not exist or is not in a valid state.  * 429: Paycor implements rate limits for our Public API. Each customer (implemented via APIM subscription key) has a limited number of calls. The number of calls is counted across all APIs, not per individual API. Please use bulk endpoints where available and spread your calls over a wider timespan.   * The default rate limit is up to 1000 API calls per minute (total across all our Public APIs).  * 500: Please contact Paycor. When you make a POST or PUT call and receive a 500, please do not retry the call automatically - this may result in double-posting. GETs can be safely retried.   # IDs  * ClientId = LegalEntityId * TenantId = CompanyId * EmployeeId is not visible in Paycor's UI, you must retrieve it from the Public API  # Earnings, Deductions, Taxes  This section describes the domain model for Paycor's Earnings, Deductions, and Taxes. This will provide background for many paydata-related Public API endpoints.   Paycor stores Earnings, Deductions, and Taxes each at three levels: * Global: Same data across all legal entities. Setup by Paycor for customers to choose from. Sample Codes (note these will not be setup on every Legal Entity):   * Earnings: REG, OT   * Taxes: FITWH, SOC, SOCER, OHCIN   * Deductions: 401k, KMat, H125, UWay * Legal Entity or Tenant: Codes setup &amp; customized on the legal entity or Tenant level. Must be tied to a Global Code.    * Perform UI allows creating Deduction and Earning codes on Tenant level (under Configure Company nav menu). These will be returned by the Legal Entity Public API endpoints.  * Employee: codes setup on a particular employee, tied to a Legal Entity-level or Tenant-level code   * Employee Earnings/Deductions/Taxes are applied during payroll. Many properties are inherited from the Legal Entity or Global levels, but some can be overridden.   # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateOrUpdateResponse;
import com.konfigthis.client.model.DisabilityStatus;
import com.konfigthis.client.model.EligibleForRehire;
import com.konfigthis.client.model.EmailTypeOptions;
import com.konfigthis.client.model.EmailTypeOptions2;
import com.konfigthis.client.model.Employee2;
import com.konfigthis.client.model.EmployeeContact;
import com.konfigthis.client.model.EmployeeIdentifyingData;
import com.konfigthis.client.model.EmployeePosition;
import com.konfigthis.client.model.EmployeePositionAndStatus;
import com.konfigthis.client.model.EmployeeReturnItem;
import com.konfigthis.client.model.EmployeeStatusUpdate;
import com.konfigthis.client.model.EmploymentStatus;
import com.konfigthis.client.model.EmploymentStatus2;
import com.konfigthis.client.model.EmploymentType;
import com.konfigthis.client.model.EthnicityType;
import com.konfigthis.client.model.FlsaType;
import com.konfigthis.client.model.Gender;
import com.konfigthis.client.model.GenericAddress;
import com.konfigthis.client.model.Includes13;
import com.konfigthis.client.model.Includes14;
import com.konfigthis.client.model.Includes15;
import com.konfigthis.client.model.MaritalStatus;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedResultOfEmployeeList;
import com.konfigthis.client.model.PagedResultOfEmployeeReturnItem;
import com.konfigthis.client.model.PagedResultOfEmployeesIdentifyingData;
import com.konfigthis.client.model.Phone;
import com.konfigthis.client.model.Prefix;
import com.konfigthis.client.model.Suffix;
import com.konfigthis.client.model.VeteranStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeesApi
 */
@Disabled
public class EmployeesApiTest {

    private static EmployeesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeesApi(apiClient);
    }

    /**
     * Create Employee
     *
     * This immediately \&quot;hires\&quot; a new employee and associated Person in Paycor&#39;s system. There is no way to undo or reverse this operation. After creating an employee, please wait sixty seconds before using employeeId to call other endpoints.              Data Access: Create Employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewEmployeeTest() throws ApiException {
        Integer legalEntityId = null;
        String firstName = null;
        String lastName = null;
        OffsetDateTime hireDate = null;
        EmploymentStatus status = null;
        String paygroupDescription = null;
        Long departmentCode = null;
        GenericAddress primaryAddress = null;
        Integer employeeNumber = null;
        String alternateEmployeeNumber = null;
        Prefix prefix = null;
        String middleName = null;
        Suffix suffix = null;
        String homeEmail = null;
        String workEmail = null;
        List<Phone> phones = null;
        String socialSecurityNumber = null;
        OffsetDateTime birthDate = null;
        Gender gender = null;
        EthnicityType ethnicity = null;
        MaritalStatus maritalStatus = null;
        String workLocation = null;
        String jobTitle = null;
        OffsetDateTime reHireDate = null;
        FlsaType flsa = null;
        EmploymentType type = null;
        String managerEmpId = null;
        VeteranStatus veteran = null;
        DisabilityStatus disability = null;
        CreateOrUpdateResponse response = api.createNewEmployee(legalEntityId, firstName, lastName, hireDate, status, paygroupDescription, departmentCode, primaryAddress)
                .employeeNumber(employeeNumber)
                .alternateEmployeeNumber(alternateEmployeeNumber)
                .prefix(prefix)
                .middleName(middleName)
                .suffix(suffix)
                .homeEmail(homeEmail)
                .workEmail(workEmail)
                .phones(phones)
                .socialSecurityNumber(socialSecurityNumber)
                .birthDate(birthDate)
                .gender(gender)
                .ethnicity(ethnicity)
                .maritalStatus(maritalStatus)
                .workLocation(workLocation)
                .jobTitle(jobTitle)
                .reHireDate(reHireDate)
                .flsa(flsa)
                .type(type)
                .managerEmpId(managerEmpId)
                .veteran(veteran)
                .disability(disability)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Employee by EmployeeID
     *
     * Tip: you can retrieve a valid EmployeeID guid via endpoints like &#39;Get Employees by Legal Entity ID&#39;              Data Access: View Employee Information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByEmployeeIdTest() throws ApiException {
        String employeeId = null;
        List<Includes13> include = null;
        EmailTypeOptions emailType = null;
        EmployeeReturnItem response = api.getByEmployeeId(employeeId)
                .include(include)
                .emailType(emailType)
                .execute();
        // TODO: test validations
    }

    /**
     * GET Identifying Employee Data by Legal Entity Id
     *
     * Data Access: View Legal Entity Employees Identifying Data              Optional Data Access: View Legal Entity Employees SSN and BirthDate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIdentifyingDataTest() throws ApiException {
        Integer legalEntityId = null;
        List<Includes15> include = null;
        String continuationToken = null;
        PagedResultOfEmployeesIdentifyingData response = api.getIdentifyingData(legalEntityId)
                .include(include)
                .continuationToken(continuationToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Employees by Legal Entity ID
     *
     * Data Access: View Legal Entity Employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByLegalEntityIdTest() throws ApiException {
        Integer legalEntityId = null;
        List<Includes14> include = null;
        EmailTypeOptions2 emailType = null;
        EmploymentStatus statusFilter = null;
        Integer employeeNumber = null;
        String lastName = null;
        Long departmentCode = null;
        String workLocationName = null;
        String continuationToken = null;
        PagedResultOfEmployeeReturnItem response = api.listByLegalEntityId(legalEntityId)
                .include(include)
                .emailType(emailType)
                .statusFilter(statusFilter)
                .employeeNumber(employeeNumber)
                .lastName(lastName)
                .departmentCode(departmentCode)
                .workLocationName(workLocationName)
                .continuationToken(continuationToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Employees By TenantID
     *
     * Data Access: View Tenant Employees
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listByTenantIdTest() throws ApiException {
        Integer tenantId = null;
        EmploymentStatus statusFilter = null;
        Integer employeeNumber = null;
        String lastName = null;
        Long departmentCode = null;
        String workLocationName = null;
        String jobCode = null;
        String continuationToken = null;
        PagedResultOfEmployeeList response = api.listByTenantId(tenantId)
                .statusFilter(statusFilter)
                .employeeNumber(employeeNumber)
                .lastName(lastName)
                .departmentCode(departmentCode)
                .workLocationName(workLocationName)
                .jobCode(jobCode)
                .continuationToken(continuationToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee Contact
     *
     * This immediately updates an employee&#39;s contact information and associated Person&#39;s in Paycor&#39;s system.              Data Access: Update Employee Contact
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String employeeId = null;
        String homeEmail = null;
        String workEmail = null;
        List<Phone> phones = null;
        GenericAddress primaryAddress = null;
        CreateOrUpdateResponse response = api.updateContact(employeeId)
                .homeEmail(homeEmail)
                .workEmail(workEmail)
                .phones(phones)
                .primaryAddress(primaryAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee Paygroup
     *
     * This endpoint updates an employee&#39;s paygroup.              Data Access: Update Employee Paygroup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaygroupTest() throws ApiException {
        String employeeId = null;
        String payGroupId = null;
        CreateOrUpdateResponse response = api.updatePaygroup(employeeId)
                .payGroupId(payGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee Personal data
     *
     * This endpoint updates an employee&#39;s personal information.              Data Access: Update Employee Identifying Data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePersonalDataTest() throws ApiException {
        String firstName = null;
        String lastName = null;
        Suffix suffix = null;
        String socialSecurityNumber = null;
        OffsetDateTime birthDate = null;
        String employeeId = null;
        String middleName = null;
        CreateOrUpdateResponse response = api.updatePersonalData(firstName, lastName, suffix, socialSecurityNumber, birthDate, employeeId)
                .middleName(middleName)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee Position and Status data
     *
     * This endpoint updates an employee&#39;s status and position information.              Data Access: Update Employee Position And Status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePositionAndStatusDataTest() throws ApiException {
        EmploymentStatus2 employmentStatus = null;
        OffsetDateTime rehireDate = null;
        EmploymentType employmentType = null;
        String workLocation = null;
        String employeeId = null;
        String jobTitle = null;
        FlsaType flsa = null;
        String managerId = null;
        String departmentId = null;
        CreateOrUpdateResponse response = api.updatePositionAndStatusData(employmentStatus, rehireDate, employmentType, workLocation, employeeId)
                .jobTitle(jobTitle)
                .flsa(flsa)
                .managerId(managerId)
                .departmentId(departmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee Position data
     *
     * This endpoint updates an employee&#39;s position information.              Data Access: Update Employee Position
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePositionDataTest() throws ApiException {
        EmploymentType employmentType = null;
        String workLocation = null;
        String employeeId = null;
        String jobTitle = null;
        FlsaType flsa = null;
        String managerId = null;
        String departmentId = null;
        CreateOrUpdateResponse response = api.updatePositionData(employmentType, workLocation, employeeId)
                .jobTitle(jobTitle)
                .flsa(flsa)
                .managerId(managerId)
                .departmentId(departmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Employee Status data
     *
     * This endpoint updates an employee status information.              Data Access: Update Employee Status Data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStatusDataTest() throws ApiException {
        OffsetDateTime effectiveDate = null;
        EmploymentStatus employeeStatus = null;
        String employeeId = null;
        String employeeStatusReasonId = null;
        EligibleForRehire eligibleForRehire = null;
        Boolean isVoluntaryByEmployee = null;
        String notes = null;
        CreateOrUpdateResponse response = api.updateStatusData(effectiveDate, employeeStatus, employeeId)
                .employeeStatusReasonId(employeeStatusReasonId)
                .eligibleForRehire(eligibleForRehire)
                .isVoluntaryByEmployee(isVoluntaryByEmployee)
                .notes(notes)
                .execute();
        // TODO: test validations
    }

}
